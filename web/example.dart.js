// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
var A = {};
delete A.x;
var B = {};
delete B.x;
var C = {};
delete C.x;
var D = {};
delete D.x;
var E = {};
delete E.x;
var F = {};
delete F.x;
var G = {};
delete G.x;
var H = {};
delete H.x;
var J = {};
delete J.x;
var K = {};
delete K.x;
var L = {};
delete L.x;
var M = {};
delete M.x;
var N = {};
delete N.x;
var O = {};
delete O.x;
var P = {};
delete P.x;
var Q = {};
delete Q.x;
var R = {};
delete R.x;
var S = {};
delete S.x;
var T = {};
delete T.x;
var U = {};
delete U.x;
var V = {};
delete V.x;
var W = {};
delete W.x;
var X = {};
delete X.x;
var Y = {};
delete Y.x;
var Z = {};
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Method closures
$$.BoundClosure$i0 = [H, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this.__js_helper$_target.call(this._self, this._receiver);
  }
}];

$$.BoundClosure$1 = [H, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, p0);
  },
  $is_args1: true
}];

$$.BoundClosure$0 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this.__js_helper$_target.call(this._self);
  }
}];

$$.BoundClosure$i1 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, this._receiver, p0);
  },
  $is_args1: true
}];

$$.BoundClosure$2 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this.__js_helper$_target.call(this._self, p0, p1);
  },
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

$$.Closure$2 = [H, {"": "Closure;call$2,$name", $is_args2: true}];

$$.Closure$1 = [H, {"": "Closure;call$1,$name", $is_args1: true}];

$$.Closure$0 = [H, {"": "Closure;call$0,$name"}];

$$.Closure$7 = [H, {"": "Closure;call$7,$name"}];

$$.Closure$20 = [P, {"": "Closure;call$2,$name",
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

(function (reflectionData) {
  function map(x){x={x:x};delete x.x;return x}
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.typeInformation) init.typeInformation = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.typeInformation[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
JS_CONST: {"": "Object;code"}}],
["_interceptors", "dart:_interceptors", , J, {
getInterceptor: function(object) {
  return void 0;
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto, interceptor;
  record = object[init.dispatchPropertyName];
  if (record == null)
    if ($.initNativeDispatchFlag == null) {
      H.initNativeDispatch();
      record = object[init.dispatchPropertyName];
    }
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
  }
  interceptor = H.lookupAndCacheInterceptor(object);
  if (interceptor == null)
    return C.UnknownJavaScriptObject_methods;
  return interceptor;
},

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return H.Primitives_objectToString(receiver);
  },
  "%": "CanvasGradient|CanvasPattern|DOMError|FileError|MediaError|MediaKeyError|Navigator|NavigatorUserMediaError|PositionError|SQLError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString|Screen|TextMetrics"
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
},

JavaScriptObject: {"": "Interceptor;",
  get$hashCode: function(_) {
    return 0;
  }
},

PlainJavaScriptObject: {"": "JavaScriptObject;"},

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

JSArray: {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("add"));
    receiver.push(value);
  },
  removeAt$1: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index < 0 || index >= receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("removeAt"));
    return receiver.splice(index, 1)[0];
  },
  insert$2: function(receiver, index, value) {
    if (index < 0 || index > receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("insert"));
    receiver.splice(index, 0, value);
  },
  remove$1: function(receiver, element) {
    var i;
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("remove"));
    for (i = 0; i < receiver.length; ++i)
      if (J.$eq(receiver[i], element)) {
        receiver.splice(i, 1);
        return true;
      }
    return false;
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    return H.IterableMixinWorkaround_forEach(receiver, f);
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  removeRange$2: function(receiver, start, end) {
    var receiverLength;
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("removeRange"));
    receiverLength = receiver.length;
    if (start < 0 || start > receiverLength)
      throw H.wrapException(P.RangeError$range(start, 0, receiverLength));
    if (end < start || end > receiverLength)
      throw H.wrapException(P.RangeError$range(end, start, receiverLength));
    H.Arrays_copy(receiver, end, receiver, start, receiverLength - end);
    this.set$length(receiver, receiverLength - (end - start));
  },
  contains$1: function(receiver, other) {
    var i;
    for (i = 0; i < receiver.length; ++i)
      if (J.$eq(receiver[i], other))
        return true;
    return false;
  },
  toString$0: function(receiver) {
    return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, receiver.length, 0, null);
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (newLength < 0)
      throw H.wrapException(P.RangeError$value(newLength));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      H.throwExpression(P.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: true,
  $asList: null,
  $isList: true,
  $isEfficientLength: true
},

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true,
  $asJSArray: function() {
    return [null];
  },
  $asList: function() {
    return [null];
  }
},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (typeof b !== "number")
      throw H.wrapException(new P.ArgumentError(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if (this.get$isNegative(receiver) === bIsNegative)
          return 0;
        if (this.get$isNegative(receiver))
          return -1;
        return 1;
      }
      return 0;
    } else if (isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var t1;
    if (receiver >= -2147483648 && receiver <= 2147483647)
      return receiver | 0;
    if (isFinite(receiver)) {
      t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
      return t1 + 0;
    }
    throw H.wrapException(P.UnsupportedError$('' + receiver));
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  toDouble$0: function(receiver) {
    return receiver;
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver - other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
      return receiver / other | 0;
    else
      return this._slowTdiv$1(receiver, other);
  },
  _slowTdiv$1: function(receiver, other) {
    return this.toInt$0(receiver / other);
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw H.wrapException(P.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true,
  static: {
"": "JSNumber__MIN_INT32,JSNumber__MAX_INT32",
}

},

JSInt: {"": "int/JSNumber;", $isdouble: true, $isnum: true, $isint: true},

JSDouble: {"": "double/JSNumber;", $isdouble: true, $isnum: true},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(P.ArgumentError$(index));
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    if (index >= receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  replaceAll$2: function(receiver, from, to) {
    return H.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    return receiver.split(pattern);
  },
  startsWith$2: function(receiver, pattern, index) {
    var endIndex;
    if (index < 0 || index > receiver.length)
      throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
    endIndex = index + pattern.length;
    if (endIndex > receiver.length)
      return false;
    return pattern === receiver.substring(index, endIndex);
  },
  startsWith$1: function($receiver, pattern) {
    return this.startsWith$2($receiver, pattern, 0);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
      H.throwExpression(P.ArgumentError$(startIndex));
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
      H.throwExpression(P.ArgumentError$(endIndex));
    if (startIndex < 0)
      throw H.wrapException(P.RangeError$value(startIndex));
    if (typeof endIndex !== "number")
      throw H.iae(endIndex);
    if (startIndex > endIndex)
      throw H.wrapException(P.RangeError$value(startIndex));
    if (endIndex > receiver.length)
      throw H.wrapException(P.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  trim$0: function(receiver) {
    var endIndex, startIndex, codeUnit, endIndex0, endIndex1;
    for (endIndex = receiver.length, startIndex = 0; startIndex < endIndex;) {
      if (startIndex >= endIndex)
        H.throwExpression(P.RangeError$value(startIndex));
      codeUnit = receiver.charCodeAt(startIndex);
      if (codeUnit === 32 || codeUnit === 13 || J.JSString__isWhitespace(codeUnit))
        ++startIndex;
      else
        break;
    }
    if (startIndex === endIndex)
      return "";
    for (endIndex0 = endIndex; true; endIndex0 = endIndex1) {
      endIndex1 = endIndex0 - 1;
      if (endIndex1 < 0)
        H.throwExpression(P.RangeError$value(endIndex1));
      if (endIndex1 >= endIndex)
        H.throwExpression(P.RangeError$value(endIndex1));
      codeUnit = receiver.charCodeAt(endIndex1);
      if (codeUnit === 32 || codeUnit === 13 || J.JSString__isWhitespace(codeUnit))
        ;
      else
        break;
    }
    if (startIndex === 0 && endIndex0 === endIndex)
      return receiver;
    return receiver.substring(startIndex, endIndex0);
  },
  indexOf$2: function(receiver, pattern, start) {
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw H.wrapException(new P.ArgumentError(start));
    if (start < 0 || start > receiver.length)
      throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
    return receiver.indexOf(pattern, start);
  },
  indexOf$1: function($receiver, pattern) {
    return this.indexOf$2($receiver, pattern, 0);
  },
  contains$2: function(receiver, other, startIndex) {
    if (startIndex < 0 || startIndex > receiver.length)
      throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length));
    return H.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  $isString: true,
  static: {
JSString__isWhitespace: function(codeUnit) {
  if (codeUnit < 256)
    switch (codeUnit) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 133:
      case 160:
        return true;
      default:
        return false;
    }
  switch (codeUnit) {
    case 5760:
    case 6158:
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8232:
    case 8233:
    case 8239:
    case 8287:
    case 12288:
    case 65279:
      return true;
    default:
      return false;
  }
}}

}}],
["_isolate_helper", "dart:_isolate_helper", , H, {
_callInIsolate: function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
},

startRootIsolate: function(entry) {
  var rootContext;
  $globalState = H._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = H._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  if (!!entry.$is_args1)
    rootContext.eval$1(new H.startRootIsolate_closure(entry));
  else if (!!entry.$is_args2)
    rootContext.eval$1(new H.startRootIsolate_closure0(entry));
  else
    rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

IsolateNatives_computeThisScript: function() {
  var currentScript = init.currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  if (typeof version == "function" && typeof os == "object" && "system" in os)
    return H.IsolateNatives_computeThisScriptD8();
  if (typeof version == "function" && typeof system == "function")
    return thisFilename();
  return;
},

IsolateNatives_computeThisScriptD8: function() {
  var stack, matches;
  stack = new Error().stack;
  if (stack == null) {
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
    if (stack == null)
      throw H.wrapException(P.UnsupportedError$("No stack trace"));
  }
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, args, message, isSpawnUri, replyTo, context, t2;
  msg = H._deserializeMessage(e.data);
  t1 = J.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : init.globalFunctions[functionName];
      args = t1.$index(msg, "args");
      message = H._deserializeMessage(t1.$index(msg, "msg"));
      isSpawnUri = t1.$index(msg, "isSpawnUri");
      replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
      context = H._IsolateContext$();
      $globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      H.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "args"), t1.$index(msg, "msg"), t1.$index(msg, "isSpawnUri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        t1.$index(msg, "port").send$1(t1.$index(msg, "msg"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      H.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      } else
        P.print(t1.$index(msg, "msg"));
      break;
    case "error":
      throw H.wrapException(t1.$index(msg, "msg"));
    default:
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    t1.toString;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      H.unwrapException(exception);
      trace = new H._StackTrace(exception, null);
      throw H.wrapException(P.Exception_Exception(trace));
    }

},

IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, replyTo) {
  var t1;
  H.Primitives_initializeStatics($globalState.currentContext.id);
  $.lazyPort = H.ReceivePortImpl$();
  t1 = $.lazyPort;
  t1.toString;
  replyTo.send$1(["spawned", new H._NativeJsSendPort(t1, $globalState.currentContext.id)]);
  if (isSpawnUri !== true)
    topLevel.call$1(message);
  else {
    t1 = J.getInterceptor(topLevel);
    if (!!t1.$is_args2)
      topLevel.call$2(args, message);
    else if (!!t1.$is_args1)
      topLevel.call$1(args);
    else
      topLevel.call$0();
  }
},

IsolateNatives__spawnWorker: function(functionName, uri, args, message, isSpawnUri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(replyPort), "args", args, "msg", H._serializeMessage(message), "isSpawnUri", isSpawnUri, "functionName", functionName], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
},

_waitForPendingPorts: function(message, callback) {
  var finder = H._PendingSendPortFinder$();
  finder.traverse$1(message);
  P.Future_wait(finder.ports).then$1(new H._waitForPendingPorts_closure(callback));
},

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  } else {
    t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  }
},

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return new H._JsDeserializer(null).deserialize$1(message);
  else
    return message;
},

_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

startRootIsolate_closure: {"": "Closure;entry_0",
  call$0: function() {
    this.entry_0.call$1([]);
  }
},

startRootIsolate_closure0: {"": "Closure;entry_1",
  call$0: function() {
    this.entry_1.call$2([], null);
  }
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { H.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
    this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
    this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
    if (this.isWorker === true) {
      this.mainManager = new H._MainManagerStub();
      this._nativeInitWorkerMessageHandler$0();
    }
  },
  static: {
_Manager$: function(entry) {
  var t1 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
}}

},

_IsolateContext: {"": "Object;id,ports,isolateStatics<",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        $ = old.get$isolateStatics();
    }
    return result;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._collection$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, P.ReceivePort);
    this.isolateStatics = new Isolate();
  },
  static: {
_IsolateContext$: function() {
  var t1 = new H._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
}}

},

_EventLoop: {"": "Object;events,activeTimerCount",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._collection$_length === 0)
      throw H.wrapException(P.Exception_Exception("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop.activeTimerCount === 0) {
        t1 = t1.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new H._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        trace = new H._StackTrace(exception, null);
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }

  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    P.Timer_Timer(C.Duration_0, this);
  }
},

_IsolateEvent: {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
},

_MainManagerStub: {"": "Object;"},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,args_1,message_2,isSpawnUri_3,replyTo_4",
  call$0: function() {
    H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.replyTo_4);
  }
},

_BaseSendPort: {"": "Object;", $isSendPort: true},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort,_isolateId",
  send$1: function(message) {
    H._waitForPendingPorts(message, new H._NativeJsSendPort_send_closure(this, message));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = $globalState.isolates;
    t3 = this.this_1;
    t4 = t3._isolateId;
    isolate = t2.$index(t2, t4);
    if (isolate == null)
      return;
    if ((t3._receivePort.get$__isolate_helper$_controller()._state & 4) !== 0)
      return;
    shouldSerialize = $globalState.currentContext != null && $globalState.currentContext.id !== t4;
    msg = this.message_2;
    t1.msg_0 = msg;
    if (shouldSerialize)
      t1.msg_0 = H._serializeMessage(t1.msg_0);
    t2 = $globalState.topEventLoop;
    t4 = "receive " + H.S(msg);
    t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send__closure(t1, t3, shouldSerialize), t4));
  }
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_3,shouldSerialize_4",
  call$0: function() {
    var t1, t2;
    t1 = this.this_3._receivePort;
    if ((t1.get$__isolate_helper$_controller()._state & 4) === 0) {
      if (this.shouldSerialize_4) {
        t2 = this.box_0;
        t2.msg_0 = H._deserializeMessage(t2.msg_0);
      }
      t1 = t1.__isolate_helper$_controller;
      t2 = this.box_0.msg_0;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._async$_add$1(t2);
    }
  }
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
  send$1: function(message) {
    H._waitForPendingPorts(message, new H._WorkerSendPort_send_closure(this, message));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = this._workerId;
    if (typeof t1 !== "number")
      throw t1.$shl();
    t2 = this._isolateId;
    if (typeof t2 !== "number")
      throw t2.$shl();
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1",
  call$0: function() {
    var t1, workerMessage, t2, manager;
    t1 = this.this_0;
    workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", t1, "msg", this.message_1], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.toString;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1._workerId);
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  }
},

ReceivePortImpl: {"": "Stream;_id<,__isolate_helper$_controller<",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = this.__isolate_helper$_controller;
    t1.toString;
    t1 = new P._ControllerStream(t1);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  close$0: function(_) {
    var t1 = this.__isolate_helper$_controller;
    if ((t1._state & 4) !== 0)
      return;
    t1.close$0(t1);
    $globalState.currentContext.unregister$1(this._id);
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, H.ReceivePortImpl.prototype.close$0, _receiver, "close$0");
  },
  ReceivePortImpl$0: function() {
    this.__isolate_helper$_controller = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
    var t1 = $globalState.currentContext;
    t1.register$2(t1, this._id, this);
  },
  static: {
"": "ReceivePortImpl__nextFreeId",
ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = t1 + 1;
  t1 = new H.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
}}

},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $is_args1: true
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    J.forEach$1$ax(list, this.get$_dispatch());
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    t1 = map.get$values(map);
    t1.forEach$1(t1, this.get$_dispatch());
  },
  visitSendPort$1: function(port) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = new H._JsVisitedMap(null);
  },
  static: {
_PendingSendPortFinder$: function() {
  var t1 = new H._PendingSendPortFinder([], new H._MessageTraverserVisitedMap());
  t1._PendingSendPortFinder$0();
  return t1;
}}

},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (!!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return new H._NativeJsSendPort(x._receivePort, x._isolateId);
    if (!!x.$is_WorkerSendPort)
      return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = J.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if (J.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new H._NativeJsSendPort(receivePort, isolateId);
    } else
      return new H._WorkerSendPort(managerId, receivePortId, isolateId);
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = P.List_List(null, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    if (H._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    var t1;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isSendPort)
      return this.visitSendPort$1(x);
    return this.visitObject$1(x);
  },
  get$_dispatch: function() {
    return new H.BoundClosure$1(this, H._MessageTraverser.prototype._dispatch$1, null, "_dispatch$1");
  },
  visitObject$1: function(x) {
    throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
  }
},

_Copier: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = J.get$length$asx(list);
    copy = P.List_List(len, null);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw H.ioore(list, i);
      t1 = this._dispatch$1(list[i]);
      if (i >= len)
        throw H.ioore(copy, i);
      copy[i] = t1;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new H._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  $is_args2: true
},

_Serializer: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id, keys;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    t1 = map.get$keys();
    keys = this._serializeList$1(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)));
    t1 = map.get$values(map);
    return ["map", id, keys, this._serializeList$1(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)))];
  },
  _serializeList$1: function(list) {
    var len, result, i, t1;
    len = J.get$length$asx(list);
    result = P.List_List(len, null);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw H.ioore(list, i);
      t1 = this._dispatch$1(list[i]);
      if (i >= len)
        throw H.ioore(result, i);
      result[i] = t1;
    }
    return result;
  }
},

_Deserializer: {"": "Object;",
  deserialize$1: function(x) {
    if (H._Deserializer_isPrimitive(x))
      return x;
    this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = J.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = J.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw H.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    values = t1.$index(x, 3);
    t1 = J.getInterceptor$asx(keys);
    len = t1.get$length(keys);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = J.getInterceptor$asx(values);
    i = 0;
    for (; i < len; ++i)
      result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
    return result;
  },
  deserializeObject$1: function(x) {
    throw H.wrapException("Unexpected serialized object");
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle",
  cancel$0: function() {
    if ($.get$globalThis().setTimeout != null) {
      if (this._inEventLoop)
        throw H.wrapException(P.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      var t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount - 1;
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else
      throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
  },
  static: {
TimerImpl$: function(milliseconds, callback) {
  var t1 = new H.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
}}

},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.this_0._handle = null;
    this.callback_1.call$0();
  }
},

TimerImpl_internalCallback0: {"": "Closure;this_2,callback_3",
  call$0: function() {
    this.this_2._handle = null;
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  }
}}],
["_js_helper", "dart:_js_helper", , H, {
isJsIndexable: function(object, record) {
  var result, t1;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  t1 = J.getInterceptor(object);
  return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = J.toString$0(value);
  if (typeof res !== "string")
    throw H.wrapException(P.ArgumentError$(value));
  return res;
},

Primitives_initializeStatics: function(id) {
  $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + H.S(id));
  $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + H.S(id));
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives__throwFormatException: function(string) {
  throw H.wrapException(P.FormatException$(string));
},

Primitives_parseInt: function(source, radix, handleError) {
  var match, t1;
  handleError = H.Primitives__throwFormatException$closure;
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (match != null) {
    t1 = match.length;
    if (2 >= t1)
      throw H.ioore(match, 2);
    if (match[2] != null)
      return parseInt(source, 16);
    if (3 >= t1)
      throw H.ioore(match, 3);
    if (match[3] != null)
      return parseInt(source, 10);
    return handleError.call$1(source);
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, 10);
},

Primitives_parseDouble: function(source, handleError) {
  var result, trimmed;
  handleError = H.Primitives__throwFormatException$closure;
  if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
    return handleError.call$1(source);
  result = parseFloat(source);
  if (isNaN(result)) {
    trimmed = C.JSString_methods.trim$0(source);
    if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
      return result;
    return handleError.call$1(source);
  }
  return result;
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled;
  $name = C.JS_CONST_86y(J.getInterceptor(object));
  if ($name === "Object") {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  if (J.getInterceptor$s($name).codeUnitAt$1($name, 0) === 36)
    $name = C.JSString_methods.substring$1($name, 1);
  return $name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null);
},

Primitives_objectToString: function(object) {
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

Primitives__fromCharCodeApply: function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

Primitives_stringFromCodePoints: function(codePoints) {
  var a, t1, i;
  a = [];
  a.$builtinTypeInfo = [J.JSInt];
  for (t1 = new H.ListIterator(codePoints, codePoints.length, 0, null); t1.moveNext$0();) {
    i = t1._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(P.ArgumentError$(i));
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + (C.JSInt_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw H.wrapException(P.ArgumentError$(i));
  }
  return H.Primitives__fromCharCodeApply(a);
},

Primitives_stringFromCharCodes: function(charCodes) {
  var t1, i;
  for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null); t1.moveNext$0();) {
    i = t1._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(P.ArgumentError$(i));
    if (i < 0)
      throw H.wrapException(P.ArgumentError$(i));
    if (i > 65535)
      return H.Primitives_stringFromCodePoints(charCodes);
  }
  return H.Primitives__fromCharCodeApply(charCodes);
},

Primitives_lazyAsJsDate: function(receiver) {
  if (receiver.date === void 0)
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
},

Primitives_getYear: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
},

Primitives_getMonth: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
},

Primitives_getDay: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
},

Primitives_getHours: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
},

Primitives_getMinutes: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
},

Primitives_getSeconds: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
},

Primitives_getMilliseconds: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  object[key] = value;
},

iae: function(argument) {
  throw H.wrapException(P.ArgumentError$(argument));
},

ioore: function(receiver, index) {
  if (receiver == null)
    J.get$length$asx(receiver);
  if (typeof index !== "number" || Math.floor(index) !== index)
    H.iae(index);
  throw H.wrapException(P.RangeError$value(index));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = new P.NullThrownError();
  wrapper = new Error();
  wrapper.dartException = ex;
  if ("defineProperty" in Object) {
    Object.defineProperty(wrapper, "message", { get: H.toStringWrapper$closure.call$0 });
    wrapper.name = "";
  } else
    wrapper.toString = H.toStringWrapper$closure.call$0;
  return wrapper;
},

toStringWrapper: function() {
  return J.toString$0(this.dartException);
},

throwExpression: function(ex) {
  throw H.wrapException(ex);
},

unwrapException: function(ex) {
  var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
  t1 = new H.unwrapException_saveStackTrace(ex);
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return t1.call$1(ex.dartException);
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if ("number" in ex && typeof ex.number == "number") {
    number = ex.number;
    ieErrorCode = number & 65535;
    if ((C.JSInt_methods.$shr(number, 16) & 8191) === 10)
      switch (ieErrorCode) {
        case 438:
          return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
        case 445:
        case 5007:
          t2 = H.S(message) + " (Error " + ieErrorCode + ")";
          return t1.call$1(new H.NullError(t2, null));
        default:
      }
  }
  if (ex instanceof TypeError) {
    t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
    t3 = $.get$TypeErrorDecoder_notClosurePattern();
    t4 = $.get$TypeErrorDecoder_nullCallPattern();
    nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
    t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
    t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
    t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
    $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
    t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
    t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
    match = t2.matchTypeError$1(message);
    if (match != null)
      return t1.call$1(H.JsNoSuchMethodError$(message, match));
    else {
      match = t3.matchTypeError$1(message);
      if (match != null) {
        match.method = "call";
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      } else {
        match = t4.matchTypeError$1(message);
        if (match == null) {
          match = nullLiteralCall.matchTypeError$1(message);
          if (match == null) {
            match = t5.matchTypeError$1(message);
            if (match == null) {
              match = t6.matchTypeError$1(message);
              if (match == null) {
                match = t7.matchTypeError$1(message);
                if (match == null) {
                  match = nullLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = t8.matchTypeError$1(message);
                    if (match == null) {
                      match = t9.matchTypeError$1(message);
                      t2 = match != null;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
        } else
          t2 = true;
        if (t2) {
          t2 = match == null ? null : match.method;
          return t1.call$1(new H.NullError(message, t2));
        }
      }
    }
    t2 = typeof message === "string" ? message : "";
    return t1.call$1(new H.UnknownJsTypeError(t2));
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new P.StackOverflowError();
    return t1.call$1(new P.ArgumentError(null));
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new P.StackOverflowError();
  return ex;
},

objectHashCode: function(object) {
  if (object == null || typeof object != 'object')
    return J.get$hashCode$(object);
  else
    return H.Primitives_objectHashCode(object);
},

fillLiteralMap: function(keyValuePairs, result) {
  var $length, index, index0, index1;
  $length = keyValuePairs.length;
  for (index = 0; index < $length; index = index1) {
    index0 = index + 1;
    index1 = index0 + 1;
    result.$indexSet(result, keyValuePairs[index], keyValuePairs[index0]);
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
  var t1 = J.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
  else if (t1.$eq(numberOfArguments, 1))
    return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2))
    return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
  else if (t1.$eq(numberOfArguments, 3))
    return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
  else if (t1.$eq(numberOfArguments, 4))
    return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
  else
    throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,$globalState.currentContext,H.invokeClosure$closure.call$7);
  closure.$identity = $function;
  return $function;
},

throwCyclicInit: function(staticName) {
  throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
},

setRuntimeTypeInfo: function(target, typeInfo) {
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
  return target;
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

getRuntimeTypeArguments: function(target, substitutionName) {
  return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
},

getRuntimeTypeArgument: function(target, substitutionName, index) {
  var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
  return $arguments == null ? null : $arguments[index];
},

getRuntimeTypeAsString: function(runtimeType, onTypeVariable) {
  return runtimeType[0].builtin$cls + H.joinArguments(runtimeType, 1, onTypeVariable);
},

runtimeTypeToString: function(type, onTypeVariable) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return H.getRuntimeTypeAsString(type, onTypeVariable);
  else if (typeof type == "function")
    return type.builtin$cls;
  else if (typeof type === "number" && Math.floor(type) === type)
    return C.JSInt_methods.toString$0(type);
  else
    return;
},

joinArguments: function(types, startIndex, onTypeVariable) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  buffer = P.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = H.runtimeTypeToString(argument, onTypeVariable);
    str = typeof str === "string" ? str : H.S(str);
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + H.S(buffer) + ">";
},

substitute: function(substitution, $arguments) {
  if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function") {
    substitution = H.invokeOn(substitution, null, $arguments);
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function")
      $arguments = H.invokeOn(substitution, null, $arguments);
  }
  return $arguments;
},

computeSignature: function(signature, context, contextName) {
  return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
},

invokeOn: function($function, receiver, $arguments) {
  return $function.apply(receiver, $arguments);
},

toStringForNativeObject: function(obj) {
  var t1 = $.getTagFunction;
  return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
},

hashCodeForNativeObject: function(object) {
  return H.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

lookupAndCacheInterceptor: function(obj) {
  var tag, record, interceptor, interceptorClass, mark, t1;
  tag = $.getTagFunction.call$1(obj);
  record = $.dispatchRecordsForInstanceTags[tag];
  if (record != null) {
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  interceptor = $.interceptorsForUncacheableTags[tag];
  if (interceptor != null)
    return interceptor;
  interceptorClass = init.interceptorsByTag[tag];
  if (interceptorClass == null) {
    tag = $.alternateTagFunction.call$2(obj, tag);
    if (tag != null) {
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
    }
  }
  if (interceptorClass == null)
    return;
  interceptor = interceptorClass.prototype;
  mark = tag[0];
  if (mark === "!") {
    record = H.makeLeafDispatchRecord(interceptor);
    $.dispatchRecordsForInstanceTags[tag] = record;
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  if (mark === "~") {
    $.interceptorsForUncacheableTags[tag] = interceptor;
    return interceptor;
  }
  if (mark === "-") {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  }
  if (mark === "+")
    return H.patchInteriorProto(obj, interceptor);
  if (mark === "*")
    throw H.wrapException(P.UnimplementedError$(tag));
  if (init.leafTags[tag] === true) {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  } else
    return H.patchInteriorProto(obj, interceptor);
},

patchInteriorProto: function(obj, interceptor) {
  var proto, record;
  proto = Object.getPrototypeOf(obj);
  record = J.makeDispatchRecord(interceptor, proto, null, null);
  Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
  return interceptor;
},

makeLeafDispatchRecord: function(interceptor) {
  return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
},

makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
  var interceptor = interceptorClass.prototype;
  if (init.leafTags[tag] === true)
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return J.makeDispatchRecord(interceptor, proto, null, null);
},

initNativeDispatch: function() {
  if (true === $.initNativeDispatchFlag)
    return;
  $.initNativeDispatchFlag = true;
  H.initNativeDispatchContinue();
},

initNativeDispatchContinue: function() {
  var map, tags, i, tag, proto, record, interceptorClass;
  $.dispatchRecordsForInstanceTags = Object.create(null);
  $.interceptorsForUncacheableTags = Object.create(null);
  H.initHooks();
  map = init.interceptorsByTag;
  tags = Object.getOwnPropertyNames(map);
  if (typeof window != "undefined") {
    window;
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      proto = $.prototypeForTagFunction.call$1(tag);
      if (proto != null) {
        record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
        if (record != null)
          Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      }
    }
  }
  for (i = 0; i < tags.length; ++i) {
    tag = tags[i];
    if (/^[A-Za-z_]/.test(tag)) {
      interceptorClass = map[tag];
      map["!" + tag] = interceptorClass;
      map["~" + tag] = interceptorClass;
      map["-" + tag] = interceptorClass;
      map["+" + tag] = interceptorClass;
      map["*" + tag] = interceptorClass;
    }
  }
},

initHooks: function() {
  var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
  hooks = C.JS_CONST_TtD();
  hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_rD3, H.applyHooksTransformer(C.JS_CONST_6qb, H.applyHooksTransformer(C.JS_CONST_Cbr(C.JS_CONST_86y), hooks))))));
  if (typeof dartNativeDispatchHooksTransformer != "undefined") {
    transformers = dartNativeDispatchHooksTransformer;
    if (typeof transformers == "function")
      transformers = [transformers];
    if (transformers.constructor == Array)
      for (i = 0; i < transformers.length; ++i) {
        transformer = transformers[i];
        if (typeof transformer == "function")
          hooks = transformer(hooks) || hooks;
      }
  }
  getTag = hooks.getTag;
  getUnknownTag = hooks.getUnknownTag;
  prototypeForTag = hooks.prototypeForTag;
  $.getTagFunction = new H.initHooks_closure(getTag);
  $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
  $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
},

applyHooksTransformer: function(transformer, hooks) {
  return transformer(hooks) || hooks;
},

stringContainsUnchecked: function(receiver, other, startIndex) {
  return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
},

stringReplaceAllUnchecked: function(receiver, from, to) {
  var result, $length, i, t1;
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = P.StringBuffer$("");
      $length = receiver.length;
      result.write$1(to);
      for (i = 0; i < $length; ++i) {
        t1 = receiver[i];
        result._contents = result._contents + t1;
        result._contents = result._contents + to;
      }
      return result._contents;
    }
  else
    return receiver.replace(new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
},

TypeErrorDecoder: {"": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
  matchTypeError$1: function(message) {
    var match, result, t1;
    match = new RegExp(this._pattern).exec(message);
    if (match == null)
      return;
    result = {};
    t1 = this._arguments;
    if (t1 !== -1)
      result.arguments = match[t1 + 1];
    t1 = this._argumentsExpr;
    if (t1 !== -1)
      result.argumentsExpr = match[t1 + 1];
    t1 = this._expr;
    if (t1 !== -1)
      result.expr = match[t1 + 1];
    t1 = this._method;
    if (t1 !== -1)
      result.method = match[t1 + 1];
    t1 = this._receiver;
    if (t1 !== -1)
      result.receiver = match[t1 + 1];
    return result;
  },
  static: {
"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern",
TypeErrorDecoder_extractPattern: function(message) {
  var match, $arguments, argumentsExpr, expr, method, receiver;
  message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
  match = message.match(/\\\$[a-zA-Z]+\\\$/g);
  if (match == null)
    match = [];
  $arguments = match.indexOf("\\$arguments\\$");
  argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
  expr = match.indexOf("\\$expr\\$");
  method = match.indexOf("\\$method\\$");
  receiver = match.indexOf("\\$receiver\\$");
  return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
},

TypeErrorDecoder_provokeCallErrorOn: function(expression) {
  return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokeCallErrorOnNull: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
  return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokePropertyErrorOnNull: function() {
  return function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
  return function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}();
}}

},

NullError: {"": "Error;_message,_method",
  toString$0: function(_) {
    var t1 = this._method;
    if (t1 == null)
      return "NullError: " + H.S(this._message);
    return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
  },
  $isError: true
},

JsNoSuchMethodError: {"": "Error;_message,_method,_receiver",
  toString$0: function(_) {
    var t1, t2;
    t1 = this._method;
    if (t1 == null)
      return "NoSuchMethodError: " + H.S(this._message);
    t2 = this._receiver;
    if (t2 == null)
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + H.S(this._message) + ")";
    return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + H.S(this._message) + ")";
  },
  $isError: true,
  static: {
JsNoSuchMethodError$: function(_message, match) {
  var t1, t2;
  t1 = match == null;
  t2 = t1 ? null : match.method;
  t1 = t1 ? null : match.receiver;
  return new H.JsNoSuchMethodError(_message, t2, t1);
}}

},

UnknownJsTypeError: {"": "Error;_message",
  toString$0: function(_) {
    var t1 = this._message;
    return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
  }
},

unwrapException_saveStackTrace: {"": "Closure;ex_0",
  call$1: function(error) {
    var t1 = J.getInterceptor(error);
    if (typeof error === "object" && error !== null && !!t1.$isError)
      if (error.$thrownJsError == null)
        error.$thrownJsError = this.ex_0;
    return error;
  },
  $is_args1: true
},

_StackTrace: {"": "Object;_exception,_trace",
  toString$0: function(_) {
    var t1, trace;
    t1 = this._trace;
    if (t1 != null)
      return t1;
    t1 = this._exception;
    trace = typeof t1 === "object" ? t1.stack : null;
    t1 = trace == null ? "" : trace;
    this._trace = t1;
    return t1;
  }
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
},

invokeClosure_closure2: {"": "Closure;closure_6,arg1_7,arg2_8,arg3_9",
  call$0: function() {
    return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
  }
},

invokeClosure_closure3: {"": "Closure;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
  call$0: function() {
    return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
  }
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

BoundClosure: {"": "Closure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isBoundClosure)
      return false;
    return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
  },
  get$hashCode: function(_) {
    var t1, receiverHashCode;
    t1 = this._receiver;
    if (t1 == null)
      receiverHashCode = H.Primitives_objectHashCode(this._self);
    else
      receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
    return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
  },
  $isBoundClosure: true
},

initHooks_closure: {"": "Closure;getTag_0",
  call$1: function(o) {
    return this.getTag_0(o);
  },
  $is_args1: true
},

initHooks_closure0: {"": "Closure;getUnknownTag_1",
  call$2: function(o, tag) {
    return this.getUnknownTag_1(o, tag);
  },
  $is_args2: true
},

initHooks_closure1: {"": "Closure;prototypeForTag_2",
  call$1: function(tag) {
    return this.prototypeForTag_2(tag);
  },
  $is_args1: true
}}],
["dart._collection.dev", "dart:_collection-dev", , H, {
Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i < 0 || i >= src.length)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
  else
    for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
},

Arrays_indexOf: function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw H.ioore(a, i);
    if (J.$eq(a[i], element))
      return i;
  }
  return -1;
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    f.call$1(t1._current);
},

IterableMixinWorkaround_firstWhere: function(iterable, test, orElse) {
  var t1, element;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();) {
    element = t1._current;
    if (test.call$1(element) === true)
      return element;
  }
  if (orElse != null)
    return orElse.call$0();
  throw H.wrapException(P.StateError$("No matching element"));
},

IterableMixinWorkaround_lastWhereList: function(list, test, orElse) {
  var i, element;
  for (i = list.length - 1; i >= 0; --i) {
    if (i >= list.length)
      throw H.ioore(list, i);
    element = list[i];
    if (test.call$1(element) === true)
      return element;
  }
  throw H.wrapException(P.StateError$("No matching element"));
},

IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw H.ioore(t1, i);
    if (t1[i] === iterable)
      return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
  }
  result = P.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    result.write$1(leftDelimiter);
    result.writeAll$2(iterable, ", ");
    result.write$1(rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

IterableMixinWorkaround_sortList: function(list, compare) {
  H.Sort__doSort(list, 0, list.length - 1, compare);
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  if (start < 0 || start > list.length)
    throw H.wrapException(P.RangeError$range(start, 0, list.length));
  if (end < start || end > list.length)
    throw H.wrapException(P.RangeError$range(end, start, list.length));
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length;
  H.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = end - start;
  if ($length === 0)
    return;
  if (skipCount < 0)
    throw H.wrapException(new P.ArgumentError(skipCount));
  if (skipCount + $length > from.length)
    throw H.wrapException(P.StateError$("Not enough elements"));
  H.Arrays_copy(from, skipCount, list, start, $length);
},

printToConsole: function(line) {
  if (typeof dartPrint == "function") {
    dartPrint(line);
    return;
  }
  if (typeof console == "object" && typeof console.log == "function") {
    console.log(line);
    return;
  }
  if (typeof window == "object")
    return;
  if (typeof print == "function") {
    print(line);
    return;
  }
  throw "Unable to print message: " + String(line);
},

Sort__doSort: function(a, left, right, compare) {
  if (right - left <= 32)
    H.Sort__insertionSort(a, left, right, compare);
  else
    H.Sort__dualPivotQuicksort(a, left, right, compare);
},

Sort__insertionSort: function(a, left, right, compare) {
  var i, t1, el, j, t2, j0;
  for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
    el = t1.$index(a, i);
    j = i;
    while (true) {
      if (j > left) {
        t2 = j - 1;
        if (t2 < 0 || t2 >= a.length)
          throw H.ioore(a, t2);
        t2 = J.$gt$n(compare.call$2(a[t2], el), 0);
      } else
        t2 = false;
      if (!t2)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= a.length)
        throw H.ioore(a, j0);
      t1.$indexSet(a, j, a[j0]);
      j = j0;
    }
    t1.$indexSet(a, j, el);
  }
},

Sort__dualPivotQuicksort: function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, t2, el2, el3, el4, el5, t0, less, great, k, ak, comp, t3, great0, less0, pivots_are_equal;
  sixth = C.JSInt_methods.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = C.JSInt_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = J.getInterceptor$asx(a);
  el1 = t1.$index(a, index1);
  t2 = a.length;
  if (index2 < 0 || index2 >= t2)
    throw H.ioore(a, index2);
  el2 = a[index2];
  if (index3 < 0 || index3 >= t2)
    throw H.ioore(a, index3);
  el3 = a[index3];
  if (index4 < 0 || index4 >= t2)
    throw H.ioore(a, index4);
  el4 = a[index4];
  if (index5 < 0 || index5 >= t2)
    throw H.ioore(a, index5);
  el5 = a[index5];
  if (J.$gt$n(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1.$indexSet(a, index1, el1);
  t1.$indexSet(a, index3, el3);
  t1.$indexSet(a, index5, el5);
  if (left < 0 || left >= a.length)
    throw H.ioore(a, left);
  t1.$indexSet(a, index2, a[left]);
  if (right < 0 || right >= a.length)
    throw H.ioore(a, right);
  t1.$indexSet(a, index4, a[right]);
  less = left + 1;
  great = right - 1;
  if (J.$eq(compare.call$2(el2, el4), 0)) {
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw H.ioore(a, k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t2 = J.getInterceptor(comp);
      if (t2.$eq(comp, 0))
        continue;
      if (t2.$lt(comp, 0)) {
        if (k !== less) {
          if (less >= a.length)
            throw H.ioore(a, less);
          t1.$indexSet(a, k, a[less]);
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw H.ioore(a, great);
          comp = compare.call$2(a[great], el2);
          t2 = J.getInterceptor$n(comp);
          if (t2.$gt(comp, 0)) {
            --great;
            continue;
          } else {
            t2 = t2.$lt(comp, 0);
            t3 = a.length;
            great0 = great - 1;
            if (t2) {
              if (less >= t3)
                throw H.ioore(a, less);
              t1.$indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw H.ioore(a, great);
              t1.$indexSet(a, less, a[great]);
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t3)
                throw H.ioore(a, great);
              t1.$indexSet(a, k, a[great]);
              t1.$indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
    pivots_are_equal = true;
  } else {
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw H.ioore(a, k);
      ak = a[k];
      if (J.$lt$n(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          if (less >= a.length)
            throw H.ioore(a, less);
          t1.$indexSet(a, k, a[less]);
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if (J.$gt$n(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw H.ioore(a, great);
          if (J.$gt$n(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw H.ioore(a, great);
            t2 = J.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t3 = a.length;
            if (t2) {
              if (less >= t3)
                throw H.ioore(a, less);
              t1.$indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw H.ioore(a, great);
              t1.$indexSet(a, less, a[great]);
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              if (great >= t3)
                throw H.ioore(a, great);
              t1.$indexSet(a, k, a[great]);
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
        }
    }
    pivots_are_equal = false;
  }
  t2 = less - 1;
  if (t2 >= a.length)
    throw H.ioore(a, t2);
  t1.$indexSet(a, left, a[t2]);
  t1.$indexSet(a, t2, el2);
  t2 = great + 1;
  if (t2 < 0 || t2 >= a.length)
    throw H.ioore(a, t2);
  t1.$indexSet(a, right, a[t2]);
  t1.$indexSet(a, t2, el4);
  H.Sort__doSort(a, left, less - 2, compare);
  H.Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw H.ioore(a, less);
      if (!J.$eq(compare.call$2(a[less], el2), 0))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw H.ioore(a, great);
      if (!J.$eq(compare.call$2(a[great], el4), 0))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw H.ioore(a, k);
      ak = a[k];
      if (J.$eq(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          if (less >= a.length)
            throw H.ioore(a, less);
          t1.$indexSet(a, k, a[less]);
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if (J.$eq(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw H.ioore(a, great);
          if (J.$eq(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw H.ioore(a, great);
            t2 = J.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t3 = a.length;
            if (t2) {
              if (less >= t3)
                throw H.ioore(a, less);
              t1.$indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw H.ioore(a, great);
              t1.$indexSet(a, less, a[great]);
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              if (great >= t3)
                throw H.ioore(a, great);
              t1.$indexSet(a, k, a[great]);
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
        }
    }
    H.Sort__doSort(a, less, great, compare);
  } else
    H.Sort__doSort(a, less, great, compare);
},

Symbol_getName: function(symbol) {
  return symbol.get$_name();
},

ListIterator: {"": "Object;_iterable,_length,_index,_current",
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = J.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if (this._length !== $length)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    t3 = this._index;
    if (t3 >= $length) {
      this._current = null;
      return false;
    }
    this._current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t1 = new H.MappedIterator(null, t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "MappedIterable", 0), H.getRuntimeTypeArgument(this, "MappedIterable", 1)]);
    return t1;
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  $asIterableBase: function($S, $T) {
    return [$T];
  },
  static: {
MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
  var t1;
  if (!!iterable.$isEfficientLength) {
    t1 = new H.EfficientLengthMappedIterable(iterable, $function);
    H.setRuntimeTypeInfo(t1, [$S, $T]);
    return t1;
  }
  t1 = new H.MappedIterable(iterable, $function);
  H.setRuntimeTypeInfo(t1, [$S, $T]);
  return t1;
}}

},

EfficientLengthMappedIterable: {"": "MappedIterable;_iterable,_f", $asMappedIterable: null, $isEfficientLength: true},

MappedIterator: {"": "Iterator;_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0()) {
      this._current = this._f$1(t1.get$current());
      return true;
    }
    this._current = null;
    return false;
  },
  get$current: function() {
    return this._current;
  },
  $asIterator: function($S, $T) {
    return [$T];
  }
},

WhereIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = J.get$iterator$ax(this._iterable);
    t1 = new H.WhereIterator(t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "WhereIterable", 0)]);
    return t1;
  },
  $asIterableBase: null
},

WhereIterator: {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0();)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  $asIterator: null
},

FixedLengthListMixin: {"": "Object;",
  set$length: function(receiver, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
  },
  add$1: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
  },
  clear$0: function(receiver) {
    throw H.wrapException(P.UnsupportedError$("Cannot clear a fixed-length list"));
  }
}}],
["dart.async", "dart:async", , P, {
_invokeErrorHandler: function(errorHandler, error, stackTrace) {
  var t1 = J.getInterceptor(errorHandler);
  if (!!t1.$is_args2)
    return errorHandler.call$2(error, stackTrace);
  else
    return errorHandler.call$1(error);
},

_registerErrorHandler: function(errorHandler, zone) {
  var t1 = J.getInterceptor(errorHandler);
  zone.toString;
  if (!!t1.$is_args2)
    return errorHandler;
  else
    return errorHandler;
},

Future_wait: function(futures) {
  var t1, t2, t3, future, pos, t4, t5, result, completer;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new P.Future_wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = new H.ListIterator(futures, futures.length, 0, null); t3.moveNext$0();) {
    future = t3._current;
    pos = t1.remaining_2;
    t1.remaining_2 = pos + 1;
    t4 = future.catchError$1(t2);
    t5 = $.Zone__current;
    t5.toString;
    result = new P._Future(0, t5, null, null, new P.Future_wait_closure(t1, pos), null, P._registerErrorHandler(null, t5), null);
    result.$builtinTypeInfo = [null];
    t4._addListener$1(result);
  }
  t2 = t1.remaining_2;
  if (t2 === 0)
    return P._Future$immediate(C.List_empty, null);
  t1.values_1 = P.List_List(t2, null);
  t2 = J.JSArray;
  completer = new P._AsyncCompleter(P._Future$(t2));
  H.setRuntimeTypeInfo(completer, [t2]);
  t1.completer_0 = completer;
  return t1.completer_0.future;
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      H.unwrapException(exception);
      milliseconds = C.JSNumber_methods.$tdiv(C.Duration_0._duration, 1000);
      H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_scheduleAsyncCallback: function(callback) {
  $.get$_asyncCallbacks()._add$1(callback);
  if (!$._callbacksAreEnqueued) {
    P._createTimer(C.Duration_0, P._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

scheduleMicrotask: function(callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    P._scheduleAsyncCallback(callback);
    return;
  }
  P._scheduleAsyncCallback(t1.bindCallback$2$runGuarded(callback, true));
},

StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
  var t1;
  if (onCancel == null)
    return sync ? new P._NoCallbackSyncStreamController(null, 0, null) : new P._NoCallbackAsyncStreamController(null, 0, null);
  if (sync) {
    t1 = new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  } else {
    t1 = new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  }
  return t1;
},

_runGuarded: function(notificationHandler) {
  var result, e, s, t1, t2, exception;
  if (notificationHandler == null)
    return;
  try {
    result = notificationHandler.call$0();
    t1 = result;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isFuture)
      return result;
    return;
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(t1, null, t1, e, s);
  }

},

_nullDataHandler: function(value) {
},

_nullErrorHandler: function(error, stackTrace) {
  var t1 = $.Zone__current;
  t1.toString;
  P._rootHandleUncaughtError(t1, null, t1, error, stackTrace);
},

_nullDoneHandler: function() {
},

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    onError.call$2(e, s);
  }

},

_cancelAndError: function(subscription, future, error, stackTrace) {
  var cancelFuture, t1;
  cancelFuture = subscription.cancel$0();
  t1 = J.getInterceptor(cancelFuture);
  if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
    cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
  else
    future._completeError$2(error, stackTrace);
},

_cancelAndErrorClosure: function(subscription, future) {
  return new P._cancelAndErrorClosure_closure(subscription, future);
},

_cancelAndValue: function(subscription, future, value) {
  var cancelFuture, t1;
  cancelFuture = subscription.cancel$0();
  t1 = J.getInterceptor(cancelFuture);
  if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
    cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
  else
    future._complete$1(value);
},

Timer_Timer: function(duration, callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    return P._createTimer(duration, callback);
  }
  return P._createTimer(duration, t1.bindCallback$2$runGuarded(callback, true));
},

_createTimer: function(duration, callback) {
  var milliseconds = C.JSNumber_methods.$tdiv(duration._duration, 1000);
  return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

_rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
  P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
},

_rootRun: function($self, $parent, zone, f) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$0();
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$0();
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRunUnary: function($self, $parent, zone, f, arg) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$1(arg);
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$1(arg);
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$2(arg1, arg2);
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$2(arg1, arg2);
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_AsyncError: {"": "Object;error>,stackTrace<", $isError: true},

_BroadcastSubscription: {"": "_ControllerSubscription;_eventState,_async$_next@,_async$_previous?,_controller,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  get$_controller: function() {
    return this._controller;
  },
  _expectsEvent$1: function(eventId) {
    var t1 = this._eventState;
    if (typeof t1 !== "number")
      throw t1.$and();
    return (t1 & 1) === eventId;
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._BroadcastSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._BroadcastSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_ControllerSubscription: null,
  static: {
"": "_BroadcastSubscription__STATE_EVENT_ID,_BroadcastSubscription__STATE_FIRING,_BroadcastSubscription__STATE_REMOVE_AFTER_FIRING",
}

},

_BroadcastStreamController: {"": "Object;_async$_next?,_async$_previous?",
  _ensureDoneFuture$0: function() {
    var t1 = this._doneFuture;
    if (t1 != null)
      return t1;
    t1 = P._Future$(null);
    this._doneFuture = t1;
    return t1;
  },
  _addListener$1: function(subscription) {
    subscription._async$_previous = this._async$_previous;
    subscription._async$_next = this;
    this._async$_previous.set$_async$_next(subscription);
    this._async$_previous = subscription;
    subscription._eventState = this._state & 1;
  },
  _removeListener$1: function(subscription) {
    var previous, next;
    previous = subscription._async$_previous;
    next = subscription._async$_next;
    previous.set$_async$_next(next);
    next.set$_async$_previous(previous);
    subscription._async$_previous = subscription;
    subscription._async$_next = subscription;
  },
  _subscribe$1: function(cancelOnError) {
    var t1, t2, t3, subscription;
    if ((this._state & 4) !== 0)
      throw H.wrapException(new P.StateError("Subscribing to closed stream"));
    t1 = H.getRuntimeTypeArgument(this, "_BroadcastStreamController", 0);
    t2 = $.Zone__current;
    t3 = cancelOnError ? 1 : 0;
    subscription = new P._BroadcastSubscription(null, null, null, this, null, null, null, t2, t3, null, null);
    H.setRuntimeTypeInfo(subscription, [t1]);
    subscription._async$_previous = subscription;
    subscription._async$_next = subscription;
    this._addListener$1(subscription);
    t1 = this._async$_next;
    t2 = this._async$_previous;
    if (t1 == null ? t2 == null : t1 === t2)
      P._runGuarded(this._onListen);
    return subscription;
  },
  _recordCancel$1: function(subscription) {
    var t1;
    if (subscription.get$_async$_next() === subscription)
      return;
    t1 = subscription._eventState;
    if (typeof t1 !== "number")
      throw t1.$and();
    if ((t1 & 2) !== 0)
      subscription._eventState = (t1 | 4) >>> 0;
    else {
      this._removeListener$1(subscription);
      if ((this._state & 2) === 0 && this._async$_next === this)
        this._callOnCancel$0();
    }
  },
  _recordPause$1: function(subscription) {
  },
  _recordResume$1: function(subscription) {
  },
  _addEventError$0: function() {
    if ((this._state & 4) !== 0)
      return new P.StateError("Cannot add new events after calling close");
    return new P.StateError("Cannot add new events while doing an addStream");
  },
  add$1: function(_, data) {
    if (this._state >= 4)
      throw H.wrapException(this._addEventError$0());
    this._sendData$1(data);
  },
  addError$2: function(error, stackTrace) {
    if (this._state >= 4)
      throw H.wrapException(this._addEventError$0());
    this._sendError$2(error, stackTrace);
  },
  close$0: function(_) {
    var t1, doneFuture;
    t1 = this._state;
    if ((t1 & 4) !== 0)
      return this._doneFuture;
    if (t1 >= 4)
      throw H.wrapException(this._addEventError$0());
    this._state = (t1 | 4) >>> 0;
    doneFuture = this._ensureDoneFuture$0();
    this._sendDone$0();
    return doneFuture;
  },
  get$done: function() {
    return this._ensureDoneFuture$0();
  },
  _async$_add$1: function(data) {
    this._sendData$1(data);
  },
  _addError$2: function(error, stackTrace) {
    this._sendError$2(error, stackTrace);
  },
  _close$0: function() {
    var addState = this._addStreamState;
    this._addStreamState = null;
    this._state = (this._state & 4294967287) >>> 0;
    C.JSNull_methods.complete$0(addState);
  },
  _forEachListener$1: function(action) {
    var t1, id, link, link0;
    t1 = this._state;
    if ((t1 & 2) !== 0)
      throw H.wrapException(P.StateError$("Cannot fire new event. Controller is already firing an event"));
    if (this._async$_next === this)
      return;
    id = t1 & 1;
    this._state = (t1 ^ 3) >>> 0;
    link = this._async$_next;
    for (; link !== this;)
      if (link._expectsEvent$1(id)) {
        t1 = link._eventState;
        if (typeof t1 !== "number")
          throw t1.$or();
        link._eventState = (t1 | 2) >>> 0;
        action.call$1(link);
        t1 = link._eventState;
        if (typeof t1 !== "number")
          throw t1.$xor();
        link._eventState = (t1 ^ 1) >>> 0;
        link0 = link._async$_next;
        t1 = link._eventState;
        if (typeof t1 !== "number")
          throw t1.$and();
        if ((t1 & 4) !== 0)
          this._removeListener$1(link);
        t1 = link._eventState;
        if (typeof t1 !== "number")
          throw t1.$and();
        link._eventState = (t1 & 4294967293) >>> 0;
        link = link0;
      } else
        link = link._async$_next;
    this._state = (this._state & 4294967293) >>> 0;
    if (this._async$_next === this)
      this._callOnCancel$0();
  },
  _callOnCancel$0: function() {
    if ((this._state & 4) !== 0 && this._doneFuture._state === 0)
      this._doneFuture._asyncComplete$1(null);
    P._runGuarded(this._onCancel);
  }
},

_SyncBroadcastStreamController: {"": "_BroadcastStreamController;",
  _sendData$1: function(data) {
    if (this._async$_next === this)
      return;
    this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(this, data));
  },
  _sendError$2: function(error, stackTrace) {
    if (this._async$_next === this)
      return;
    this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
  },
  _sendDone$0: function() {
    if (this._async$_next !== this)
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(this));
    else
      this._doneFuture._asyncComplete$1(null);
  },
  $as_BroadcastStreamController: null
},

_SyncBroadcastStreamController__sendData_closure: {"": "Closure;this_0,data_1",
  call$1: function(subscription) {
    subscription._async$_add$1(this.data_1);
  },
  $is_args1: true
},

_SyncBroadcastStreamController__sendError_closure: {"": "Closure;this_0,error_1,stackTrace_2",
  call$1: function(subscription) {
    subscription._addError$2(this.error_1, this.stackTrace_2);
  },
  $is_args1: true
},

_SyncBroadcastStreamController__sendDone_closure: {"": "Closure;this_0",
  call$1: function(subscription) {
    subscription._close$0();
  },
  $is_args1: true
},

_AsBroadcastStreamController: {"": "_SyncBroadcastStreamController;_pending,_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
  _addPendingEvent$1: function($event) {
    var t1;
    if (this._pending == null)
      this._pending = new P._StreamImplEvents(null, null, 0);
    t1 = this._pending;
    t1.add$1(t1, $event);
  },
  add$1: function(_, data) {
    var t1 = this._state;
    if ((t1 & 4) === 0 && (t1 & 2) !== 0) {
      this._addPendingEvent$1(new P._DelayedData(data, null));
      return;
    }
    P._BroadcastStreamController.prototype.add$1.call(this, this, data);
    while (true) {
      t1 = this._pending;
      if (!(t1 != null && t1.lastPendingEvent != null))
        break;
      t1.handleNext$1(this);
    }
  },
  get$add: function(_receiver) {
    return new P.BoundClosure$i1(this, P._AsBroadcastStreamController.prototype.add$1, _receiver, "add$1");
  },
  addError$2: function(error, stackTrace) {
    var t1 = this._state;
    if ((t1 & 4) === 0 && (t1 & 2) !== 0) {
      this._addPendingEvent$1(new P._DelayedError(error, stackTrace, null));
      return;
    }
    P._BroadcastStreamController.prototype.addError$2.call(this, error, stackTrace);
    while (true) {
      t1 = this._pending;
      if (!(t1 != null && t1.lastPendingEvent != null))
        break;
      t1.handleNext$1(this);
    }
  },
  get$addError: function() {
    return new P.BoundClosure$2(this, P._AsBroadcastStreamController.prototype.addError$2, null, "addError$2");
  },
  close$0: function(_) {
    var t1 = this._state;
    if ((t1 & 4) === 0 && (t1 & 2) !== 0) {
      this._addPendingEvent$1(C.C__DelayedDone);
      this._state = (this._state | 4) >>> 0;
      return P._BroadcastStreamController.prototype.get$done.call(this);
    }
    return P._BroadcastStreamController.prototype.close$0.call(this, this);
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, P._AsBroadcastStreamController.prototype.close$0, _receiver, "close$0");
  },
  _callOnCancel$0: function() {
    var t1 = this._pending;
    if (t1 != null && t1.lastPendingEvent != null) {
      t1.clear$0(t1);
      this._pending = null;
    }
    P._BroadcastStreamController.prototype._callOnCancel$0.call(this);
  },
  $as_SyncBroadcastStreamController: null
},

Future: {"": "Object;", $isFuture: true},

Future_wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$1(error);
    }
    return;
  },
  $is_args1: true
},

Future_wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 < 0 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    t2[t3] = value;
    t1.remaining_2 = t1.remaining_2 - 1;
    if (t1.remaining_2 === 0) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2 = t2.future;
      if (t2._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t2._asyncComplete$1(t1);
    }
  },
  $is_args1: true
},

_Completer: {"": "Object;"},

_AsyncCompleter: {"": "_Completer;future",
  completeError$2: function(error, stackTrace) {
    var t1;
    if (error == null)
      throw H.wrapException(new P.ArgumentError("Error must not be null"));
    t1 = this.future;
    if (t1._state !== 0)
      throw H.wrapException(new P.StateError("Future already completed"));
    t1._asyncCompleteError$2(error, stackTrace);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  },
  $as_Completer: null
},

_Future: {"": "Object;_state,_zone<,_resultOrListeners,_nextListener<,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
  get$_isComplete: function() {
    return this._state >= 4;
  },
  get$_hasError: function() {
    return this._state === 8;
  },
  set$_isChained: function(value) {
    if (value)
      this._state = 2;
    else
      this._state = 0;
  },
  get$_onValue: function() {
    return this._state === 2 ? null : this._onValueCallback;
  },
  _onValue$1: function(arg0) {
    return this.get$_onValue().call$1(arg0);
  },
  get$_whenCompleteAction: function() {
    return this._state === 2 ? null : this._whenCompleteActionCallback;
  },
  _whenCompleteAction$0: function() {
    return this.get$_whenCompleteAction().call$0();
  },
  then$2$onError: function(f, onError) {
    var result = P._Future$_then(f, onError, null);
    this._addListener$1(result);
    return result;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(onError, test) {
    var result = P._Future$_catchError(onError, test, null);
    this._addListener$1(result);
    return result;
  },
  catchError$1: function(onError) {
    return this.catchError$2$test(onError, null);
  },
  whenComplete$1: function(action) {
    var result = P._Future$_whenComplete(action, H.getRuntimeTypeArgument(this, "_Future", 0));
    this._addListener$1(result);
    return result;
  },
  get$_value: function() {
    return this._resultOrListeners;
  },
  get$_error: function() {
    return this._resultOrListeners;
  },
  _setValue$1: function(value) {
    this._state = 4;
    this._resultOrListeners = value;
  },
  _setError$2: function(error, stackTrace) {
    this._state = 8;
    this._resultOrListeners = new P._AsyncError(error, stackTrace);
  },
  _addListener$1: function(listener) {
    if (this._state >= 4) {
      this._zone.toString;
      P._scheduleAsyncCallback(new P._Future__addListener_closure(this, listener));
    } else {
      listener._nextListener = this._resultOrListeners;
      this._resultOrListeners = listener;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current._nextListener = prev;
    }
    return prev;
  },
  _complete$1: function(value) {
    var t1, listeners;
    t1 = J.getInterceptor(value);
    if (typeof value === "object" && value !== null && !!t1.$isFuture) {
      P._Future__chainFutures(value, this);
      return;
    }
    listeners = this._removeListeners$0();
    this._setValue$1(value);
    P._Future__propagateToListeners(this, listeners);
  },
  _completeError$2: function(error, stackTrace) {
    var listeners = this._removeListeners$0();
    this._setError$2(error, stackTrace);
    P._Future__propagateToListeners(this, listeners);
  },
  get$_completeError: function() {
    return new P.BoundClosure$2(this, P._Future.prototype._completeError$2, null, "_completeError$2");
  },
  _asyncComplete$1: function(value) {
    if (this._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    this._state = 1;
    this._zone.toString;
    P._scheduleAsyncCallback(new P._Future__asyncComplete_closure(this, value));
  },
  _asyncCompleteError$2: function(error, stackTrace) {
    if (this._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    this._state = 1;
    this._zone.toString;
    P._scheduleAsyncCallback(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
  },
  _async$_Future$immediate$1: function(value, $T) {
    this._asyncComplete$1(value);
  },
  $is_Future: true,
  $isFuture: true,
  static: {
"": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR",
_Future$: function($T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$immediate: function(value, $T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._async$_Future$immediate$1(value, $T);
  return t1;
},

_Future$_then: function(onValueCallback, onErrorCallback, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._Future(0, t1, null, null, onValueCallback, null, P._registerErrorHandler(onErrorCallback, t1), null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$_catchError: function(onErrorCallback, errorTestCallback, $T) {
  var t1, t2;
  t1 = $.Zone__current;
  t2 = P._registerErrorHandler(onErrorCallback, t1);
  t1.toString;
  t2 = new P._Future(0, t1, null, null, null, errorTestCallback, t2, null);
  H.setRuntimeTypeInfo(t2, [$T]);
  return t2;
},

_Future$_whenComplete: function(whenCompleteActionCallback, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._Future(0, t1, null, null, null, null, null, whenCompleteActionCallback);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future__chainFutures: function(source, target) {
  var t1;
  target._state = 2;
  t1 = J.getInterceptor(source);
  if (typeof source === "object" && source !== null && !!t1.$is_Future)
    if (source._state >= 4)
      P._Future__propagateToListeners(source, target);
    else
      source._addListener$1(target);
  else
    source.then$2$onError(new P._Future__chainFutures_closure(target), new P._Future__chainFutures_closure0(target));
},

_Future__propagateMultipleListeners: function(source, listeners) {
  var listeners0;
  do {
    listeners0 = listeners.get$_nextListener();
    listeners._nextListener = null;
    P._Future__propagateToListeners(source, listeners);
    if (listeners0 != null) {
      listeners = listeners0;
      continue;
    } else
      break;
  } while (true);
},

_Future__propagateToListeners: function(source, listeners) {
  var t1, t2, hasError, asyncError, t3, t4, t5, chainSource, listeners0;
  t1 = {};
  t1.source_4 = source;
  for (; true;) {
    t2 = {};
    if (!t1.source_4.get$_isComplete())
      return;
    hasError = t1.source_4.get$_hasError();
    if (hasError && listeners == null) {
      t2 = t1.source_4;
      asyncError = t2.get$_error();
      t2 = t2._zone;
      t3 = J.get$error$x(asyncError);
      t4 = asyncError.get$stackTrace();
      t2.toString;
      P._rootHandleUncaughtError(t2, null, t2, t3, t4);
      return;
    }
    if (listeners == null)
      return;
    if (listeners._nextListener != null) {
      P._Future__propagateMultipleListeners(t1.source_4, listeners);
      return;
    }
    if (hasError) {
      t3 = t1.source_4.get$_zone();
      t4 = listeners._zone;
      t3.toString;
      t4.toString;
      t3 = t4 == null ? t3 != null : t4 !== t3;
    } else
      t3 = false;
    if (t3) {
      t2 = t1.source_4;
      asyncError = t2.get$_error();
      t2 = t2._zone;
      t3 = J.get$error$x(asyncError);
      t4 = asyncError.get$stackTrace();
      t2.toString;
      P._rootHandleUncaughtError(t2, null, t2, t3, t4);
      return;
    }
    t3 = $.Zone__current;
    t4 = listeners._zone;
    if (t3 == null ? t4 != null : t3 !== t4) {
      t4.toString;
      P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure(t1, listeners));
      return;
    }
    t2.listenerHasValue_1 = null;
    t2.listenerValueOrError_2 = null;
    t2.isPropagationAborted_3 = false;
    t4.toString;
    P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure0(t1, t2, hasError, listeners));
    if (t2.isPropagationAborted_3)
      return;
    t3 = t2.listenerHasValue_1 === true;
    if (t3) {
      t4 = t2.listenerValueOrError_2;
      t5 = J.getInterceptor(t4);
      t5 = typeof t4 === "object" && t4 !== null && !!t5.$isFuture;
      t4 = t5;
    } else
      t4 = false;
    if (t4) {
      chainSource = t2.listenerValueOrError_2;
      t2 = J.getInterceptor(chainSource);
      if (typeof chainSource === "object" && chainSource !== null && !!t2.$is_Future && chainSource._state >= 4) {
        listeners._state = 2;
        t1.source_4 = chainSource;
        continue;
      }
      P._Future__chainFutures(chainSource, listeners);
      return;
    }
    if (t3) {
      listeners0 = listeners._removeListeners$0();
      t2 = t2.listenerValueOrError_2;
      listeners._state = 4;
      listeners._resultOrListeners = t2;
    } else {
      listeners0 = listeners._removeListeners$0();
      asyncError = t2.listenerValueOrError_2;
      t2 = J.get$error$x(asyncError);
      t3 = asyncError.get$stackTrace();
      listeners._state = 8;
      listeners._resultOrListeners = new P._AsyncError(t2, t3);
    }
    t1.source_4 = listeners;
    listeners = listeners0;
  }
}}

},

_Future__addListener_closure: {"": "Closure;this_0,listener_1",
  call$0: function() {
    P._Future__propagateToListeners(this.this_0, this.listener_1);
  }
},

_Future__chainFutures_closure: {"": "Closure;target_0",
  call$1: function(value) {
    this.target_0._complete$1(value);
  },
  $is_args1: true
},

_Future__chainFutures_closure0: {"": "Closure;target_1",
  call$2: function(error, stackTrace) {
    this.target_1._completeError$2(error, stackTrace);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  },
  $is_args2: true,
  $is_args1: true
},

_Future__asyncComplete_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    this.this_0._complete$1(this.value_1);
  }
},

_Future__asyncCompleteError_closure: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    this.this_0._completeError$2(this.error_1, this.stackTrace_2);
  }
},

_Future__propagateToListeners_closure: {"": "Closure;box_2,listener_3",
  call$0: function() {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_3);
  }
},

_Future__propagateToListeners_closure0: {"": "Closure;box_2,box_1,hasError_4,listener_5",
  call$0: function() {
    var t1, value, asyncError, test, matchesTest, errorCallback, e, s, t2, t3, t4, exception;
    t1 = {};
    try {
      t2 = this.box_2;
      if (!this.hasError_4) {
        value = t2.source_4.get$_value();
        t2 = this.listener_5;
        t3 = t2._state === 2 ? null : t2._onValueCallback;
        t4 = this.box_1;
        if (t3 != null) {
          t4.listenerValueOrError_2 = t2._onValue$1(value);
          t4.listenerHasValue_1 = true;
        } else {
          t4.listenerValueOrError_2 = value;
          t4.listenerHasValue_1 = true;
        }
      } else {
        asyncError = t2.source_4.get$_error();
        t2 = this.listener_5;
        test = t2._state === 2 ? null : t2._errorTestCallback;
        matchesTest = true;
        if (test != null)
          matchesTest = test.call$1(J.get$error$x(asyncError));
        if (matchesTest === true)
          t3 = (t2._state === 2 ? null : t2._onErrorCallback) != null;
        else
          t3 = false;
        if (t3) {
          errorCallback = t2._state === 2 ? null : t2._onErrorCallback;
          t2 = this.box_1;
          t2.listenerValueOrError_2 = P._invokeErrorHandler(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
          t2.listenerHasValue_1 = true;
        } else {
          t2 = this.box_1;
          t2.listenerValueOrError_2 = asyncError;
          t2.listenerHasValue_1 = false;
        }
      }
      t2 = this.listener_5;
      if ((t2._state === 2 ? null : t2._whenCompleteActionCallback) != null) {
        t1.completeResult_0 = t2._whenCompleteAction$0();
        t3 = t1.completeResult_0;
        t4 = J.getInterceptor(t3);
        if (typeof t3 === "object" && t3 !== null && !!t4.$isFuture) {
          t2.set$_isChained(true);
          t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners__closure(this.box_2, t2), new P._Future__propagateToListeners__closure0(t1, t2));
          this.box_1.isPropagationAborted_3 = true;
        }
      }
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      if (this.hasError_4) {
        t1 = J.get$error$x(this.box_2.source_4.get$_error());
        t2 = e;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      t2 = this.box_1;
      if (t1)
        t2.listenerValueOrError_2 = this.box_2.source_4.get$_error();
      else
        t2.listenerValueOrError_2 = new P._AsyncError(e, s);
      this.box_1.listenerHasValue_1 = false;
    }

  }
},

_Future__propagateToListeners__closure: {"": "Closure;box_2,listener_6",
  call$1: function(ignored) {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_6);
  },
  $is_args1: true
},

_Future__propagateToListeners__closure0: {"": "Closure;box_0,listener_7",
  call$2: function(error, stackTrace) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.completeResult_0;
    t3 = J.getInterceptor(t2);
    if (typeof t2 !== "object" || t2 === null || !t3.$is_Future) {
      t1.completeResult_0 = P._Future$(null);
      t1.completeResult_0._setError$2(error, stackTrace);
    }
    P._Future__propagateToListeners(t1.completeResult_0, this.listener_7);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  },
  $is_args2: true,
  $is_args1: true
},

Stream: {"": "Object;",
  get$isBroadcast: function() {
    return false;
  },
  asBroadcastStream$2$onCancel$onListen: function(onCancel, onListen) {
    if (this.get$isBroadcast())
      return this;
    return P._AsBroadcastStream$(this, onListen, onCancel, H.getRuntimeTypeArgument(this, "Stream", 0));
  },
  asBroadcastStream$0: function() {
    return this.asBroadcastStream$2$onCancel$onListen(null, null);
  },
  contains$1: function(_, needle) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSBool);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_contains_closure(t1, this, needle, future), true, new P.Stream_contains_closure0(future), future.get$_completeError());
    return future;
  },
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = P._Future$(null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSInt);
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
    return future;
  }
},

Stream_contains_closure: {"": "Closure;box_0,this_1,needle_2,future_3",
  call$1: function(element) {
    var t1, t2;
    t1 = this.box_0;
    t2 = this.future_3;
    P._runUserCode(new P.Stream_contains__closure(this.needle_2, element), new P.Stream_contains__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription_0, t2));
  },
  $is_args1: true
},

Stream_contains__closure: {"": "Closure;needle_4,element_5",
  call$0: function() {
    return J.$eq(this.element_5, this.needle_4);
  }
},

Stream_contains__closure0: {"": "Closure;box_0,future_6",
  call$1: function(isMatch) {
    if (isMatch === true)
      P._cancelAndValue(this.box_0.subscription_0, this.future_6, true);
  },
  $is_args1: true
},

Stream_contains_closure0: {"": "Closure;future_7",
  call$0: function() {
    this.future_7._complete$1(false);
  }
},

Stream_forEach_closure: {"": "Closure;box_0,this_1,action_2,future_3",
  call$1: function(element) {
    P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
  },
  $is_args1: true
},

Stream_forEach__closure: {"": "Closure;action_4,element_5",
  call$0: function() {
    return this.action_4.call$1(this.element_5);
  }
},

Stream_forEach__closure0: {"": "Closure;",
  call$1: function(_) {
  },
  $is_args1: true
},

Stream_forEach_closure0: {"": "Closure;future_6",
  call$0: function() {
    this.future_6._complete$1(null);
  }
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = t1.count_0 + 1;
  },
  $is_args1: true
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._complete$1(this.box_0.count_0);
  }
},

StreamSubscription: {"": "Object;"},

_StreamController: {"": "Object;",
  get$_pendingEvents: function() {
    if ((this._state & 8) === 0)
      return this._varData;
    return this._varData.get$varData();
  },
  _ensurePendingEvents$0: function() {
    if ((this._state & 8) === 0) {
      if (this._varData == null)
        this._varData = new P._StreamImplEvents(null, null, 0);
      return this._varData;
    }
    var t1 = this._varData.get$varData();
    return t1;
  },
  get$_subscription: function() {
    if ((this._state & 8) !== 0)
      return this._varData.get$varData();
    return this._varData;
  },
  _badEventState$0: function() {
    if ((this._state & 4) !== 0)
      return new P.StateError("Cannot add event after closing");
    return new P.StateError("Cannot add event while adding a stream");
  },
  _ensureDoneFuture$0: function() {
    if (this._doneFuture == null) {
      this._doneFuture = P._Future$(null);
      if ((this._state & 2) !== 0)
        this._doneFuture._complete$1(null);
    }
    return this._doneFuture;
  },
  add$1: function(_, value) {
    if (this._state >= 4)
      throw H.wrapException(this._badEventState$0());
    this._async$_add$1(value);
  },
  close$0: function(_) {
    var t1 = this._state;
    if ((t1 & 4) !== 0)
      return this._doneFuture;
    if (t1 >= 4)
      throw H.wrapException(this._badEventState$0());
    this._state = (t1 | 4) >>> 0;
    this._ensureDoneFuture$0();
    t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendDone$0();
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, C.C__DelayedDone);
    }
    return this._doneFuture;
  },
  _async$_add$1: function(value) {
    var t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendData$1(value);
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, new P._DelayedData(value, null));
    }
  },
  _addError$2: function(error, stackTrace) {
    var t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendError$2(error, stackTrace);
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, new P._DelayedError(error, stackTrace, null));
    }
  },
  _close$0: function() {
    var addState = this._varData;
    this._varData = addState.get$varData();
    this._state = (this._state & 4294967287) >>> 0;
    addState.complete$0(addState);
  },
  _subscribe$1: function(cancelOnError) {
    var t1, t2, subscription, pendingEvents, addState;
    if ((this._state & 3) !== 0)
      throw H.wrapException(new P.StateError("Stream has already been listened to."));
    t1 = $.Zone__current;
    t2 = cancelOnError ? 1 : 0;
    subscription = new P._ControllerSubscription(this, null, null, null, t1, t2, null, null);
    H.setRuntimeTypeInfo(subscription, [null]);
    pendingEvents = this.get$_pendingEvents();
    this._state = (this._state | 1) >>> 0;
    if ((this._state & 8) !== 0) {
      addState = this._varData;
      addState.set$varData(subscription);
      addState.resume$0();
    } else
      this._varData = subscription;
    subscription._setPendingEvents$1(pendingEvents);
    subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
    return subscription;
  },
  _recordCancel$1: function(subscription) {
    var t1, future;
    if ((this._state & 8) !== 0)
      this._varData.cancel$0();
    this._varData = null;
    this._state = (this._state & 4294967286 | 2) >>> 0;
    t1 = new P._StreamController__recordCancel_complete(this);
    future = P._runGuarded(this.get$_onCancel());
    if (future != null)
      future = future.whenComplete$1(t1);
    else
      t1.call$0();
    return future;
  },
  _recordPause$1: function(subscription) {
    var addState;
    if ((this._state & 8) !== 0) {
      addState = this._varData;
      addState.pause$0(addState);
    }
    P._runGuarded(this.get$_onPause());
  },
  _recordResume$1: function(subscription) {
    if ((this._state & 8) !== 0)
      this._varData.resume$0();
    P._runGuarded(this.get$_onResume());
  }
},

_StreamController__subscribe_closure: {"": "Closure;this_0",
  call$0: function() {
    P._runGuarded(this.this_0.get$_onListen());
  }
},

_StreamController__recordCancel_complete: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0._doneFuture;
    if (t1 != null && t1._state === 0)
      t1._asyncComplete$1(null);
  }
},

_SyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    this.get$_subscription()._async$_add$1(data);
  },
  _sendError$2: function(error, stackTrace) {
    this.get$_subscription()._addError$2(error, stackTrace);
  },
  _sendDone$0: function() {
    this.get$_subscription()._close$0();
  }
},

_AsyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    this.get$_subscription()._addPending$1(new P._DelayedData(data, null));
  },
  _sendError$2: function(error, stackTrace) {
    this.get$_subscription()._addPending$1(new P._DelayedError(error, stackTrace, null));
  },
  _sendDone$0: function() {
    this.get$_subscription()._addPending$1(C.C__DelayedDone);
  }
},

_AsyncStreamController: {"": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__AsyncStreamControllerDispatch: {"": "_StreamController+_AsyncStreamControllerDispatch;"},

_SyncStreamController: {"": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__SyncStreamControllerDispatch: {"": "_StreamController+_SyncStreamControllerDispatch;"},

_NoCallbacks: {"": "Object;",
  get$_onListen: function() {
    return;
  },
  get$_onPause: function() {
    return;
  },
  get$_onResume: function() {
    return;
  },
  get$_onCancel: function() {
    return;
  }
},

_NoCallbackAsyncStreamController: {"": "_StreamController__AsyncStreamControllerDispatch0+_NoCallbacks;_varData,_state,_doneFuture"},

_StreamController__AsyncStreamControllerDispatch0: {"": "_StreamController+_AsyncStreamControllerDispatch;"},

_NoCallbackSyncStreamController: {"": "_StreamController__SyncStreamControllerDispatch0+_NoCallbacks;_varData,_state,_doneFuture"},

_StreamController__SyncStreamControllerDispatch0: {"": "_StreamController+_SyncStreamControllerDispatch;"},

_ControllerStream: {"": "_StreamImpl;_controller",
  _createSubscription$1: function(cancelOnError) {
    return this._controller._subscribe$1(cancelOnError);
  },
  get$hashCode: function(_) {
    return (H.Primitives_objectHashCode(this._controller) ^ 892482866) >>> 0;
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$is_ControllerStream)
      return false;
    return other._controller === this._controller;
  },
  $is_ControllerStream: true,
  $as_StreamImpl: null
},

_ControllerSubscription: {"": "_BufferingStreamSubscription;_controller<,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  _onCancel$0: function() {
    return this.get$_controller()._recordCancel$1(this);
  },
  _onPause$0: function() {
    this.get$_controller()._recordPause$1(this);
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
    this.get$_controller()._recordResume$1(this);
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_BufferingStreamSubscription: null
},

_EventSink: {"": "Object;"},

_BufferingStreamSubscription: {"": "Object;_async$_onData,_onError,_onDone,_zone<,_state,_cancelFuture,_pending",
  _setPendingEvents$1: function(pendingEvents) {
    if (pendingEvents == null)
      return;
    this._pending = pendingEvents;
    if (!pendingEvents.get$isEmpty(pendingEvents)) {
      this._state = (this._state | 64) >>> 0;
      this._pending.schedule$1(this);
    }
  },
  onData$1: function(handleData) {
    $.Zone__current.toString;
    this._async$_onData = handleData;
  },
  onError$1: function(_, handleError) {
    if (handleError == null)
      handleError = P._nullErrorHandler$closure;
    this._onError = P._registerErrorHandler(handleError, $.Zone__current);
  },
  onDone$1: function(handleDone) {
    if (handleDone == null)
      handleDone = P._nullDoneHandler$closure;
    $.Zone__current.toString;
    this._onDone = handleDone;
  },
  pause$1: function(_, resumeSignal) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 + 128 | 4) >>> 0;
    if (t1 < 128 && this._pending != null)
      this._pending.cancelSchedule$0();
    if ((t1 & 4) === 0 && (this._state & 32) === 0)
      this._guardCallback$1(this.get$_onPause());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 >= 128) {
      this._state = t1 - 128;
      t1 = this._state;
      if (t1 < 128) {
        if ((t1 & 64) !== 0) {
          t2 = this._pending;
          t2 = !t2.get$isEmpty(t2);
        } else
          t2 = false;
        if (t2)
          this._pending.schedule$1(this);
        else {
          this._state = (t1 & 4294967291) >>> 0;
          if ((this._state & 32) === 0)
            this._guardCallback$1(this.get$_onResume());
        }
      }
    }
  },
  cancel$0: function() {
    this._state = (this._state & 4294967279) >>> 0;
    if ((this._state & 8) !== 0)
      return this._cancelFuture;
    this._cancel$0();
    return this._cancelFuture;
  },
  get$_mayResumeInput: function() {
    if (this._state < 128) {
      var t1 = this._pending;
      t1 = t1 == null || t1.get$isEmpty(t1);
    } else
      t1 = false;
    return t1;
  },
  _cancel$0: function() {
    this._state = (this._state | 8) >>> 0;
    if ((this._state & 64) !== 0)
      this._pending.cancelSchedule$0();
    if ((this._state & 32) === 0)
      this._pending = null;
    this._cancelFuture = this._onCancel$0();
  },
  _async$_add$1: function(data) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 32)
      this._sendData$1(data);
    else
      this._addPending$1(new P._DelayedData(data, null));
  },
  _addError$2: function(error, stackTrace) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 32)
      this._sendError$2(error, stackTrace);
    else
      this._addPending$1(new P._DelayedError(error, stackTrace, null));
  },
  _close$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 | 2) >>> 0;
    if (this._state < 32)
      this._sendDone$0();
    else
      this._addPending$1(C.C__DelayedDone);
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  _onCancel$0: function() {
  },
  _addPending$1: function($event) {
    var pending, t1;
    pending = this._pending;
    if (pending == null) {
      pending = new P._StreamImplEvents(null, null, 0);
      this._pending = pending;
    }
    pending.add$1(pending, $event);
    t1 = this._state;
    if ((t1 & 64) === 0) {
      this._state = (t1 | 64) >>> 0;
      if (this._state < 128)
        this._pending.schedule$1(this);
    }
  },
  _sendData$1: function(data) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    this._zone.runUnaryGuarded$2(this._async$_onData, data);
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _sendError$2: function(error, stackTrace) {
    var t1, t2, t3;
    t1 = this._state;
    t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
    if ((t1 & 1) !== 0) {
      this._state = (t1 | 16) >>> 0;
      this._cancel$0();
      t1 = this._cancelFuture;
      t3 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t3.$isFuture)
        t1.whenComplete$1(t2);
      else
        t2.call$0();
    } else {
      t2.call$0();
      this._checkState$1((t1 & 4) !== 0);
    }
  },
  _sendDone$0: function() {
    var t1, t2, t3;
    t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
    this._cancel$0();
    this._state = (this._state | 16) >>> 0;
    t2 = this._cancelFuture;
    t3 = J.getInterceptor(t2);
    if (typeof t2 === "object" && t2 !== null && !!t3.$isFuture)
      t2.whenComplete$1(t1);
    else
      t1.call$0();
  },
  _guardCallback$1: function(callback) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    callback.call$0();
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _checkState$1: function(wasInputPaused) {
    var t1, t2, isInputPaused;
    t1 = this._state;
    if ((t1 & 64) !== 0) {
      t2 = this._pending;
      t2 = t2.get$isEmpty(t2);
    } else
      t2 = false;
    if (t2) {
      this._state = (t1 & 4294967231) >>> 0;
      if ((this._state & 4) !== 0 && this.get$_mayResumeInput())
        this._state = (this._state & 4294967291) >>> 0;
    }
    for (; true; wasInputPaused = isInputPaused) {
      t1 = this._state;
      if ((t1 & 8) !== 0) {
        this._pending = null;
        return;
      }
      isInputPaused = (t1 & 4) !== 0;
      if (wasInputPaused === isInputPaused)
        break;
      this._state = (t1 ^ 32) >>> 0;
      if (isInputPaused)
        this._onPause$0();
      else
        this._onResume$0();
      this._state = (this._state & 4294967263) >>> 0;
    }
    t1 = this._state;
    if ((t1 & 64) !== 0 && t1 < 128)
      this._pending.schedule$1(this);
  },
  static: {
"": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT",
}

},

_BufferingStreamSubscription__sendError_sendError: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    var t1, t2, t3, t4, t5;
    t1 = this.this_0;
    t2 = t1._state;
    if ((t2 & 8) !== 0 && (t2 & 16) === 0)
      return;
    t1._state = (t2 | 32) >>> 0;
    t2 = t1._zone;
    t3 = $.Zone__current;
    t2.toString;
    t3.toString;
    if (t3 == null ? t2 != null : t3 !== t2)
      P._rootHandleUncaughtError(t3, null, t3, this.error_1, this.stackTrace_2);
    else {
      t3 = t1._onError;
      t4 = J.getInterceptor(t3);
      t5 = this.error_1;
      if (!!t4.$is_args2)
        t2.runBinaryGuarded$3(t3, t5, this.stackTrace_2);
      else
        t2.runUnaryGuarded$2(t3, t5);
    }
    t1._state = (t1._state & 4294967263) >>> 0;
  }
},

_BufferingStreamSubscription__sendDone_sendDone: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1._state;
    if ((t2 & 16) === 0)
      return;
    t1._state = (t2 | 42) >>> 0;
    t1._zone.runGuarded$1(t1._onDone);
    t1._state = (t1._state & 4294967263) >>> 0;
  }
},

_StreamImpl: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var subscription = this._createSubscription$1(true === cancelOnError);
    subscription.onData$1(onData);
    subscription.onError$1(subscription, onError);
    subscription.onDone$1(onDone);
    return subscription;
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _createSubscription$1: function(cancelOnError) {
    var t1, t2;
    t1 = $.Zone__current;
    t2 = cancelOnError ? 1 : 0;
    return new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
  },
  $asStream: null
},

_DelayedEvent: {"": "Object;next@"},

_DelayedData: {"": "_DelayedEvent;value,next",
  perform$1: function(dispatch) {
    dispatch._sendData$1(this.value);
  }
},

_DelayedError: {"": "_DelayedEvent;error>,stackTrace<,next",
  perform$1: function(dispatch) {
    dispatch._sendError$2(this.error, this.stackTrace);
  }
},

_DelayedDone: {"": "Object;",
  perform$1: function(dispatch) {
    dispatch._sendDone$0();
  },
  get$next: function() {
    return;
  },
  set$next: function(_) {
    throw H.wrapException(new P.StateError("No events after a done."));
  }
},

_PendingEvents: {"": "Object;",
  schedule$1: function(dispatch) {
    var t1 = this._state;
    if (t1 === 1)
      return;
    if (t1 >= 1) {
      this._state = 1;
      return;
    }
    P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
    this._state = 1;
  },
  cancelSchedule$0: function() {
    if (this._state === 1)
      this._state = 3;
  }
},

_PendingEvents_schedule_closure: {"": "Closure;this_0,dispatch_1",
  call$0: function() {
    var t1, oldState;
    t1 = this.this_0;
    oldState = t1._state;
    t1._state = 0;
    if (oldState === 3)
      return;
    t1.handleNext$1(this.dispatch_1);
  }
},

_StreamImplEvents: {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(dispatch) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(dispatch);
  },
  clear$0: function(_) {
    if (this._state === 1)
      this._state = 3;
    this.lastPendingEvent = null;
    this.firstPendingEvent = null;
  }
},

_DummyStreamSubscription: {"": "Object;_pauseCounter",
  cancel$0: function() {
    return;
  }
},

_AsBroadcastStream: {"": "Stream;_source,_onListenHandler,_onCancelHandler,_zone<,_controller,_subscription",
  get$isBroadcast: function() {
    return true;
  },
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1, t2, t3, result;
    t1 = this._controller;
    if (t1 == null)
      return new P._DummyStreamSubscription(0);
    if (this._subscription == null) {
      t2 = t1.get$add(t1);
      t3 = t1.get$addError();
      this._subscription = this._source.listen$3$onDone$onError(t2, t1.get$close(t1), t3);
    }
    result = this._controller._subscribe$1(true === cancelOnError);
    result.onData$1(onData);
    result.onError$1(result, onError);
    result.onDone$1(onDone);
    return result;
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _onCancel$0: function() {
    var t1, shutdown, t2;
    t1 = this._controller;
    shutdown = t1 == null || (t1._state & 4) !== 0;
    t1 = this._onCancelHandler;
    if (t1 != null) {
      t2 = this._zone;
      t2.toString;
      P._rootRunUnary(t2, null, t2, t1, new P._BroadcastSubscriptionWrapper(this));
    }
    if (shutdown) {
      t1 = this._subscription;
      if (t1 != null) {
        t1.cancel$0();
        this._subscription = null;
      }
    }
  },
  get$_onCancel: function() {
    return new P.BoundClosure$0(this, P._AsBroadcastStream.prototype._onCancel$0, null, "_onCancel$0");
  },
  _onListen$0: function() {
    var t1, t2;
    t1 = this._onListenHandler;
    if (t1 != null) {
      t2 = this._zone;
      t2.toString;
      P._rootRunUnary(t2, null, t2, t1, new P._BroadcastSubscriptionWrapper(this));
    }
  },
  get$_onListen: function() {
    return new P.BoundClosure$0(this, P._AsBroadcastStream.prototype._onListen$0, null, "_onListen$0");
  },
  _cancelSubscription$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    this._subscription = null;
    this._controller = null;
    t1.cancel$0();
  },
  _AsBroadcastStream$3: function(_source, onListenHandler, onCancelHandler, $T) {
    var t1 = new P._AsBroadcastStreamController(null, this.get$_onListen(), this.get$_onCancel(), 0, null, null, null, null);
    H.setRuntimeTypeInfo(t1, [$T]);
    t1._async$_previous = t1;
    t1._async$_next = t1;
    this._controller = t1;
  },
  $asStream: null,
  static: {
_AsBroadcastStream$: function(_source, onListenHandler, onCancelHandler, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._AsBroadcastStream(_source, onListenHandler, onCancelHandler, t1, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._AsBroadcastStream$3(_source, onListenHandler, onCancelHandler, $T);
  return t1;
}}

},

_BroadcastSubscriptionWrapper: {"": "Object;_stream",
  cancel$0: function() {
    this._stream._cancelSubscription$0();
    return;
  }
},

_cancelAndError_closure: {"": "Closure;future_0,error_1,stackTrace_2",
  call$0: function() {
    return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
  }
},

_cancelAndErrorClosure_closure: {"": "Closure;subscription_0,future_1",
  call$2: function(error, stackTrace) {
    return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
  },
  $is_args2: true
},

_cancelAndValue_closure: {"": "Closure;future_0,value_1",
  call$0: function() {
    return this.future_0._complete$1(this.value_1);
  }
},

_BaseZone: {"": "Object;",
  runGuarded$1: function(f) {
    var e, s, t1, exception;
    try {
      t1 = this.run$1(f);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  runUnaryGuarded$2: function(f, arg) {
    var e, s, t1, exception;
    try {
      t1 = this.runUnary$2(f, arg);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  runBinaryGuarded$3: function(f, arg1, arg2) {
    var e, s, t1, exception;
    try {
      t1 = this.runBinary$3(f, arg1, arg2);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  bindCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindCallback_closure(this, registered);
    else
      return new P._BaseZone_bindCallback_closure0(this, registered);
  },
  bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerUnaryCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindUnaryCallback_closure(this, registered);
    else
      return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
  }
},

_BaseZone_bindCallback_closure: {"": "Closure;this_0,registered_1",
  call$0: function() {
    return this.this_0.runGuarded$1(this.registered_1);
  }
},

_BaseZone_bindCallback_closure0: {"": "Closure;this_2,registered_3",
  call$0: function() {
    return this.this_2.run$1(this.registered_3);
  }
},

_BaseZone_bindUnaryCallback_closure: {"": "Closure;this_0,registered_1",
  call$1: function(arg) {
    return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
  },
  $is_args1: true
},

_BaseZone_bindUnaryCallback_closure0: {"": "Closure;this_2,registered_3",
  call$1: function(arg) {
    return this.this_2.runUnary$2(this.registered_3, arg);
  },
  $is_args1: true
},

_rootHandleUncaughtError_closure: {"": "Closure;error_0,stackTrace_1",
  call$0: function() {
    P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
  }
},

_rootHandleUncaughtError__closure: {"": "Closure;error_2,stackTrace_3",
  call$0: function() {
    var t1, trace, t2;
    t1 = this.error_2;
    P.print("Uncaught Error: " + H.S(t1));
    trace = this.stackTrace_3;
    if (trace == null) {
      t2 = J.getInterceptor(t1);
      t2 = typeof t1 === "object" && t1 !== null && !!t2.$isError;
    } else
      t2 = false;
    if (t2)
      trace = t1.get$stackTrace();
    if (trace != null)
      P.print("Stack Trace: \n" + H.S(trace) + "\n");
    throw H.wrapException(t1);
  }
},

_RootZone: {"": "_BaseZone;",
  $index: function(_, key) {
    return;
  },
  handleUncaughtError$2: function(error, stackTrace) {
    return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
  },
  run$1: function(f) {
    return P._rootRun(this, null, this, f);
  },
  runUnary$2: function(f, arg) {
    return P._rootRunUnary(this, null, this, f, arg);
  },
  runBinary$3: function(f, arg1, arg2) {
    return P._rootRunBinary(this, null, this, f, arg1, arg2);
  },
  registerCallback$1: function(f) {
    return f;
  },
  registerUnaryCallback$1: function(f) {
    return f;
  }
}}],
["dart.collection", "dart:collection", , P, {
_HashSet__newHashTable: function() {
  var table = Object.create(null);
  table["<non-identifier-key>"] = table;
  delete table["<non-identifier-key>"];
  return table;
},

_defaultEquals: function(a, b) {
  return J.$eq(a, b);
},

_defaultHashCode: function(a) {
  return J.get$hashCode$(a);
},

HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._HashMap(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

HashSet_HashSet$identity: function($E) {
  var t1 = new P._IdentityHashSet(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
},

_iterableToString: function(iterable) {
  var parts, t1;
  t1 = $.get$_toStringVisiting();
  if (t1.contains$1(t1, iterable))
    return "(...)";
  t1 = $.get$_toStringVisiting();
  t1.add$1(t1, iterable);
  parts = [];
  try {
    P._iterablePartsToStrings(iterable, parts);
  } finally {
    t1 = $.get$_toStringVisiting();
    t1.remove$1(t1, iterable);
  }
  t1 = P.StringBuffer$("(");
  t1.writeAll$2(parts, ", ");
  t1.write$1(")");
  return t1._contents;
},

_iterablePartsToStrings: function(iterable, parts) {
  var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
  it = iterable.get$iterator(iterable);
  $length = 0;
  count = 0;
  while (true) {
    if (!($length < 80 || count < 3))
      break;
    if (!it.moveNext$0())
      return;
    next = H.S(it.get$current());
    parts.push(next);
    $length += next.length + 2;
    ++count;
  }
  if (!it.moveNext$0()) {
    if (count <= 5)
      return;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    ultimateString = parts.pop();
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    penultimateString = parts.pop();
  } else {
    penultimate = it.get$current();
    ++count;
    if (!it.moveNext$0()) {
      if (count <= 4) {
        parts.push(H.S(penultimate));
        return;
      }
      ultimateString = H.S(penultimate);
      if (0 >= parts.length)
        throw H.ioore(parts, 0);
      penultimateString = parts.pop();
      $length += ultimateString.length + 2;
    } else {
      ultimate = it.get$current();
      ++count;
      for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
        ultimate0 = it.get$current();
        ++count;
        if (count > 100) {
          while (true) {
            if (!($length > 75 && count > 3))
              break;
            if (0 >= parts.length)
              throw H.ioore(parts, 0);
            $length -= parts.pop().length + 2;
            --count;
          }
          parts.push("...");
          return;
        }
      }
      penultimateString = H.S(penultimate);
      ultimateString = H.S(ultimate);
      $length += ultimateString.length + penultimateString.length + 4;
    }
  }
  if (count > parts.length + 2) {
    $length += 5;
    elision = "...";
  } else
    elision = null;
  while (true) {
    if (!($length > 80 && parts.length > 3))
      break;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    $length -= parts.pop().length + 2;
    if (elision == null) {
      $length += 5;
      elision = "...";
    }
  }
  if (elision != null)
    parts.push(elision);
  parts.push(penultimateString);
  parts.push(ultimateString);
},

LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

Maps_mapToString: function(m) {
  var t1, result, i, t2;
  t1 = {};
  for (i = 0; i < $.get$Maps__toStringList().length; ++i) {
    t2 = $.get$Maps__toStringList();
    if (i >= t2.length)
      throw H.ioore(t2, i);
    if (t2[i] === m)
      return "{...}";
  }
  result = P.StringBuffer$("");
  try {
    $.get$Maps__toStringList().push(m);
    result.write$1("{");
    t1.first_0 = true;
    J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
    result.write$1("}");
  } finally {
    t1 = $.get$Maps__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

_HashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._collection$_length;
  },
  get$keys: function() {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._HashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  containsKey$1: function(key) {
    var strings, rest;
    if (key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._HashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._HashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        this._collection$_length = this._collection$_length + 1;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._collection$_length = this._collection$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  clear$0: function(_) {
    if (this._collection$_length > 0) {
      this._keys = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._collection$_length = 0;
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _addHashTableEntry$3: function(table, key, value) {
    if (table[key] == null) {
      this._collection$_length = this._collection$_length + 1;
      this._keys = null;
    }
    P._HashMap__setTableEntry(table, key, value);
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; i += 2)
      if (J.$eq(bucket[i], key))
        return i;
    return -1;
  },
  $isMap: true,
  static: {
_HashMap__setTableEntry: function(table, key, value) {
  if (value == null)
    table[key] = table;
  else
    table[key] = value;
},

_HashMap__newHashTable: function() {
  var table = Object.create(null);
  P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
  delete table["<non-identifier-key>"];
  return table;
}}

},

_HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  $is_args1: true
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._collection$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
  },
  contains$1: function(_, element) {
    return this._map.containsKey$1(element);
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

HashMapKeyIterator: {"": "Object;_map,_keys,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$length: function(_) {
    return this._collection$_length;
  },
  get$keys: function() {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._LinkedHashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_collection$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_collection$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_collection$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._LinkedHashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._LinkedHashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_collection$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  putIfAbsent$2: function(key, ifAbsent) {
    var value;
    if (this.containsKey$1(key))
      return this.$index(this, key);
    value = ifAbsent.call$0();
    this.$indexSet(this, key, value);
    return value;
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_collection$_value();
    }
  },
  clear$0: function(_) {
    if (this._collection$_length > 0) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._collection$_length = 0;
      this._modifications = this._modifications + 1 & 67108863;
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell._key, cell._collection$_value);
      if (modifications !== this._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      cell = cell._next;
    }
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_collection$_value(value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_collection$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new P.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last._next = cell;
      this._last = cell;
    }
    this._collection$_length = this._collection$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell._next;
    if (previous == null)
      this._first = next;
    else
      previous._next = next;
    if (next == null)
      this._last = previous;
    else
      next._previous = previous;
    this._collection$_length = this._collection$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i].get$_key(), key))
        return i;
    return -1;
  },
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  $isMap: true,
  static: {
_LinkedHashMap__newHashTable: function() {
  var table = Object.create(null);
  table["<non-identifier-key>"] = table;
  delete table["<non-identifier-key>"];
  return table;
}}

},

_LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  $is_args1: true
},

LinkedHashMapCell: {"": "Object;_key<,_collection$_value@,_next,_previous<"},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._collection$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    t1 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
    t1._cell = t1._map._first;
    return t1;
  },
  contains$1: function(_, element) {
    return this._map.containsKey$1(element);
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell._key);
      if (modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = cell._next;
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = t1._key;
        this._cell = this._cell._next;
        return true;
      }
    }
  }
},

_HashSet: {"": "_HashSetBase;",
  get$iterator: function(_) {
    return new P.HashSetIterator(this, this._computeElements$0(), 0, null);
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      return nums == null ? false : nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  lookup$1: function(object) {
    var t1, rest, bucket, index;
    if (!(typeof object === "string" && object !== "__proto__"))
      t1 = typeof object === "number" && (object & 0x3ffffff) === object;
    else
      t1 = true;
    if (t1)
      return this.contains$1(this, object) ? object : null;
    rest = this._rest;
    if (rest == null)
      return;
    bucket = rest[this._computeHashCode$1(object)];
    index = this._findBucketIndex$2(bucket, object);
    if (index < 0)
      return;
    return J.$index$asx(bucket, index);
  },
  add$1: function(_, element) {
    var rest, hash, bucket;
    rest = this._rest;
    if (rest == null) {
      rest = P._HashSet__newHashTable();
      this._rest = rest;
    }
    hash = this._computeHashCode$1(element);
    bucket = rest[hash];
    if (bucket == null)
      rest[hash] = [element];
    else {
      if (this._findBucketIndex$2(bucket, element) >= 0)
        return false;
      bucket.push(element);
    }
    this._collection$_length = this._collection$_length + 1;
    this._elements = null;
    return true;
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    rest = this._rest;
    if (rest == null)
      return false;
    bucket = rest[this._computeHashCode$1(object)];
    index = this._findBucketIndex$2(bucket, object);
    if (index < 0)
      return false;
    this._collection$_length = this._collection$_length - 1;
    this._elements = null;
    bucket.splice(index, 1);
    return true;
  },
  clear$0: function(_) {
    if (this._collection$_length > 0) {
      this._elements = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._collection$_length = 0;
    }
  },
  _computeElements$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._elements;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; ++i0) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._elements = result;
    return result;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i], element))
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $isEfficientLength: true
},

_IdentityHashSet: {"": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
  _computeHashCode$1: function(key) {
    return H.objectHashCode(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i, t1;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i) {
      t1 = bucket[i];
      if (t1 == null ? element == null : t1 === element)
        return i;
    }
    return -1;
  },
  $as_HashSet: null
},

HashSetIterator: {"": "Object;_set,_elements,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var elements, offset, t1;
    elements = this._elements;
    offset = this._offset;
    t1 = this._set;
    if (elements !== t1._elements)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= elements.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = elements[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_HashSetBase: {"": "IterableBase;",
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

IterableBase: {"": "Object;",
  contains$1: function(_, element) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      if (J.$eq(t1.get$current(), element))
        return true;
    return false;
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0();)
      ++count;
    return count;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw H.wrapException(P.RangeError$value(index));
  },
  toString$0: function(_) {
    return P._iterableToString(this);
  }
},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    $length = this.get$length(receiver);
    for (i = 0; i < $length; ++i) {
      if (i >= receiver.length)
        throw H.ioore(receiver, i);
      action.call$1(receiver[i]);
      if ($length !== receiver.length)
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
    }
  },
  contains$1: function(receiver, element) {
    var $length, t1, t2, i;
    $length = this.get$length(receiver);
    for (t1 = receiver.length, t2 = $length !== t1, i = 0; i < $length; ++i) {
      if (i >= t1)
        throw H.ioore(receiver, i);
      if (t2)
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
    }
    return false;
  },
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    this.set$length(receiver, t1 + 1);
    if (t1 < 0 || t1 >= receiver.length)
      throw H.ioore(receiver, t1);
    receiver[t1] = element;
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  toString$0: function(receiver) {
    var result, t1;
    t1 = $.get$_toStringVisiting();
    if (t1.contains$1(t1, receiver))
      return "[...]";
    result = P.StringBuffer$("");
    try {
      t1 = $.get$_toStringVisiting();
      t1.add$1(t1, receiver);
      result.write$1("[");
      result.writeAll$2(receiver, ", ");
      result.write$1("]");
    } finally {
      t1 = $.get$_toStringVisiting();
      t1.remove$1(t1, receiver);
    }
    return result.get$_contents();
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

Maps_mapToString_closure: {"": "Closure;box_0,result_1",
  call$2: function(k, v) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(k);
    t1.write$1(": ");
    t1.write$1(v);
  },
  $is_args2: true
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return P._ListQueueIterator$(this);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(this));
    }
  },
  get$length: function(_) {
    return (this._tail - this._head & this._table.length - 1) >>> 0;
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  clear$0: function(_) {
    var i, t1, t2, t3, t4;
    i = this._head;
    t1 = this._tail;
    if (i !== t1) {
      for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
        if (i < 0 || i >= t3)
          throw H.ioore(t2, i);
        t2[i] = null;
      }
      this._tail = 0;
      this._head = 0;
      this._modificationCount = this._modificationCount + 1;
    }
  },
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw H.wrapException(P.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = P.List_List(this._table.length * 2, H.getRuntimeTypeArgument(this, "ListQueue", 0));
    H.setRuntimeTypeInfo(newTable, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  ListQueue$1: function(initialCapacity, $E) {
    var t1 = P.List_List(8, $E);
    H.setRuntimeTypeInfo(t1, [$E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $isEfficientLength: true,
  static: {
"": "ListQueue__INITIAL_CAPACITY",
ListQueue$: function(initialCapacity, $E) {
  var t1 = new P.ListQueue(null, 0, 0, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  t1.ListQueue$1(initialCapacity, $E);
  return t1;
}}

},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      H.throwExpression(P.ConcurrentModificationError$(t1));
    t2 = this._collection$_position;
    if (t2 === this._end) {
      this._collection$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw H.ioore(t3, t2);
    this._collection$_current = t3[t2];
    this._collection$_position = (this._collection$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  static: {
_ListQueueIterator$: function(queue) {
  return new P._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
}}

}}],
["dart.core", "dart:core", , P, {
_symbolToString: function(symbol) {
  return H.Symbol_getName(symbol);
},

Comparable_compare: function(a, b) {
  return J.compareTo$1$ns(a, b);
},

Error_safeToString: function(object) {
  var buffer, t1, i, codeUnit, t2, charCodes;
  if (typeof object === "number" || typeof object === "boolean" || null == object)
    return J.toString$0(object);
  if (typeof object === "string") {
    buffer = new P.StringBuffer("");
    buffer._contents = "\"";
    for (t1 = object.length, i = 0; i < t1; ++i) {
      codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
      if (codeUnit <= 31)
        if (codeUnit === 10)
          buffer._contents = buffer._contents + "\\n";
        else if (codeUnit === 13)
          buffer._contents = buffer._contents + "\\r";
        else if (codeUnit === 9)
          buffer._contents = buffer._contents + "\\t";
        else {
          buffer._contents = buffer._contents + "\\x";
          if (codeUnit < 16)
            buffer._contents = buffer._contents + "0";
          else {
            buffer._contents = buffer._contents + "1";
            codeUnit -= 16;
          }
          t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
          charCodes = P.List_List$filled(1, t2, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          buffer._contents = buffer._contents + t2;
        }
      else if (codeUnit === 92)
        buffer._contents = buffer._contents + "\\\\";
      else if (codeUnit === 34)
        buffer._contents = buffer._contents + "\\\"";
      else {
        charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t2 = H.Primitives_stringFromCharCodes(charCodes);
        buffer._contents = buffer._contents + t2;
      }
    }
    buffer._contents = buffer._contents + "\"";
    return buffer._contents;
  }
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Exception_Exception: function(message) {
  return new P._ExceptionImplementation(message);
},

identical: function(a, b) {
  return a == null ? b == null : a === b;
},

identityHashCode: function(object) {
  return H.objectHashCode(object);
},

List_List: function($length, $E) {
  if ($length == null)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw H.wrapException(P.ArgumentError$("Length must be a positive integer: " + H.S($length) + "."));
  return H.Primitives_newFixedList($length);
},

List_List$filled: function($length, fill, $E) {
  var result, t1, i;
  if ($length < 0)
    throw H.wrapException(P.ArgumentError$("Length must be a positive integer: " + $length + "."));
  result = H.Primitives_newFixedList($length);
  if ($length !== 0 && true)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
},

List_List$from: function(other, growable, $E) {
  var list, t1, $length, fixedList, i;
  list = P.List_List(null, $E);
  H.setRuntimeTypeInfo(list, [$E]);
  for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = P.List_List($length, $E);
  H.setRuntimeTypeInfo(fixedList, [$E]);
  for (t1 = list.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw H.ioore(list, i);
    fixedList[i] = list[i];
  }
  return fixedList;
},

print: function(object) {
  var line = J.toString$0(object);
  H.printToConsole(line);
},

NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if (t1.i_1 > 0)
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(P._symbolToString(key));
  },
  $is_args2: true
},

Comparable: {"": "Object;"},

DateTime: {"": "Object;millisecondsSinceEpoch<,isUtc",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDateTime)
      return false;
    return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
  },
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function(_) {
    var t1, y, m, d, h, min, sec, ms;
    t1 = new P.DateTime_toString_twoDigits();
    y = new P.DateTime_toString_fourDigits().call$1(H.Primitives_getYear(this));
    m = t1.call$1(H.Primitives_getMonth(this));
    d = t1.call$1(H.Primitives_getDay(this));
    h = t1.call$1(H.Primitives_getHours(this));
    min = t1.call$1(H.Primitives_getMinutes(this));
    sec = t1.call$1(H.Primitives_getSeconds(this));
    ms = new P.DateTime_toString_threeDigits().call$1(H.Primitives_getMilliseconds(this));
    if (this.isUtc)
      return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms) + "Z";
    else
      return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms);
  },
  add$1: function(_, duration) {
    return P.DateTime$fromMillisecondsSinceEpoch(C.JSNumber_methods.$add(this.millisecondsSinceEpoch, duration.get$inMilliseconds()), this.isUtc);
  },
  DateTime$_now$0: function() {
    H.Primitives_lazyAsJsDate(this);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
      throw H.wrapException(new P.ArgumentError(millisecondsSinceEpoch));
  },
  $isDateTime: true,
  static: {
"": "DateTime_MONDAY,DateTime_TUESDAY,DateTime_WEDNESDAY,DateTime_THURSDAY,DateTime_FRIDAY,DateTime_SATURDAY,DateTime_SUNDAY,DateTime_DAYS_PER_WEEK,DateTime_JANUARY,DateTime_FEBRUARY,DateTime_MARCH,DateTime_APRIL,DateTime_MAY,DateTime_JUNE,DateTime_JULY,DateTime_AUGUST,DateTime_SEPTEMBER,DateTime_OCTOBER,DateTime_NOVEMBER,DateTime_DECEMBER,DateTime_MONTHS_PER_YEAR,DateTime__MAX_MILLISECONDS_SINCE_EPOCH",
DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
  var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
},

DateTime$_now: function() {
  var t1 = new P.DateTime(Date.now(), false);
  t1.DateTime$_now$0();
  return t1;
}}

},

DateTime_toString_fourDigits: {"": "Closure;",
  call$1: function(n) {
    var absN, sign;
    absN = J.abs$0$n(n);
    sign = n < 0 ? "-" : "";
    if (absN >= 1000)
      return H.S(n);
    if (absN >= 100)
      return sign + "0" + H.S(absN);
    if (absN >= 10)
      return sign + "00" + H.S(absN);
    return sign + "000" + H.S(absN);
  },
  $is_args1: true
},

DateTime_toString_threeDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100))
      return H.S(n);
    if (t1.$ge(n, 10))
      return "0" + H.S(n);
    return "00" + H.S(n);
  },
  $is_args1: true
},

DateTime_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  $is_args1: true
},

Duration: {"": "Object;_duration<",
  $add: function(_, other) {
    return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return P.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw H.iae(factor);
    return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    return this._duration > other.get$_duration();
  },
  $le: function(_, other) {
    return this._duration <= other.get$_duration();
  },
  $ge: function(_, other) {
    return this._duration >= other.get$_duration();
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new P.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
    twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 60000000), 60));
    twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 1000000), 60));
    sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
    return H.S(C.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
  },
  $isDuration: true,
  static: {
"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO",
Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
}}

},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return H.S(n);
    if (t1.$ge(n, 10000))
      return "0" + H.S(n);
    if (t1.$ge(n, 1000))
      return "00" + H.S(n);
    if (t1.$ge(n, 100))
      return "000" + H.S(n);
    if (t1.$gt(n, 10))
      return "0000" + H.S(n);
    return "00000" + H.S(n);
  },
  $is_args1: true
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  $is_args1: true
},

Error: {"": "Object;",
  get$stackTrace: function() {
    return new H._StackTrace(this.$thrownJsError, null);
  },
  $isError: true
},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + H.S(t1);
    return "Illegal argument(s)";
  },
  static: {
ArgumentError$: function(message) {
  return new P.ArgumentError(message);
}}

},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + H.S(this.message);
  },
  static: {
RangeError$value: function(value) {
  return new P.RangeError("value " + H.S(value));
},

RangeError$range: function(value, start, end) {
  return new P.RangeError("value " + H.S(value) + " not in range " + start + ".." + H.S(end));
}}

},

UnsupportedError: {"": "Error;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  },
  static: {
UnsupportedError$: function(message) {
  return new P.UnsupportedError(message);
}}

},

UnimplementedError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
  },
  $isError: true,
  static: {
UnimplementedError$: function(message) {
  return new P.UnimplementedError(message);
}}

},

StateError: {"": "Error;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  },
  static: {
StateError$: function(message) {
  return new P.StateError(message);
}}

},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
  },
  static: {
ConcurrentModificationError$: function(modifiedObject) {
  return new P.ConcurrentModificationError(modifiedObject);
}}

},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  },
  get$stackTrace: function() {
    return;
  },
  $isError: true
},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  },
  static: {
CyclicInitializationError$: function(variableName) {
  return new P.CyclicInitializationError(variableName);
}}

},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + H.S(t1);
  }
},

FormatException: {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + H.S(this.message);
  },
  static: {
FormatException$: function(message) {
  return new P.FormatException(message);
}}

},

Expando: {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + H.S(this.name);
  },
  $index: function(_, object) {
    var values = H.Primitives_getProperty(object, "expando$values");
    return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = H.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new P.Object();
      H.Primitives_setProperty(object, "expando$values", values);
    }
    H.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = H.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = t1 + 1;
      key = "expando$key$" + t1;
      H.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  },
  static: {
"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount",
}

},

Function: {"": "Object;"},

Iterator: {"": "Object;"},

Null: {"": "Object;",
  toString$0: function(_) {
    return "null";
  }
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return H.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return H.Primitives_objectToString(this);
  }
},

StackTrace: {"": "Object;"},

StringBuffer: {"": "Object;_contents<",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(obj) {
    var str = typeof obj === "string" ? obj : H.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = J.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator.length === 0)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      this.write$1(iterator.get$current());
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  clear$0: function(_) {
    this._contents = "";
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  static: {
StringBuffer$: function($content) {
  var t1 = new P.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}

},

Symbol: {"": "Object;"}}],
["dart.dom.html", "dart:html", , W, {
CanvasElement_CanvasElement: function(height, width) {
  var e = document.createElement("canvas", null);
  J.set$width$x(e, width);
  J.set$height$x(e, height);
  return e;
},

Element__determineMouseWheelEventType: function(e) {
  if (e.onwheel !== undefined)
    return "wheel";
  else if (e.onmousewheel !== undefined)
    return "mousewheel";
  else
    return "DOMMouseScroll";
},

_ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
  return document.createElement(tag);
},

_JenkinsSmiHash_combine: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

_convertNativeToDart_EventTarget: function(e) {
  var $window, t1;
  if (e == null)
    return;
  if ("setInterval" in e) {
    $window = W._DOMWindowCrossFrame__createSafe(e);
    t1 = J.getInterceptor($window);
    if (typeof $window === "object" && $window !== null && !!t1.$isEventTarget)
      return $window;
    return;
  } else
    return e;
},

_wrapZone: function(callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone)
    return callback;
  return t1.bindUnaryCallback$2$runGuarded(callback, true);
},

HtmlElement: {"": "Element;", "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseFontElement|HTMLBodyElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFieldSetElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLKeygenElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLModElement|HTMLOListElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLScriptElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"},

AnchorElement: {"": "HtmlElement;target=",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "HTMLAnchorElement"
},

AreaElement: {"": "HtmlElement;target=", "%": "HTMLAreaElement"},

BaseElement: {"": "HtmlElement;target=", "%": "HTMLBaseElement"},

ButtonElement: {"": "HtmlElement;value=", "%": "HTMLButtonElement"},

CanvasElement: {"": "HtmlElement;height%,width%",
  get$context2D: function(receiver) {
    return receiver.getContext("2d");
  },
  $isCanvasElement: true,
  "%": "HTMLCanvasElement"
},

CanvasRenderingContext: {"": "Interceptor;", "%": ";CanvasRenderingContext"},

CanvasRenderingContext2D: {"": "CanvasRenderingContext;font}", "%": "CanvasRenderingContext2D"},

CharacterData: {"": "Node;length=", "%": "CDATASection|Comment|Text;CharacterData"},

CssStyleDeclaration: {"": "Interceptor_CssStyleDeclarationBase;length=",
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = receiver.getPropertyValue(propertyName);
    return propValue != null ? propValue : "";
  },
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      if (priority == null)
        priority = "";
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      H.unwrapException(exception);
    }

  },
  "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
},

DomException: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "DOMException"
},

Element: {"": "Node;offsetTop=,style=",
  get$client: function(receiver) {
    var t1 = new P.Rectangle(receiver.clientLeft, receiver.clientTop, receiver.clientWidth, receiver.clientHeight);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  toString$0: function(receiver) {
    return receiver.localName;
  },
  "%": ";Element"
},

EmbedElement: {"": "HtmlElement;height%,width%", "%": "HTMLEmbedElement"},

ErrorEvent: {"": "Event0;error=", "%": "ErrorEvent"},

Event0: {"": "Interceptor;",
  get$target: function(receiver) {
    return W._convertNativeToDart_EventTarget(receiver.target);
  },
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  },
  "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|SpeechSynthesisEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|XMLHttpRequestProgressEvent;Event"
},

EventTarget: {"": "Interceptor;",
  addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  dispatchEvent$1: function(receiver, $event) {
    return receiver.dispatchEvent($event);
  },
  removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  $isEventTarget: true,
  "%": "MediaStream;EventTarget"
},

FormElement: {"": "HtmlElement;length=,target=", "%": "HTMLFormElement"},

IFrameElement: {"": "HtmlElement;height%,width%", "%": "HTMLIFrameElement"},

ImageElement: {"": "HtmlElement;height%,width%", "%": "HTMLImageElement"},

InputElement: {"": "HtmlElement;height%,size%,value=,width%", $isEventTarget: true, "%": "HTMLInputElement"},

KeyboardEvent: {"": "UIEvent;",
  get$keyCode: function(receiver) {
    return receiver.keyCode;
  },
  "%": "KeyboardEvent"
},

LIElement: {"": "HtmlElement;value=", "%": "HTMLLIElement"},

MediaElement: {"": "HtmlElement;error=", "%": "HTMLAudioElement;HTMLMediaElement"},

MeterElement: {"": "HtmlElement;value=", "%": "HTMLMeterElement"},

MouseEvent0: {"": "UIEvent;button=",
  get$client: function(receiver) {
    var t1 = new P.Point0(receiver.clientX, receiver.clientY);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "%": ";DragEvent|MSPointerEvent|MouseEvent|PointerEvent"
},

Node: {"": "EventTarget;text:textContent}",
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  append$1: function(receiver, newChild) {
    return receiver.appendChild(newChild);
  },
  contains$1: function(receiver, other) {
    return receiver.contains(other);
  },
  "%": "Attr|Document|DocumentFragment|DocumentType|Entity|HTMLDocument|Notation|SVGDocument|ShadowRoot;Node"
},

ObjectElement: {"": "HtmlElement;height%,width%", "%": "HTMLObjectElement"},

OptionElement: {"": "HtmlElement;value=", "%": "HTMLOptionElement"},

OutputElement: {"": "HtmlElement;value=", "%": "HTMLOutputElement"},

ParamElement: {"": "HtmlElement;value=", "%": "HTMLParamElement"},

ProcessingInstruction: {"": "CharacterData;target=", "%": "ProcessingInstruction"},

ProgressElement: {"": "HtmlElement;value=", "%": "HTMLProgressElement"},

SelectElement: {"": "HtmlElement;length=,size%,value=", "%": "HTMLSelectElement"},

SpeechRecognitionError: {"": "Event0;error=", "%": "SpeechRecognitionError"},

TextAreaElement: {"": "HtmlElement;value=", "%": "HTMLTextAreaElement"},

Touch: {"": "Interceptor;",
  get$target: function(receiver) {
    return W._convertNativeToDart_EventTarget(receiver.target);
  },
  get$client: function(receiver) {
    var t1 = new P.Point0(receiver.clientX, receiver.clientY);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "%": "Touch"
},

TouchEvent0: {"": "UIEvent;changedTouches=", "%": "TouchEvent"},

TouchList: {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Touch];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "TouchList"
},

UIEvent: {"": "Event0;", "%": "CompositionEvent|FocusEvent|SVGZoomEvent|TextEvent;UIEvent"},

VideoElement: {"": "MediaElement;height%,width%", "%": "HTMLVideoElement"},

WheelEvent: {"": "MouseEvent0;",
  get$deltaY: function(receiver) {
    var detail;
    if (receiver.deltaY !== undefined)
      return receiver.deltaY;
    else if (receiver.wheelDelta !== undefined)
      return -receiver.wheelDelta;
    else if (receiver.detail !== undefined) {
      if (receiver.axis == MouseScrollEvent.VERTICAL_AXIS) {
        detail = receiver.detail;
        if (Math.abs(detail) < 100)
          return -detail * 40;
        return -detail;
      }
      return 0;
    }
    throw H.wrapException(P.UnsupportedError$("deltaY is not supported"));
  },
  get$deltaX: function(receiver) {
    var detail;
    if (receiver.deltaX !== undefined)
      return receiver.deltaX;
    else if (receiver.wheelDeltaX !== undefined)
      return -receiver.wheelDeltaX;
    else if (receiver.detail !== undefined) {
      if (receiver.axis !== undefined && receiver.axis == MouseScrollEvent.HORIZONTAL_AXIS) {
        detail = receiver.detail;
        if (detail < 100)
          return -detail * 40;
        return -detail;
      }
      return 0;
    }
    throw H.wrapException(P.UnsupportedError$("deltaX is not supported"));
  },
  "%": "MouseScrollEvent|MouseWheelEvent|WheelEvent"
},

Window: {"": "EventTarget;",
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $isEventTarget: true,
  "%": "DOMWindow|Window"
},

_ClientRect: {"": "Interceptor;height=,left=,top=,width=",
  toString$0: function(receiver) {
    return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    t2 = receiver.left;
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = receiver.top;
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.width;
        t3 = t1.get$width(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.height;
          t1 = t1.get$height(other);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(receiver) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(receiver.left);
    t2 = J.get$hashCode$(receiver.top);
    t3 = J.get$hashCode$(receiver.width);
    t4 = J.get$hashCode$(receiver.height);
    return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
  },
  $isRectangle: true,
  $asRectangle: function() {
    return [null];
  },
  "%": "ClientRect|DOMRect"
},

Interceptor_CssStyleDeclarationBase: {"": "Interceptor+CssStyleDeclarationBase;"},

CssStyleDeclarationBase: {"": "Object;",
  get$clear: function(receiver) {
    return this.getPropertyValue$1(receiver, "clear");
  },
  clear$0: function($receiver) {
    return this.get$clear($receiver).call$0();
  },
  get$color: function(receiver) {
    return this.getPropertyValue$1(receiver, "color");
  },
  set$color: function(receiver, value) {
    this.setProperty$3(receiver, "color", value, "");
  },
  set$cursor: function(receiver, value) {
    this.setProperty$3(receiver, "cursor", value, "");
  },
  set$display: function(receiver, value) {
    this.setProperty$3(receiver, "display", value, "");
  },
  set$font: function(receiver, value) {
    this.setProperty$3(receiver, "font", value, "");
  },
  set$height: function(receiver, value) {
    this.setProperty$3(receiver, "height", value, "");
  },
  get$outline: function(receiver) {
    return this.getPropertyValue$1(receiver, "outline");
  },
  set$outline: function(receiver, value) {
    this.setProperty$3(receiver, "outline", value, "");
  },
  get$size: function(receiver) {
    return this.getPropertyValue$1(receiver, "size");
  },
  set$size: function(receiver, value) {
    this.setProperty$3(receiver, "size", value, "");
  },
  set$verticalAlign: function(receiver, value) {
    this.setProperty$3(receiver, "vertical-align", value, "");
  },
  set$width: function(receiver, value) {
    this.setProperty$3(receiver, "width", value, "");
  }
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

EventStreamProvider: {"": "Object;_eventType",
  forElement$2$useCapture: function(e, useCapture) {
    var t1 = new W._ElementEventStreamImpl(e, this._eventType, useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forElement$1: function(e) {
    return this.forElement$2$useCapture(e, false);
  }
},

_EventStream: {"": "Stream;",
  get$isBroadcast: function() {
    return true;
  },
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(onData), this._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_EventStream", 0)]);
    t1._tryResume$0();
    return t1;
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  $asStream: null
},

_ElementEventStreamImpl: {"": "_EventStream;_target,_eventType,_useCapture", $as_EventStream: null},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this._target == null)
      return;
    this._unlisten$0();
    this._target = null;
    this._onData = null;
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      J.addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  _unlisten$0: function() {
    var t1 = this._onData;
    if (t1 != null)
      J.removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  $asStreamSubscription: null
},

_CustomEventStreamProvider: {"": "Object;_eventTypeGetter",
  _eventTypeGetter$1: function(arg0) {
    return this._eventTypeGetter.call$1(arg0);
  },
  forElement$2$useCapture: function(e, useCapture) {
    var t1 = new W._ElementEventStreamImpl(e, this._eventTypeGetter$1(e), useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forElement$1: function(e) {
    return this.forElement$2$useCapture(e, false);
  }
},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return W.FixedSizeListIterator$(receiver);
  },
  add$1: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

FixedSizeListIterator: {"": "Object;_array,_html$_length,_position,_html$_current",
  moveNext$0: function() {
    var nextPosition, t1;
    nextPosition = this._position + 1;
    t1 = this._html$_length;
    if (nextPosition < t1) {
      this._html$_current = J.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._html$_current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._html$_current;
  },
  static: {
FixedSizeListIterator$: function(array) {
  return new W.FixedSizeListIterator(array, J.get$length$asx(array), -1, null);
}}

},

_DOMWindowCrossFrame: {"": "Object;_window", $isEventTarget: true, static: {
_DOMWindowCrossFrame__createSafe: function(w) {
  if (w === window)
    return w;
  else
    return new W._DOMWindowCrossFrame(w);
}}
}}],
["dart.dom.svg", "dart:svg", , P, {
AElement: {"": "GraphicsElement;target=", "%": "SVGAElement"},

FEBlendElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEBlendElement"},

FEColorMatrixElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEColorMatrixElement"},

FEComponentTransferElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEComponentTransferElement"},

FECompositeElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFECompositeElement"},

FEConvolveMatrixElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEConvolveMatrixElement"},

FEDiffuseLightingElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEDiffuseLightingElement"},

FEDisplacementMapElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEDisplacementMapElement"},

FEFloodElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEFloodElement"},

FEGaussianBlurElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEGaussianBlurElement"},

FEImageElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEImageElement"},

FEMergeElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEMergeElement"},

FEMorphologyElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEMorphologyElement"},

FEOffsetElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEOffsetElement"},

FEPointLightElement: {"": "SvgElement;x=,y=", "%": "SVGFEPointLightElement"},

FESpecularLightingElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFESpecularLightingElement"},

FESpotLightElement: {"": "SvgElement;x=,y=", "%": "SVGFESpotLightElement"},

FETileElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFETileElement"},

FETurbulenceElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFETurbulenceElement"},

FilterElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFilterElement"},

ForeignObjectElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGForeignObjectElement"},

GraphicsElement: {"": "SvgElement;", "%": "SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGGElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGSwitchElement;SVGGraphicsElement"},

ImageElement0: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGImageElement"},

MaskElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGMaskElement"},

PatternElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGPatternElement"},

RectElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGRectElement"},

SvgElement: {"": "Element;", "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGRadialGradientElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStyleElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"},

SvgSvgElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGSVGElement"},

TextContentElement: {"": "GraphicsElement;", "%": "SVGTextPathElement;SVGTextContentElement"},

TextPositioningElement: {"": "TextContentElement;x=,y=", "%": "SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"},

UseElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGUseElement"}}],
["dart.isolate", "dart:isolate", , P, {
ReceivePort: {"": "Object;"}}],
["dart.math", "dart:math", , P, {
_JenkinsSmiHash_combine0: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish0: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

min: function(a, b) {
  var t1;
  if (typeof a !== "number")
    throw H.wrapException(new P.ArgumentError(a));
  if (typeof b !== "number")
    throw H.wrapException(new P.ArgumentError(b));
  if (a > b)
    return b;
  if (a < b)
    return a;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return (a + b) * a * b;
    if (a === 0)
      t1 = b === 0 ? 1 / b < 0 : b < 0;
    else
      t1 = false;
    if (t1 || isNaN(b))
      return b;
    return a;
  }
  return a;
},

max: function(a, b) {
  var t1;
  if (typeof a !== "number")
    throw H.wrapException(new P.ArgumentError(a));
  if (typeof b !== "number")
    throw H.wrapException(new P.ArgumentError(b));
  if (a > b)
    return a;
  if (a < b)
    return b;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return a + b;
    if (isNaN(b))
      return b;
    return a;
  }
  if (b === 0)
    t1 = a === 0 ? 1 / a < 0 : a < 0;
  else
    t1 = false;
  if (t1)
    return b;
  return a;
},

Point0: {"": "Object;x>,y>",
  toString$0: function(_) {
    return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
  },
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isPoint0)
      return false;
    t1 = this.x;
    t2 = other.x;
    if (t1 == null ? t2 == null : t1 === t2) {
      t1 = this.y;
      t2 = other.y;
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2;
    t1 = J.get$hashCode$(this.x);
    t2 = J.get$hashCode$(this.y);
    return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
  },
  $add: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = J.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t1 !== "number")
      throw t1.$add();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = this.y;
    t2 = t2.get$y(other);
    if (typeof t4 !== "number")
      throw t4.$add();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = new P.Point0(t1 + t3, t4 + t2);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "Point0", 0)]);
    return t2;
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = J.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t1 !== "number")
      throw t1.$sub();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = this.y;
    t2 = t2.get$y(other);
    if (typeof t4 !== "number")
      throw t4.$sub();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = new P.Point0(t1 - t3, t4 - t2);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "Point0", 0)]);
    return t2;
  },
  $mul: function(_, factor) {
    var t1, t2;
    t1 = this.x;
    if (typeof t1 !== "number")
      throw t1.$mul();
    if (typeof factor !== "number")
      throw H.iae(factor);
    t2 = this.y;
    if (typeof t2 !== "number")
      throw t2.$mul();
    t2 = new P.Point0(t1 * factor, t2 * factor);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "Point0", 0)]);
    return t2;
  },
  $isPoint0: true
},

_RectangleBase: {"": "Object;",
  toString$0: function(_) {
    return "Rectangle (" + H.S(this.get$left(this)) + ", " + H.S(this.top) + ") " + H.S(this.width) + " x " + H.S(this.height);
  },
  $eq: function(_, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    t2 = this.get$left(this);
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = this.top;
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = this.width;
        t3 = t1.get$width(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = this.height;
          t1 = t1.get$height(other);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(this.get$left(this));
    t2 = J.get$hashCode$(this.top);
    t3 = J.get$hashCode$(this.width);
    t4 = J.get$hashCode$(this.height);
    return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2), t3), t4));
  }
},

Rectangle: {"": "_RectangleBase;left>,top>,width>,height>", $isRectangle: true, $asRectangle: null, $as_RectangleBase: null}}],
["dart.typed_data", "dart:typed_data", , P, {
TypedData: {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    var t1 = J.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$ge(index, $length))
      throw H.wrapException(P.RangeError$range(index, 0, $length));
    else
      throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
  },
  "%": ";ArrayBufferView;TypedData_ListMixin|TypedData_ListMixin_FixedLengthListMixin"
},

Uint8List: {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": ";Uint8Array"
},

TypedData_ListMixin: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;", $asList: null}}],
["", "example.dart", , U, {
main: function() {
  var canvas, textarea, reload, stage, render, format, excited, rtf, t1, t2;
  canvas = document.querySelector("#richtext");
  textarea = document.querySelector("#texttodraw");
  reload = document.querySelector("#reload");
  stage = Z.Stage$("richtext", canvas, null, null, null);
  stage._stageScaleMode = "showAll";
  stage._updateCanvasSize$0();
  render = Z.RenderLoop$();
  format = new A.RichTextFormat("Calibri, sans-serif", 25, 0, 0, -1, false, false, false, false, false, "left", 0, 0, 0, 0, 0, 0);
  excited = format.clone$0(format);
  excited.bold = true;
  excited.italic = true;
  excited.size = 30;
  excited.color = 16711935;
  rtf = A.RichTextField$("", format, true);
  t1 = rtf.presets;
  t1.$indexSet(t1, "excited", excited);
  rtf.set$text(rtf, J.get$value$x(textarea));
  t1 = stage._sourceWidth;
  t1.toString;
  rtf._width = t1;
  rtf._refreshPending = (rtf._refreshPending | 3) >>> 0;
  t1 = stage._sourceHeight;
  t1.toString;
  rtf._height = t1;
  rtf._refreshPending = (rtf._refreshPending | 3) >>> 0;
  rtf._wordWrap = true;
  rtf._refreshPending = (rtf._refreshPending | 3) >>> 0;
  rtf.set$y(rtf, 0);
  render.addStage$1(stage);
  stage.addChild$1(rtf);
  reload.toString;
  t1 = C.EventStreamProvider_click.forElement$1(reload);
  t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new U.main_closure(textarea, rtf)), t1._useCapture);
  H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
  t2._tryResume$0();
},

main_closure: {"": "Closure;textarea_0,rtf_1",
  call$1: function(e) {
    var t1 = this.rtf_1;
    t1.set$text(t1, J.get$value$x(this.textarea_0));
  },
  $is_args1: true
}},
1],
["stagexl", "package:stagexl/stagexl.dart", , Z, {
Mouse__getCssStyle: function(mouseCursor) {
  var cursor, style;
  cursor = $.Mouse__customCursor;
  switch (cursor !== "auto" ? cursor : mouseCursor) {
    case "auto":
      style = "auto";
      break;
    case "arrow":
      style = "default";
      break;
    case "button":
      style = "pointer";
      break;
    case "hand":
      style = "move";
      break;
    case "ibeam":
      style = "text";
      break;
    case "wait":
      style = "wait";
      break;
    default:
      style = "auto";
  }
  return $.Mouse__isCursorHidden ? "none" : style;
},

Animatable: {"": "Object;"},

_AnimatableLink: {"": "Object;animatable,nextAnimatableLink"},

Juggler: {"": "Object;_firstAnimatableLink,_lastAnimatableLink,_elapsedTime",
  add$1: function(_, animatable) {
    throw H.wrapException(new P.ArgumentError("The supplied animatable does not extend type Animatable."));
  },
  contains$1: function(_, animatable) {
    var link, t1;
    link = this._firstAnimatableLink;
    for (t1 = this._lastAnimatableLink; link !== t1;) {
      link.animatable;
      link = link.nextAnimatableLink;
    }
    return false;
  },
  advanceTime$1: function(time) {
    var link, lastLink, nextLink;
    this._elapsedTime = this._elapsedTime + time;
    link = this._firstAnimatableLink;
    lastLink = this._lastAnimatableLink;
    for (; link !== lastLink;) {
      nextLink = link.nextAnimatableLink;
      link.animatable = nextLink.animatable;
      link.nextAnimatableLink = nextLink.nextAnimatableLink;
      if (nextLink === lastLink)
        lastLink = link;
      if (nextLink === this._lastAnimatableLink)
        this._lastAnimatableLink = link;
    }
    return true;
  }
},

DisplayObject: {"": "EventDispatcher;",
  get$x: function(_) {
    return this._x;
  },
  get$y: function(_) {
    return this._y;
  },
  get$root: function() {
    var currentObject, currentObject0;
    for (currentObject = this; currentObject0 = currentObject._parent, currentObject0 != null; currentObject = currentObject0)
      ;
    return currentObject;
  },
  get$stage: function() {
    var root, t1;
    root = this.get$root();
    t1 = J.getInterceptor(root);
    return typeof root === "object" && root !== null && !!t1.$isStage ? root : null;
  },
  set$x: function(_, value) {
    this._x = value;
    this._transformationMatrixRefresh = true;
  },
  set$y: function(_, value) {
    this._y = value;
    this._transformationMatrixRefresh = true;
  },
  get$_transformationMatrix: function() {
    var t1, t2, skewXrotation, skewYrotation, scaleX, scaleY, pivotX, pivotY, cosX, sinX, a, b, c, d;
    if (this._transformationMatrixRefresh) {
      this._transformationMatrixRefresh = false;
      t1 = this._skewX;
      t2 = this._rotation;
      skewXrotation = t1 + t2;
      skewYrotation = this._skewY + t2;
      scaleX = this._scaleX;
      scaleY = this._scaleY;
      pivotX = this._pivotX;
      pivotY = this._pivotY;
      if (scaleX > -0.0001 && scaleX < 0.0001)
        scaleX = scaleX >= 0 ? 0.0001 : -0.0001;
      if (scaleY > -0.0001 && scaleY < 0.0001)
        scaleY = scaleY >= 0 ? 0.0001 : -0.0001;
      if (skewXrotation === 0 && skewYrotation === 0)
        this._transformationMatrixPrivate.setTo$6(scaleX, 0, 0, scaleY, this._x - pivotX * scaleX, this._y - pivotY * scaleY);
      else {
        cosX = Math.cos(skewXrotation);
        sinX = Math.sin(skewXrotation);
        if (skewXrotation === skewYrotation) {
          a = scaleX * cosX;
          b = scaleX * sinX;
          c = -scaleY * sinX;
          d = scaleY * cosX;
        } else {
          a = scaleX * Math.cos(skewYrotation);
          b = scaleX * Math.sin(skewYrotation);
          c = -scaleY * sinX;
          d = scaleY * cosX;
        }
        this._transformationMatrixPrivate.setTo$6(a, b, c, d, this._x - (pivotX * a + pivotY * c), this._y - (pivotX * b + pivotY * d));
      }
    }
    return this._transformationMatrixPrivate;
  },
  globalToLocal$1: function(globalPoint) {
    var t1, displayObject;
    t1 = this._tmpMatrix;
    t1.identity$0();
    for (displayObject = this; displayObject != null; displayObject = displayObject._parent)
      t1.concat$1(displayObject.get$_transformationMatrix());
    t1.invert$0();
    return t1.transformPoint$1(globalPoint);
  },
  dispatchEvent$1: function(_, $event) {
    var ancestor, ancestors, t1, t2, i;
    if ($event.get$captures() || $event._bubbles === true) {
      for (ancestor = this._parent, ancestors = null; ancestor != null; ancestor = ancestor._parent)
        if (ancestor._hasEventListener$3($event._type, $event.get$captures(), $event._bubbles)) {
          if (ancestors == null)
            ancestors = $.get$_displayObjectListPool().pop$0();
          J.add$1$ax(ancestors, ancestor);
        }
    } else
      ancestors = null;
    if ($event.get$captures() && ancestors != null) {
      t1 = J.getInterceptor$asx(ancestors);
      t2 = t1.get$length(ancestors);
      if (typeof t2 !== "number")
        throw t2.$sub();
      i = t2 - 1;
      while (true) {
        if (!(i >= 0 && $event._stopsPropagation === false))
          break;
        t1.$index(ancestors, i)._dispatchEventInternal$4($event, this, t1.$index(ancestors, i), 1);
        --i;
      }
    }
    if ($event._stopsPropagation === false)
      this._dispatchEventInternal$4($event, this, this, 2);
    if ($event._bubbles === true && ancestors != null) {
      t1 = J.getInterceptor$asx(ancestors);
      i = 0;
      while (true) {
        t2 = t1.get$length(ancestors);
        if (typeof t2 !== "number")
          throw H.iae(t2);
        if (!(i < t2 && $event._stopsPropagation === false))
          break;
        t1.$index(ancestors, i)._dispatchEventInternal$4($event, this, t1.$index(ancestors, i), 3);
        ++i;
      }
    }
    if (ancestors != null) {
      J.clear$0$ax(ancestors);
      $.get$_displayObjectListPool().push$1(ancestors);
    }
  },
  _setParent$1: function(value) {
    var ancestor;
    for (ancestor = value; ancestor != null; ancestor = ancestor._parent)
      if (ancestor === this)
        throw H.wrapException(new P.ArgumentError("Error #2150: An object cannot be added as a child to one of it's children (or children's children, etc.)."));
    this._parent = value;
  }
},

DisplayObjectContainer: {"": "InteractiveObject;",
  addChild$1: function(child) {
    var t1 = this._children;
    if (child._parent === this) {
      C.JSArray_methods.removeAt$1(t1, H.Arrays_indexOf(t1, child, 0, t1.length));
      t1.push(child);
    } else
      this.addChildAt$2(child, t1.length);
  },
  addChildAt$2: function(child, index) {
    var t1;
    if (index < 0 || index > this._children.length)
      throw H.wrapException(new P.ArgumentError("Error #2006: The supplied index is out of bounds."));
    t1 = child._parent;
    if (t1 === this) {
      t1 = this._children;
      C.JSArray_methods.removeAt$1(t1, H.Arrays_indexOf(t1, child, 0, t1.length));
      C.JSArray_methods.insert$2(t1, index > t1.length ? index - 1 : index, child);
    } else {
      if (t1 != null)
        t1.removeChild$1(child);
      child._setParent$1(this);
      C.JSArray_methods.insert$2(this._children, index, child);
      t1 = new Z.Event(null, null, null, null, null, null, null);
      t1._reset$2("added", true);
      child.dispatchEvent$1(child, t1);
      if (this.get$stage() != null) {
        t1 = new Z.Event(null, null, null, null, null, null, null);
        t1._reset$2("addedToStage", false);
        this._dispatchEventDescendants$2(child, t1);
      }
    }
  },
  removeChild$1: function(child) {
    var t1, childIndex;
    t1 = this._children;
    childIndex = H.Arrays_indexOf(t1, child, 0, t1.length);
    if (childIndex === -1)
      throw H.wrapException(new P.ArgumentError("Error #2025: The supplied DisplayObject must be a child of the caller."));
    this.removeChildAt$1(childIndex);
  },
  removeChildAt$1: function(index) {
    var t1, child, t2;
    if (index < 0 || index >= this._children.length)
      throw H.wrapException(new P.ArgumentError("Error #2006: The supplied index is out of bounds."));
    t1 = this._children;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    child = t1[index];
    t2 = new Z.Event(null, null, null, null, null, null, null);
    t2._reset$2("removed", true);
    child.dispatchEvent$1(child, t2);
    if (this.get$stage() != null) {
      t2 = new Z.Event(null, null, null, null, null, null, null);
      t2._reset$2("removedFromStage", false);
      this._dispatchEventDescendants$2(child, t2);
    }
    child._setParent$1(null);
    C.JSArray_methods.removeAt$1(t1, index);
  },
  contains$1: function(_, child) {
    for (; true; child = child.get$_parent())
      ;
    return false;
  },
  hitTestInput$2: function(localX, localY) {
    var t1, i, hit, child, matrix, deltaX, deltaY, t2, t3, t4, t5, t6, displayObject;
    localX = J.toDouble$0$n(localX);
    localY = J.toDouble$0$n(localY);
    for (t1 = this._children, i = t1.length - 1, hit = null; i >= 0; --i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      child = t1[i];
      matrix = child.get$_transformationMatrix();
      if (child._visible && !child._off) {
        deltaX = localX - matrix._tx;
        deltaY = localY - matrix._ty;
        t2 = matrix._d;
        t3 = matrix._c;
        t4 = matrix._det;
        t5 = matrix._a;
        t6 = matrix._b;
        displayObject = child.hitTestInput$2((t2 * deltaX - t3 * deltaY) / t4, (t5 * deltaY - t6 * deltaX) / t4);
        if (displayObject == null)
          continue;
        t2 = J.getInterceptor(displayObject);
        if (typeof displayObject === "object" && displayObject !== null && !!t2.$isInteractiveObject && displayObject.mouseEnabled)
          return this._mouseChildren ? displayObject : this;
        hit = this;
      }
    }
    return hit;
  },
  render$1: function(renderState) {
    var t1, i, child;
    for (t1 = this._children, i = 0; i < t1.length; ++i) {
      child = t1[i];
      if (child._visible && !child._off)
        renderState.renderDisplayObject$1(child);
    }
  },
  _collectDescendants$2: function(displayObject, descendants) {
    J.add$1$ax(descendants, displayObject);
  },
  _dispatchEventDescendants$2: function(displayObject, $event) {
    var descendants, t1, i, t2;
    descendants = $.get$_displayObjectListPool().pop$0();
    this._collectDescendants$2(displayObject, descendants);
    t1 = J.getInterceptor$asx(descendants);
    i = 0;
    while (true) {
      t2 = t1.get$length(descendants);
      if (typeof t2 !== "number")
        throw H.iae(t2);
      if (!(i < t2))
        break;
      J.dispatchEvent$1$x(t1.$index(descendants, i), $event);
      ++i;
    }
    t1.clear$0(descendants);
    $.get$_displayObjectListPool().push$1(descendants);
  }
},

InteractiveObject: {"": "DisplayObject;", $isInteractiveObject: true},

_MouseButton: {"": "Object;target>,buttonDown,clickTime,clickCount,mouseDownEventType,mouseUpEventType,mouseClickEventType,mouseDoubleClickEventType"},

_Touch: {"": "Object;touchPointID<,target>,primaryTouchPoint<", static: {
"": "_Touch__globalTouchPointID",
}
},

Stage: {"": "DisplayObjectContainer;_canvas,_context,_sourceWidth,_sourceHeight,_frameRate,_canvasWidth,_canvasHeight,_contentRectangle,_clientTransformation,_stageTransformation,_renderLoop,_juggler,_focus,_renderState,_stageRenderMode,_stageScaleMode,_stageAlign,_mouseCursor,_mousePosition,_mouseTarget,_mouseButtons,_touches,_mouseEvent,_touchEvent,_touchEventSubscriptions,_children,_mouseChildren,_tabChildren,doubleClickEnabled,mouseEnabled,tabEnabled,tabIndex,_stagexl$_id,_x,_y,_pivotX,_pivotY,_scaleX,_scaleY,_skewX,_skewY,_rotation,_alpha,_visible,_off,_mask,_cache,_cacheRectangle,_cacheDebugBorder,_filters,_shadow,_compositeOperation,_stagexl$_name,_parent,_tmpMatrix,_transformationMatrixPrivate,_transformationMatrixRefresh,_eventStreams,_captureEventStreams",
  materialize$2: function(currentTime, deltaTime) {
    var t1 = this._stageRenderMode;
    if (t1 === "auto" || t1 === "once") {
      this._updateCanvasSize$0();
      t1 = this._renderState;
      t1.reset$3(t1, this._stageTransformation, currentTime, deltaTime);
      this.render$1(this._renderState);
      if (this._stageRenderMode === "once")
        this._stageRenderMode = "stop";
    }
  },
  _updateCanvasSize$0: function() {
    var client, t1, t2, t3, t4, t5, clientWidth, clientHeight, sourceWidth, sourceHeight, ratioWidth, ratioHeight, scaleY, scaleX, pivotX, pivotY, contentRectangle, t6, pixelRatio;
    client = this._canvas.getBoundingClientRect();
    t1 = this._canvas;
    t2 = t1.clientLeft;
    t3 = J.getInterceptor$x(client);
    t4 = t3.get$left(client);
    if (typeof t2 !== "number")
      throw t2.$add();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t5 = t1.clientTop;
    t3 = t3.get$top(client);
    if (typeof t5 !== "number")
      throw t5.$add();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    clientWidth = t1.clientWidth;
    clientHeight = t1.clientHeight;
    sourceWidth = this._sourceWidth;
    sourceHeight = this._sourceHeight;
    if (typeof clientWidth !== "number")
      throw H.wrapException("dart2js_hint");
    if (typeof clientHeight !== "number")
      throw H.wrapException("dart2js_hint");
    if (typeof sourceWidth !== "number")
      throw H.wrapException("dart2js_hint");
    if (typeof sourceHeight !== "number")
      throw H.wrapException("dart2js_hint");
    if (clientWidth === 0 || clientHeight === 0)
      return;
    ratioWidth = clientWidth / sourceWidth;
    ratioHeight = clientHeight / sourceHeight;
    switch (this._stageScaleMode) {
      case "exactFit":
        scaleY = ratioHeight;
        scaleX = ratioWidth;
        break;
      case "noBorder":
        scaleY = ratioWidth > ratioHeight ? ratioWidth : ratioHeight;
        scaleX = scaleY;
        break;
      case "noScale":
        scaleX = 1;
        scaleY = 1;
        break;
      case "showAll":
        scaleY = ratioWidth < ratioHeight ? ratioWidth : ratioHeight;
        scaleX = scaleY;
        break;
      default:
        scaleX = 1;
        scaleY = 1;
    }
    t1 = this._stageAlign;
    switch (t1) {
      case "TR":
      case "R":
      case "BR":
        pivotX = clientWidth - sourceWidth * scaleX;
        break;
      case "T":
      case "":
      case "B":
        pivotX = (clientWidth - sourceWidth * scaleX) / 2;
        break;
      default:
        pivotX = 0;
    }
    switch (t1) {
      case "BL":
      case "B":
      case "BR":
        pivotY = clientHeight - sourceHeight * scaleY;
        break;
      case "L":
      case "":
      case "R":
        pivotY = (clientHeight - sourceHeight * scaleY) / 2;
        break;
      default:
        pivotY = 0;
    }
    contentRectangle = this._contentRectangle;
    contentRectangle._x = -pivotX / scaleX;
    contentRectangle._y = -pivotY / scaleY;
    contentRectangle._stagexl$_width = clientWidth / scaleX;
    contentRectangle._stagexl$_height = clientHeight / scaleY;
    t1 = $.get$Stage_autoHiDpi() === true ? $.get$_devicePixelRatio() : 1;
    t6 = $.get$_backingStorePixelRatio();
    if (typeof t1 !== "number")
      throw t1.$div();
    pixelRatio = t1 / t6;
    this._stageTransformation.setTo$6(scaleX, 0, 0, scaleY, pivotX, pivotY);
    t6 = this._stageTransformation;
    t6.scale$2(t6, pixelRatio, pixelRatio);
    this._clientTransformation.setTo$6(1, 0, 0, 1, -(t2 + t4) - pivotX, -(t5 + t3) - pivotY);
    t3 = this._clientTransformation;
    t3.scale$2(t3, 1 / scaleX, 1 / scaleY);
    if (this._canvasWidth !== clientWidth || this._canvasHeight !== clientHeight) {
      this._canvasWidth = clientWidth;
      this._canvasHeight = clientHeight;
      this._canvas.width = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._canvasWidth * pixelRatio));
      this._canvas.height = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._canvasHeight * pixelRatio));
      t1 = this._canvas;
      t2 = t1.clientWidth;
      if (t2 == null ? clientWidth == null : t2 === clientWidth) {
        t2 = t1.clientHeight;
        t2 = t2 == null ? clientHeight != null : t2 !== clientHeight;
      } else
        t2 = true;
      if (t2) {
        J.set$width$x(t1.style, H.S(clientWidth) + "px");
        J.set$height$x(this._canvas.style, H.S(clientHeight) + "px");
      }
      t1 = new Z.Event(null, null, null, null, null, null, null);
      t1._reset$2("resize", false);
      this.dispatchEvent$1(this, t1);
    }
  },
  _onMouseCursorChanged$1: function(action) {
    J.set$cursor$x(this._canvas.style, Z.Mouse__getCssStyle(this._mouseCursor));
  },
  get$_onMouseCursorChanged: function() {
    return new H.BoundClosure$1(this, Z.Stage.prototype._onMouseCursorChanged$1, null, "_onMouseCursorChanged$1");
  },
  _onMouseEvent$1: function($event) {
    var t1, time, button, t2, stagePoint, mouseButton, target, t3, mouseEventType, isClick, isDoubleClick, localPoint;
    t1 = J.getInterceptor$x($event);
    t1.preventDefault$0($event);
    time = P.DateTime$_now().millisecondsSinceEpoch;
    button = t1.get$button($event);
    t1 = this._clientTransformation;
    t2 = new P.Point0($event.clientX, $event.clientY);
    H.setRuntimeTypeInfo(t2, [null]);
    stagePoint = t1._transformHtmlPoint$1(t2);
    if (typeof button !== "number")
      throw button.$lt();
    if (button < 0 || button > 2)
      return;
    if ($event.type === "mousemove" && this._mousePosition.equals$1(stagePoint))
      return;
    t1 = this._mouseButtons;
    t1.length;
    if (button < 0 || button >= 3)
      throw H.ioore(t1, button);
    mouseButton = t1[button];
    this._mousePosition = stagePoint;
    target = $event.type !== "mouseout" ? this.hitTestInput$2(stagePoint._x, stagePoint._y) : null;
    if (this._mouseCursor !== "arrow") {
      this._mouseCursor = "arrow";
      J.set$cursor$x(this._canvas.style, Z.Mouse__getCssStyle("arrow"));
    }
    t1 = this._mouseTarget;
    if (t1 != null && (t1 == null ? target != null : t1 !== target)) {
      t2 = this._mouseEvent;
      t2._reset$2("mouseOut", true);
      t3 = this._mouseTarget.get$stage() != null ? this._mouseTarget.globalToLocal$1(stagePoint) : new Z.Point(0, 0);
      t2._localX = t3._x;
      t2._localY = t3._y;
      t2._stageX = stagePoint._x;
      t2._stageY = stagePoint._y;
      t2._buttonDown = mouseButton.buttonDown;
      t1.dispatchEvent$1(t1, t2);
      this._mouseTarget = null;
    }
    t1 = target != null;
    if (t1) {
      t2 = this._mouseTarget;
      t2 = target == null ? t2 != null : target !== t2;
    } else
      t2 = false;
    if (t2) {
      t2 = this._mouseEvent;
      t2._reset$2("mouseOver", true);
      t3 = target.globalToLocal$1(stagePoint);
      t2._localX = t3._x;
      t2._localY = t3._y;
      t2._stageX = stagePoint._x;
      t2._stageY = stagePoint._y;
      t2._buttonDown = mouseButton.buttonDown;
      target.dispatchEvent$1(target, t2);
      this._mouseTarget = target;
    }
    if ($event.type === "mousedown") {
      this._canvas.focus();
      mouseEventType = mouseButton.mouseDownEventType;
      t2 = mouseButton.target;
      if ((target == null ? t2 != null : target !== t2) || time > mouseButton.clickTime + 500)
        mouseButton.clickCount = 0;
      mouseButton.buttonDown = true;
      mouseButton.target = target;
      mouseButton.clickTime = time;
      mouseButton.clickCount = mouseButton.clickCount + 1;
    } else
      mouseEventType = null;
    if ($event.type === "mouseup") {
      mouseEventType = mouseButton.mouseUpEventType;
      mouseButton.buttonDown = false;
      t2 = mouseButton.target;
      isClick = t2 == null ? target == null : t2 === target;
      isDoubleClick = isClick && (mouseButton.clickCount & 1) === 0 && time < mouseButton.clickTime + 500;
    } else {
      isClick = false;
      isDoubleClick = false;
    }
    if ($event.type === "mousemove")
      mouseEventType = "mouseMove";
    if (mouseEventType != null && t1) {
      localPoint = target.globalToLocal$1(stagePoint);
      t1 = this._mouseEvent;
      t1._reset$2(mouseEventType, true);
      t1._localX = localPoint._x;
      t1._localY = localPoint._y;
      t1._stageX = stagePoint._x;
      t1._stageY = stagePoint._y;
      t1._buttonDown = mouseButton.buttonDown;
      t1._clickCount = mouseButton.clickCount;
      target.dispatchEvent$1(target, t1);
      if (isClick) {
        t1 = isDoubleClick && target.doubleClickEnabled;
        t2 = this._mouseEvent;
        if (t1) {
          t2._reset$2(mouseButton.mouseDoubleClickEventType, true);
          t2._localX = localPoint._x;
          t2._localY = localPoint._y;
          t2._stageX = stagePoint._x;
          t2._stageY = stagePoint._y;
          t2._buttonDown = mouseButton.buttonDown;
          target.dispatchEvent$1(target, t2);
        } else {
          t2._reset$2(mouseButton.mouseClickEventType, true);
          t2._localX = localPoint._x;
          t2._localY = localPoint._y;
          t2._stageX = stagePoint._x;
          t2._stageY = stagePoint._y;
          t2._buttonDown = mouseButton.buttonDown;
          target.dispatchEvent$1(target, t2);
        }
      }
    }
  },
  get$_onMouseEvent: function() {
    return new H.BoundClosure$1(this, Z.Stage.prototype._onMouseEvent$1, null, "_onMouseEvent$1");
  },
  _onMouseWheelEvent$1: function($event) {
    var t1, stagePoint, target, t2, t3;
    t1 = J.getInterceptor$x($event);
    stagePoint = this._clientTransformation._transformHtmlPoint$1(t1.get$client($event));
    target = this.hitTestInput$2(stagePoint._x, stagePoint._y);
    if (target != null) {
      t2 = this._mouseEvent;
      t2._reset$2("mouseWheel", true);
      t3 = target.globalToLocal$1(stagePoint);
      t2._localX = t3._x;
      t2._localY = t3._y;
      t2._stageX = stagePoint._x;
      t2._stageY = stagePoint._y;
      t2._deltaX = t1.get$deltaX($event);
      t2._deltaY = C.WheelEvent_methods.get$deltaY($event);
      target.dispatchEvent$1(target, t2);
      if (this._mouseEvent._stopsPropagation === true)
        $event.preventDefault();
    }
  },
  get$_onMouseWheelEvent: function() {
    return new H.BoundClosure$1(this, Z.Stage.prototype._onMouseWheelEvent$1, null, "_onMouseWheelEvent$1");
  },
  _onMultitouchInputModeChanged$1: function(inputMode) {
    var t1, t2, t3, t4, t5, t6, t7;
    H.IterableMixinWorkaround_forEach(this._touchEventSubscriptions, new Z.Stage__onMultitouchInputModeChanged_closure());
    if ($.Multitouch__inputMode === "touchPoint") {
      t1 = C.EventStreamProvider_touchstart.forElement$1(this._canvas);
      t2 = this.get$_onTouchEvent();
      t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t2), t1._useCapture);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
      t2._tryResume$0();
      t1 = C.EventStreamProvider_touchend.forElement$1(this._canvas);
      t3 = this.get$_onTouchEvent();
      t3 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t3), t1._useCapture);
      H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
      t3._tryResume$0();
      t1 = C.EventStreamProvider_touchmove.forElement$1(this._canvas);
      t4 = this.get$_onTouchEvent();
      t4 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t4), t1._useCapture);
      H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
      t4._tryResume$0();
      t1 = C.EventStreamProvider_touchenter.forElement$1(this._canvas);
      t5 = this.get$_onTouchEvent();
      t5 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t5), t1._useCapture);
      H.setRuntimeTypeInfo(t5, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
      t5._tryResume$0();
      t1 = C.EventStreamProvider_touchleave.forElement$1(this._canvas);
      t6 = this.get$_onTouchEvent();
      t6 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t6), t1._useCapture);
      H.setRuntimeTypeInfo(t6, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
      t6._tryResume$0();
      t1 = C.EventStreamProvider_touchcancel.forElement$1(this._canvas);
      t7 = this.get$_onTouchEvent();
      t7 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t7), t1._useCapture);
      H.setRuntimeTypeInfo(t7, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
      t7._tryResume$0();
      this._touchEventSubscriptions = [t2, t3, t4, t5, t6, t7];
    }
  },
  get$_onMultitouchInputModeChanged: function() {
    return new H.BoundClosure$1(this, Z.Stage.prototype._onMultitouchInputModeChanged$1, null, "_onMultitouchInputModeChanged$1");
  },
  _onTouchEvent$1: function($event) {
    var t1, changedTouch, identifier, t2, t3, stagePoint, target, touch, t4, t5, touchEventType;
    t1 = J.getInterceptor$x($event);
    t1.preventDefault$0($event);
    for (t1 = J.get$iterator$ax(t1.get$changedTouches($event)); t1.moveNext$0();) {
      changedTouch = t1._html$_current;
      identifier = changedTouch.identifier;
      t2 = this._clientTransformation;
      t3 = new P.Point0(changedTouch.clientX, changedTouch.clientY);
      t3.$builtinTypeInfo = [null];
      stagePoint = t2._transformHtmlPoint$1(t3);
      target = this.hitTestInput$2(stagePoint._x, stagePoint._y);
      t2 = this._touches.containsKey$1(identifier);
      t3 = this._touches;
      if (t2)
        touch = t3.$index(t3, identifier);
      else {
        t2 = t3._collection$_length;
        t3 = $._Touch__globalTouchPointID;
        $._Touch__globalTouchPointID = t3 + 1;
        touch = new Z._Touch(t3, target, t2 === 0);
      }
      t2 = J.getInterceptor$x(touch);
      if (t2.get$target(touch) != null && !J.$eq(t2.get$target(touch), target)) {
        t3 = t2.get$target(touch);
        t4 = this._touchEvent;
        t4._reset$2("touchOut", true);
        t5 = t2.get$target(touch).get$stage() != null ? t2.get$target(touch).globalToLocal$1(stagePoint) : new Z.Point(0, 0);
        t4._localX = t5._x;
        t4._localY = t5._y;
        t4._stageX = stagePoint._x;
        t4._stageY = stagePoint._y;
        t4._touchPointID = touch.get$touchPointID();
        t4._isPrimaryTouchPoint = touch.get$primaryTouchPoint();
        J.dispatchEvent$1$x(t3, t4);
        touch.target = null;
      }
      t3 = target != null;
      if (t3) {
        t2 = t2.get$target(touch);
        t2 = target == null ? t2 != null : target !== t2;
      } else
        t2 = false;
      if (t2) {
        t2 = this._touchEvent;
        t2._reset$2("touchOver", true);
        t4 = target.globalToLocal$1(stagePoint);
        t2._localX = t4._x;
        t2._localY = t4._y;
        t2._stageX = stagePoint._x;
        t2._stageY = stagePoint._y;
        t2._touchPointID = touch.get$touchPointID();
        t2._isPrimaryTouchPoint = touch.get$primaryTouchPoint();
        target.dispatchEvent$1(target, t2);
        touch.target = target;
      }
      if ($event.type === "touchstart") {
        this._canvas.focus();
        t2 = this._touches;
        t2.$indexSet(t2, identifier, touch);
        touchEventType = "touchBegin";
      } else
        touchEventType = null;
      if ($event.type === "touchend") {
        t2 = this._touches;
        t2.remove$1(t2, identifier);
        touchEventType = "touchEnd";
      }
      if ($event.type === "touchcancel") {
        t2 = this._touches;
        t2.remove$1(t2, identifier);
        touchEventType = "touchCancel";
      }
      if ($event.type === "touchmove")
        touchEventType = "touchMove";
      if (touchEventType != null && t3) {
        t2 = this._touchEvent;
        t2._reset$2(touchEventType, true);
        t3 = target.globalToLocal$1(stagePoint);
        t2._localX = t3._x;
        t2._localY = t3._y;
        t2._stageX = stagePoint._x;
        t2._stageY = stagePoint._y;
        t2._touchPointID = touch.get$touchPointID();
        t2._isPrimaryTouchPoint = touch.get$primaryTouchPoint();
        target.dispatchEvent$1(target, t2);
      }
    }
  },
  get$_onTouchEvent: function() {
    return new H.BoundClosure$1(this, Z.Stage.prototype._onTouchEvent$1, null, "_onTouchEvent$1");
  },
  _onKeyEvent$1: function($event) {
    var t1 = J.getInterceptor$x($event);
    if (t1.get$keyCode($event) === 8)
      t1.preventDefault$0($event);
    return;
  },
  get$_onKeyEvent: function() {
    return new H.BoundClosure$1(this, Z.Stage.prototype._onKeyEvent$1, null, "_onKeyEvent$1");
  },
  Stage$5: function($name, canvas, sourceWidth, sourceHeight, frameRate) {
    var t1, t2;
    t1 = J.getInterceptor(canvas);
    if (typeof canvas !== "object" || canvas === null || !t1.$isCanvasElement)
      throw H.wrapException(new P.ArgumentError("The canvas argument is not a CanvasElement"));
    if (canvas.tabIndex === -1)
      canvas.tabIndex = 0;
    if (J.get$outline$x(canvas.style) === "")
      J.set$outline$x(canvas.style, "none");
    this._stagexl$_name = $name;
    this._canvas = canvas;
    this._context = canvas.getContext("2d");
    this._sourceWidth = canvas.width;
    this._sourceHeight = canvas.height;
    this._frameRate = 30;
    this._canvasWidth = -1;
    this._canvasHeight = -1;
    this._contentRectangle = new Z.Rectangle0(0, 0, 0, 0);
    this._clientTransformation = Z.Matrix$fromIdentity();
    this._stageTransformation = Z.Matrix$fromIdentity();
    this._updateCanvasSize$0();
    this._renderLoop = null;
    t1 = new Z.Juggler(null, null, 0);
    t1._firstAnimatableLink = new Z._AnimatableLink(null, null);
    t1._lastAnimatableLink = t1._firstAnimatableLink;
    this._juggler = t1;
    this._renderState = Z.RenderState$fromCanvasRenderingContext2D(this._context, null);
    this._stageRenderMode = "auto";
    this._stageScaleMode = "showAll";
    this._stageAlign = "";
    this._mouseButtons = [new Z._MouseButton(null, false, 0, 0, "mouseDown", "mouseUp", "click", "doubleClick"), new Z._MouseButton(null, false, 0, 0, "middleMouseDown", "middleMouseUp", "middleClick", "middleClick"), new Z._MouseButton(null, false, 0, 0, "rightMouseDown", "rightMouseUp", "rightClick", "rightClick")];
    this._mouseCursor = "arrow";
    this._mouseTarget = null;
    this._mousePosition = new Z.Point(0, 0);
    t1 = new Z.MouseEvent(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    t1._reset$2("click", true);
    t1._reset$2("click", true);
    this._mouseEvent = t1;
    $.get$Mouse__onMouseCursorChanged().listen$1(this.get$_onMouseCursorChanged());
    t1 = C.EventStreamProvider_mousedown.forElement$1(this._canvas);
    t2 = this.get$_onMouseEvent();
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t2), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = C.EventStreamProvider_mouseup.forElement$1(this._canvas);
    t1 = this.get$_onMouseEvent();
    t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t1), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
    t1 = C.EventStreamProvider_mousemove.forElement$1(this._canvas);
    t2 = this.get$_onMouseEvent();
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t2), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = C.EventStreamProvider_mouseout.forElement$1(this._canvas);
    t1 = this.get$_onMouseEvent();
    t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t1), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
    t1 = C._CustomEventStreamProvider__determineMouseWheelEventType.forElement$1(this._canvas);
    t2 = this.get$_onMouseWheelEvent();
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t2), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    this._touches = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, Z._Touch);
    t2 = new Z.TouchEvent(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    t2._reset$2("touchBegin", true);
    t2._reset$2("touchBegin", true);
    this._touchEvent = t2;
    $.get$Multitouch__onInputModeChanged().listen$1(this.get$_onMultitouchInputModeChanged());
    this._onMultitouchInputModeChanged$1(null);
    t2 = C.EventStreamProvider_keydown.forElement$1(this._canvas);
    t1 = this.get$_onKeyEvent();
    t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t1), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
    t1 = C.EventStreamProvider_keyup.forElement$1(this._canvas);
    t2 = this.get$_onKeyEvent();
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t2), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = C.EventStreamProvider_keypress.forElement$1(this._canvas);
    t1 = this.get$_onKeyEvent();
    t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t1), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
  },
  $isStage: true,
  static: {
"": "Stage_autoHiDpi,Stage_resizeEvent",
Stage$: function($name, canvas, sourceWidth, sourceHeight, frameRate) {
  var t1, t2;
  t1 = P.List_List(null, Z.DisplayObject);
  H.setRuntimeTypeInfo(t1, [Z.DisplayObject]);
  t2 = $.DisplayObject__nextID;
  $.DisplayObject__nextID = t2 + 1;
  t2 = new Z.Stage(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, [], t1, true, true, false, true, true, 0, t2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, true, false, null, null, null, false, null, null, null, "", null, Z.Matrix$fromIdentity(), Z.Matrix$fromIdentity(), true, null, null);
  t2.Stage$5($name, canvas, sourceWidth, sourceHeight, frameRate);
  return t2;
}}

},

Stage__onMultitouchInputModeChanged_closure: {"": "Closure;",
  call$1: function(s) {
    return s.cancel$0();
  },
  $is_args1: true
},

RenderLoop: {"": "Object;_juggler,_stages,_renderTime,_requestAnimationFrameCallback,_invalidate,_enterFrameEvent,_exitFrameEvent,_renderEvent",
  _onAnimationFrame$1: function(currentTime) {
    var t1, t2, deltaTime, deltaTimeSec, currentTimeSec, i;
    t1 = window;
    t2 = this._requestAnimationFrameCallback;
    C.Window_methods._ensureRequestAnimationFrame$0(t1);
    C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(t2));
    currentTime = J.toDouble$0$n(currentTime);
    if (this._renderTime === -1)
      this._renderTime = currentTime;
    if (this._renderTime > currentTime)
      this._renderTime = currentTime;
    deltaTime = currentTime - this._renderTime;
    deltaTimeSec = deltaTime / 1000;
    currentTimeSec = currentTime / 1000;
    if (deltaTime >= 1) {
      this._renderTime = currentTime;
      this._enterFrameEvent._passedTime = deltaTimeSec;
      t1 = $.get$_enterFrameEventIndex();
      t1.dispatchEvent$1(t1, this._enterFrameEvent);
      this._juggler.advanceTime$1(deltaTimeSec);
      for (i = 0; t1 = this._stages, i < t1.length; ++i)
        t1[i]._juggler.advanceTime$1(deltaTimeSec);
      if (this._invalidate) {
        this._invalidate = false;
        t1 = $.get$_renderEventIndex();
        t1.dispatchEvent$1(t1, this._renderEvent);
      }
      for (i = 0; t1 = this._stages, i < t1.length; ++i)
        t1[i].materialize$2(currentTimeSec, deltaTimeSec);
      t1 = $.get$_exitFrameEventIndex();
      t1.dispatchEvent$1(t1, this._exitFrameEvent);
    }
  },
  get$_onAnimationFrame: function() {
    return new H.BoundClosure$1(this, Z.RenderLoop.prototype._onAnimationFrame$1, null, "_onAnimationFrame$1");
  },
  addStage$1: function(stage) {
    var t1 = stage._renderLoop;
    if (t1 != null)
      t1.removeStage$1(stage);
    this._stages.push(stage);
    stage._renderLoop = this;
  },
  removeStage$1: function(stage) {
    if (stage._renderLoop === this) {
      C.JSArray_methods.remove$1(this._stages, stage);
      stage._renderLoop = null;
    }
  },
  RenderLoop$0: function() {
    var t1, t2;
    t1 = new Z.Juggler(null, null, 0);
    t1._firstAnimatableLink = new Z._AnimatableLink(null, null);
    t1._lastAnimatableLink = t1._firstAnimatableLink;
    this._juggler = t1;
    t1 = P.List_List(null, Z.Stage);
    H.setRuntimeTypeInfo(t1, [Z.Stage]);
    this._stages = t1;
    this._renderTime = -1;
    this._invalidate = false;
    t1 = new Z.EnterFrameEvent(0, null, null, null, null, null, null, null);
    t1._reset$2("enterFrame", false);
    this._enterFrameEvent = t1;
    t1 = new Z.ExitFrameEvent(null, null, null, null, null, null, null);
    t1._reset$2("exitFrame", false);
    this._exitFrameEvent = t1;
    t1 = new Z.RenderEvent(null, null, null, null, null, null, null);
    t1._reset$2("render", false);
    this._renderEvent = t1;
    this._requestAnimationFrameCallback = this.get$_onAnimationFrame();
    t1 = window;
    t2 = this._requestAnimationFrameCallback;
    C.Window_methods._ensureRequestAnimationFrame$0(t1);
    C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(t2));
  },
  static: {
RenderLoop$: function() {
  var t1 = new Z.RenderLoop(null, null, null, null, null, null, null, null);
  t1.RenderLoop$0();
  return t1;
}}

},

_ContextState: {"": "Object;matrix,alpha,compositeOperation,_nextContextState",
  get$nextContextState: function() {
    if (this._nextContextState == null)
      this._nextContextState = new Z._ContextState(Z.Matrix$fromIdentity(), 1, "source-over", null);
    return this._nextContextState;
  }
},

RenderState: {"": "Object;_context,_currentTime,_deltaTime,_firstContextState,_currentContextState",
  reset$3: function(_, matrix, currentTime, deltaTime) {
    var fcsm, t1, t2;
    this._currentTime = currentTime;
    this._deltaTime = deltaTime;
    this._currentContextState = this._firstContextState;
    fcsm = this._firstContextState.matrix;
    fcsm.copyFrom$1(matrix);
    t1 = this._context;
    t1.setTransform(1, 0, 0, 1, 0, 0);
    t2 = t1.canvas;
    t1.clearRect(0, 0, t2.width, t2.height);
    t1.setTransform(fcsm._a, fcsm._b, fcsm._c, fcsm._d, fcsm._tx, fcsm._ty);
    t1.globalAlpha = 1;
    t1.globalCompositeOperation = "source-over";
  },
  renderDisplayObject$1: function(displayObject) {
    var matrix, alpha, composite, cs1, cs2, nextMatrix, nextAlpha, nextCompositeOperation, t1;
    matrix = displayObject.get$_transformationMatrix();
    alpha = displayObject._alpha;
    composite = displayObject._compositeOperation;
    cs1 = this._currentContextState;
    cs2 = cs1.get$nextContextState();
    this._currentContextState = cs2;
    nextMatrix = cs2.matrix;
    nextAlpha = cs1.alpha * alpha;
    nextCompositeOperation = cs1.compositeOperation;
    nextMatrix.copyFromAndConcat$2(matrix, cs1.matrix);
    cs2.alpha = nextAlpha;
    cs2.compositeOperation = nextCompositeOperation;
    t1 = this._context;
    t1.setTransform(nextMatrix._a, nextMatrix._b, nextMatrix._c, nextMatrix._d, nextMatrix._tx, nextMatrix._ty);
    t1.globalCompositeOperation = nextCompositeOperation;
    t1.globalAlpha = nextAlpha;
    displayObject.render$1(this);
    this._currentContextState = cs1;
  },
  RenderState$fromCanvasRenderingContext2D$2: function(context, matrix) {
    var fcsm, t1;
    this._firstContextState = new Z._ContextState(Z.Matrix$fromIdentity(), 1, "source-over", null);
    this._currentContextState = this._firstContextState;
    fcsm = this._firstContextState.matrix;
    t1 = this._context;
    t1.setTransform(fcsm._a, fcsm._b, fcsm._c, fcsm._d, fcsm._tx, fcsm._ty);
    t1.globalAlpha = 1;
    t1.globalCompositeOperation = "source-over";
  },
  static: {
RenderState$fromCanvasRenderingContext2D: function(context, matrix) {
  var t1 = new Z.RenderState(context, 0, 0, null, null);
  t1.RenderState$fromCanvasRenderingContext2D$2(context, matrix);
  return t1;
}}

},

BroadcastEvent: {"": "Event;",
  get$captures: function() {
    return false;
  }
},

EnterFrameEvent: {"": "BroadcastEvent;_passedTime,_type,_bubbles,_eventPhase,_stagexl$_target,_currentTarget,_stopsPropagation,_stopsImmediatePropagation"},

ExitFrameEvent: {"": "BroadcastEvent;_type,_bubbles,_eventPhase,_stagexl$_target,_currentTarget,_stopsPropagation,_stopsImmediatePropagation"},

RenderEvent: {"": "BroadcastEvent;_type,_bubbles,_eventPhase,_stagexl$_target,_currentTarget,_stopsPropagation,_stopsImmediatePropagation"},

_BroadcastEventIndex: {"": "Object;_eventStreams",
  dispatchEvent$1: function(_, $event) {
    var eventStreams, eventStreamsLength, i, eventStream, t1;
    eventStreams = this._eventStreams;
    eventStreamsLength = eventStreams.length;
    for (i = 0; i < eventStreamsLength; ++i) {
      if (i < 0 || i >= eventStreams.length)
        throw H.ioore(eventStreams, i);
      eventStream = eventStreams[i];
      if (eventStream._subscriptions.length > 0) {
        t1 = eventStream._stagexl$_target;
        $event._stagexl$_target = t1;
        $event._currentTarget = t1;
        $event._eventPhase = 2;
        $event._stopsPropagation = false;
        $event._stopsImmediatePropagation = false;
        eventStream.dispatchEvent$1(eventStream, $event);
      } else {
        C.JSArray_methods.removeAt$1(eventStreams, i);
        --eventStreamsLength;
        --i;
      }
    }
  }
},

Event: {"": "Object;_type,_bubbles,_eventPhase,_stagexl$_target,_currentTarget,_stopsPropagation,_stopsImmediatePropagation",
  _reset$2: function(type, bubbles) {
    this._type = type;
    this._bubbles = bubbles;
    this._eventPhase = 2;
    this._stagexl$_target = null;
    this._currentTarget = null;
    this._stopsPropagation = false;
    this._stopsImmediatePropagation = false;
  },
  get$captures: function() {
    return true;
  },
  get$target: function(_) {
    return this._stagexl$_target;
  },
  static: {
"": "Event_ADDED,Event_ADDED_TO_STAGE,Event_ENTER_FRAME,Event_EXIT_FRAME,Event_REMOVED,Event_REMOVED_FROM_STAGE,Event_RESIZE,Event_RENDER,Event_OKAY,Event_CANCEL,Event_CHANGE,Event_CONFIRM,Event_SCROLL,Event_OPEN,Event_CLOSE,Event_SELECT,Event_COMPLETE,Event_PROGRESS",
}

},

EventDispatcher: {"": "Object;",
  dispatchEvent$1: function(_, $event) {
    this._dispatchEventInternal$4($event, this, this, 2);
  },
  _hasEventListener$3: function(eventType, capturingPhase, bubblingPhase) {
    var t1, eventStream;
    if (capturingPhase && this._captureEventStreams != null) {
      t1 = this._captureEventStreams;
      eventStream = t1.$index(t1, eventType);
      if (eventStream != null && eventStream.get$_hasSubscriptions())
        return true;
    }
    if (bubblingPhase === true && this._eventStreams != null) {
      t1 = this._eventStreams;
      eventStream = t1.$index(t1, eventType);
      if (eventStream != null && eventStream.get$_hasSubscriptions())
        return true;
    }
    return false;
  },
  _getEventStream$2: function(eventType, useCapture) {
    var eventStreams;
    if (useCapture) {
      if (this._captureEventStreams == null)
        this._captureEventStreams = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, Z._EventStream0);
    } else if (this._eventStreams == null)
      this._eventStreams = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, Z._EventStream0);
    eventStreams = useCapture ? this._captureEventStreams : this._eventStreams;
    return eventStreams.putIfAbsent$2(eventType, new Z.EventDispatcher__getEventStream_closure(this, eventType, useCapture));
  },
  _dispatchEventInternal$4: function($event, target, currentTarget, eventPhase) {
    var eventStreams, eventStream;
    eventStreams = eventPhase === 1 ? this._captureEventStreams : this._eventStreams;
    if (eventStreams == null)
      return;
    eventStream = eventStreams.$index(eventStreams, $event._type);
    if (eventStream == null)
      return;
    $event._stagexl$_target = target;
    $event._currentTarget = currentTarget;
    $event._eventPhase = eventPhase;
    $event._stopsPropagation = false;
    $event._stopsImmediatePropagation = false;
    J.dispatchEvent$1$x(eventStream, $event);
  }
},

EventDispatcher__getEventStream_closure: {"": "Closure;this_0,eventType_1,useCapture_2",
  call$0: function() {
    var t1 = new Z._EventStream0(this.this_0, this.eventType_1, this.useCapture_2, []);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  }
},

_EventStream0: {"": "Stream;_stagexl$_target,_stagexl$_eventType,_stagexl$_useCapture,_subscriptions",
  get$isBroadcast: function() {
    return true;
  },
  get$_hasSubscriptions: function() {
    return this._subscriptions.length > 0;
  },
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var eventStreamSubscription = new Z._EventStreamSubscription0(0, false, this, onData);
    H.setRuntimeTypeInfo(eventStreamSubscription, [H.getRuntimeTypeArgument(this, "_EventStream0", 0)]);
    this._subscriptions.push(eventStreamSubscription);
    if (!this._stagexl$_useCapture)
      switch (this._stagexl$_eventType) {
        case "enterFrame":
          $.get$_enterFrameEventIndex()._eventStreams.push(this);
          break;
        case "exitFrame":
          $.get$_exitFrameEventIndex()._eventStreams.push(this);
          break;
        case "render":
          $.get$_renderEventIndex()._eventStreams.push(this);
          break;
        default:
      }
    return eventStreamSubscription;
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, false, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, false, onDone, onError);
  },
  cancelSubscription$1: function(eventStreamSubscription) {
    var subscriptions, i, t1, subscription;
    if (eventStreamSubscription._canceled)
      return;
    subscriptions = [];
    for (i = 0; t1 = this._subscriptions, i < t1.length; ++i) {
      subscription = t1[i];
      if (subscription === eventStreamSubscription)
        subscription._canceled = true;
      else
        subscriptions.push(subscription);
    }
    this._subscriptions = subscriptions;
  },
  dispatchEvent$1: function(_, $event) {
    var subscriptions, subscriptionsLength, i, subscription;
    subscriptions = this._subscriptions;
    subscriptionsLength = subscriptions.length;
    for (i = 0; i < subscriptionsLength; ++i) {
      if (i >= subscriptions.length)
        throw H.ioore(subscriptions, i);
      subscription = subscriptions[i];
      if (!subscription._canceled)
        subscription._stagexl$_onData$1($event);
    }
  },
  $asStream: null
},

EventStreamProvider0: {"": "Object;_stagexl$_eventType"},

_EventStreamSubscription0: {"": "StreamSubscription;_stagexl$_pauseCount,_canceled,_eventStream,_stagexl$_onData",
  _stagexl$_onData$1: function(arg0) {
    return this._stagexl$_onData.call$1(arg0);
  },
  cancel$0: function() {
    this._eventStream.cancelSubscription$1(this);
  },
  $asStreamSubscription: null
},

MouseEvent: {"": "Event;_localX,_localY,_stageX,_stageY,_deltaX,_deltaY,_buttonDown,_altKey,_controlKey,_ctrlKey,_shiftKey,_clickCount,_type,_bubbles,_eventPhase,_stagexl$_target,_currentTarget,_stopsPropagation,_stopsImmediatePropagation",
  _reset$2: function(type, bubbles) {
    Z.Event.prototype._reset$2.call(this, type, bubbles);
    this._localY = 0;
    this._localX = 0;
    this._stageY = 0;
    this._stageX = 0;
    this._deltaY = 0;
    this._deltaX = 0;
    this._buttonDown = false;
    this._altKey = false;
    this._controlKey = false;
    this._ctrlKey = false;
    this._shiftKey = false;
    this._clickCount = 0;
  },
  static: {
"": "MouseEvent_CLICK,MouseEvent_DOUBLE_CLICK,MouseEvent_MOUSE_DOWN,MouseEvent_MOUSE_UP,MouseEvent_MOUSE_MOVE,MouseEvent_MOUSE_OUT,MouseEvent_MOUSE_OVER,MouseEvent_MOUSE_WHEEL,MouseEvent_MIDDLE_CLICK,MouseEvent_MIDDLE_MOUSE_DOWN,MouseEvent_MIDDLE_MOUSE_UP,MouseEvent_RIGHT_CLICK,MouseEvent_RIGHT_MOUSE_DOWN,MouseEvent_RIGHT_MOUSE_UP,MouseEvent_CONTEXT_MENU,MouseEvent_ROLL_OUT,MouseEvent_ROLL_OVER",
}

},

TouchEvent: {"": "Event;_touchPointID,_isPrimaryTouchPoint,_localX,_localY,_stageX,_stageY,_altKey,_controlKey,_ctrlKey,_shiftKey,_pressure,_sizeX,_sizeY,_type,_bubbles,_eventPhase,_stagexl$_target,_currentTarget,_stopsPropagation,_stopsImmediatePropagation",
  _reset$2: function(type, bubbles) {
    Z.Event.prototype._reset$2.call(this, type, bubbles);
    this._touchPointID = 0;
    this._isPrimaryTouchPoint = false;
    this._localY = 0;
    this._localX = 0;
    this._stageY = 0;
    this._stageX = 0;
    this._altKey = false;
    this._controlKey = false;
    this._ctrlKey = false;
    this._shiftKey = false;
    this._pressure = 1;
    this._sizeX = 0;
    this._sizeY = 0;
  },
  get$touchPointID: function() {
    return this._touchPointID;
  },
  static: {
"": "TouchEvent_TOUCH_BEGIN,TouchEvent_TOUCH_END,TouchEvent_TOUCH_CANCEL,TouchEvent_TOUCH_MOVE,TouchEvent_TOUCH_OVER,TouchEvent_TOUCH_OUT,TouchEvent_TOUCH_ROLL_OUT,TouchEvent_TOUCH_ROLL_OVER,TouchEvent_TOUCH_TAP",
}

},

Matrix: {"": "Object;_a,_b,_c,_d,_tx,_ty,_det",
  clone$0: function(_) {
    return Z.Matrix$(this._a, this._b, this._c, this._d, this._tx, this._ty);
  },
  transformPoint$1: function(p) {
    var x, y;
    x = J.toDouble$0$n(p._x);
    y = J.toDouble$0$n(p._y);
    return new Z.Point(x * this._a + y * this._c + this._tx, x * this._b + y * this._d + this._ty);
  },
  _transformHtmlPoint$1: function(p) {
    var x, y, t1, t2;
    x = p.get$x(p);
    x.toString;
    y = p.y;
    y.toString;
    t1 = this._a;
    if (typeof x !== "number")
      throw x.$mul();
    t2 = this._c;
    if (typeof y !== "number")
      throw y.$mul();
    return new Z.Point(x * t1 + y * t2 + this._tx, x * this._b + y * this._d + this._ty);
  },
  concat$1: function(matrix) {
    var a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2, ty2, det2;
    a1 = this._a;
    b1 = this._b;
    c1 = this._c;
    d1 = this._d;
    tx1 = this._tx;
    ty1 = this._ty;
    det1 = this._det;
    a2 = matrix._a;
    b2 = matrix._b;
    c2 = matrix._c;
    d2 = matrix._d;
    tx2 = matrix._tx;
    ty2 = matrix._ty;
    det2 = matrix._det;
    this._a = a1 * a2 + b1 * c2;
    this._b = a1 * b2 + b1 * d2;
    this._c = c1 * a2 + d1 * c2;
    this._d = c1 * b2 + d1 * d2;
    this._tx = tx1 * a2 + ty1 * c2 + tx2;
    this._ty = tx1 * b2 + ty1 * d2 + ty2;
    this._det = det1 * det2;
  },
  identity$0: function() {
    this._a = 1;
    this._b = 0;
    this._c = 0;
    this._d = 1;
    this._tx = 0;
    this._ty = 0;
    this._det = 1;
  },
  invert$0: function() {
    var a, b, c, d, tx, ty, det;
    a = this._a;
    b = this._b;
    c = this._c;
    d = this._d;
    tx = this._tx;
    ty = this._ty;
    det = this._det;
    this._a = d / det;
    this._b = -(b / det);
    this._c = -(c / det);
    this._d = a / det;
    this._tx = -(this._a * tx + this._c * ty);
    this._ty = -(this._b * tx + this._d * ty);
    this._det = 1 / det;
  },
  scale$2: function(_, scaleX, scaleY) {
    this._a = this._a * scaleX;
    this._b = this._b * scaleY;
    this._c = this._c * scaleX;
    this._d = this._d * scaleY;
    this._tx = this._tx * scaleX;
    this._ty = this._ty * scaleY;
    this._det = this._det * scaleX * scaleY;
  },
  setTo$6: function(a, b, c, d, tx, ty) {
    this._a = a;
    this._b = b;
    this._c = c;
    this._d = d;
    this._tx = tx;
    this._ty = ty;
    this._det = this._a * this._d - this._b * this._c;
  },
  copyFrom$1: function(matrix) {
    this._a = matrix._a;
    this._b = matrix._b;
    this._c = matrix._c;
    this._d = matrix._d;
    this._tx = matrix._tx;
    this._ty = matrix._ty;
    this._det = matrix._det;
  },
  copyFromAndConcat$2: function(copyMatrix, concatMatrix) {
    var a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2, ty2, det2;
    a1 = copyMatrix._a;
    b1 = copyMatrix._b;
    c1 = copyMatrix._c;
    d1 = copyMatrix._d;
    tx1 = copyMatrix._tx;
    ty1 = copyMatrix._ty;
    det1 = copyMatrix._det;
    a2 = concatMatrix._a;
    b2 = concatMatrix._b;
    c2 = concatMatrix._c;
    d2 = concatMatrix._d;
    tx2 = concatMatrix._tx;
    ty2 = concatMatrix._ty;
    det2 = concatMatrix._det;
    this._a = a1 * a2 + b1 * c2;
    this._b = a1 * b2 + b1 * d2;
    this._c = c1 * a2 + d1 * c2;
    this._d = c1 * b2 + d1 * d2;
    this._tx = tx1 * a2 + ty1 * c2 + tx2;
    this._ty = tx1 * b2 + ty1 * d2 + ty2;
    this._det = det1 * det2;
  },
  static: {
Matrix$: function(a, b, c, d, tx, ty) {
  return new Z.Matrix(a, b, c, d, tx, ty, a * d - b * c);
},

Matrix$fromIdentity: function() {
  return new Z.Matrix(1, 0, 0, 1, 0, 0, 1);
}}

},

Point: {"": "Object;_x,_y",
  clone$0: function(_) {
    return new Z.Point(this._x, this._y);
  },
  toString$0: function(_) {
    return "Point [x=" + H.S(this._x) + ", y=" + H.S(this._y) + "]";
  },
  get$x: function(_) {
    return this._x;
  },
  get$y: function(_) {
    return this._y;
  },
  get$length: function(_) {
    var t1, t2;
    t1 = this._x;
    if (typeof t1 !== "number")
      throw t1.$mul();
    t2 = this._y;
    if (typeof t2 !== "number")
      throw t2.$mul();
    return Math.sqrt(t1 * t1 + t2 * t2);
  },
  add$1: function(_, p) {
    var t1, t2, t3, t4;
    t1 = this._x;
    t2 = p.get$x(p);
    if (typeof t1 !== "number")
      throw t1.$add();
    t3 = this._y;
    t4 = p._y;
    if (typeof t3 !== "number")
      throw t3.$add();
    return new Z.Point(t1 + t2, t3 + t4);
  },
  equals$1: function(p) {
    var t1, t2;
    t1 = this._x;
    t2 = p._x;
    if (t1 == null ? t2 == null : t1 === t2) {
      t1 = this._y;
      t2 = p._y;
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  }
},

Rectangle0: {"": "Object;_x,_y,_stagexl$_width,_stagexl$_height",
  clone$0: function(_) {
    return new Z.Rectangle0(this._x, this._y, this._stagexl$_width, this._stagexl$_height);
  },
  toString$0: function(_) {
    return "Rectangle [x=" + H.S(this._x) + ", y=" + H.S(this._y) + ", width=" + H.S(this._stagexl$_width) + ", height=" + H.S(this._stagexl$_height) + "]";
  },
  get$x: function(_) {
    return this._x;
  },
  get$y: function(_) {
    return this._y;
  },
  get$size: function(_) {
    return new Z.Point(this._stagexl$_width, this._stagexl$_height);
  },
  set$size: function(_, value) {
    var t1 = J.getInterceptor$x(value);
    this._stagexl$_width = t1.get$x(value);
    this._stagexl$_height = t1.get$y(value);
  }
},

ObjectPool: {"": "Object;_pool,_valueFactory,_poolCount",
  _valueFactory$0: function() {
    return this._valueFactory.call$0();
  },
  pop$0: function() {
    var t1, t2;
    t1 = this._poolCount;
    if (t1 === 0)
      return this._valueFactory$0();
    else {
      this._poolCount = t1 - 1;
      t1 = this._pool;
      t2 = this._poolCount;
      if (t2 < 0 || t2 >= t1.length)
        throw H.ioore(t1, t2);
      return t1[t2];
    }
  },
  push$1: function(value) {
    var t1, t2, t3;
    t1 = this._poolCount;
    t2 = this._pool;
    t3 = t2.length;
    if (t1 === t3)
      t2.push(value);
    else {
      if (t1 < 0 || t1 >= t3)
        throw H.ioore(t2, t1);
      t2[t1] = value;
    }
    this._poolCount = this._poolCount + 1;
  }
},

closure: {"": "Closure;",
  call$0: function() {
    var t1 = P.List_List(null, Z.DisplayObject);
    H.setRuntimeTypeInfo(t1, [Z.DisplayObject]);
    return t1;
  }
},

closure0: {"": "Closure;",
  call$0: function() {
    var t1, ua;
    t1 = window.navigator.userAgent;
    t1.toString;
    ua = t1.toLowerCase();
    return C.JSString_methods.indexOf$1(ua, "iphone") >= 0 || C.JSString_methods.indexOf$1(ua, "ipad") >= 0 || C.JSString_methods.indexOf$1(ua, "ipod") >= 0 || C.JSString_methods.indexOf$1(ua, "android") >= 0 || C.JSString_methods.indexOf$1(ua, "webos") >= 0 || C.JSString_methods.indexOf$1(ua, "windows phone") >= 0;
  }
}}],
["stagexl_richtextfield", "package:stagexl_richtextfield/stagexl_richtextfield.dart", , A, {
_color2rgb: function(color) {
  var t1, t2, t3;
  t1 = C.JSInt_methods.$shr(color, 16);
  t2 = C.JSInt_methods.$shr(color, 8);
  t3 = C.JSInt_methods.$shr(color, 0);
  return "rgb(" + (t1 & 255) + "," + (t2 & 255) + "," + (t3 & 255) + ")";
},

_ensureNum: function(value) {
  if (typeof value === "number")
    return value;
  else
    throw H.wrapException(new P.ArgumentError("The supplied value (" + H.S(value) + ") is not a number."));
},

_ensureString: function(value) {
  return value;
},

_RichFontStyleMetrics: {"": "Object;fontStyle,ascent<,descent<,height",
  _RichFontStyleMetrics$1: function(fontStyle) {
    var text, block, div, t1, t2, exception;
    this.fontStyle = fontStyle;
    text = W._ElementFactoryProvider_createElement_tag("span", null);
    J.set$font$x(J.get$style$x(text), this.fontStyle);
    J.set$text$x(text, "Hg");
    block = W._ElementFactoryProvider_createElement_tag("div", null);
    J.set$display$x(J.get$style$x(block), "inline-block");
    J.set$width$x(J.get$style$x(block), "1px");
    J.set$height$x(J.get$style$x(block), "0px");
    div = W._ElementFactoryProvider_createElement_tag("div", null);
    J.append$1$x(div, block);
    J.append$1$x(div, text);
    document.body.appendChild(div);
    try {
      J.set$verticalAlign$x(J.get$style$x(block), "baseline");
      t1 = J.get$offsetTop$x(block);
      t2 = J.get$offsetTop$x(text);
      if (typeof t1 !== "number")
        throw t1.$sub();
      if (typeof t2 !== "number")
        throw H.iae(t2);
      this.ascent = t1 - t2;
      J.set$verticalAlign$x(J.get$style$x(block), "bottom");
      t2 = J.get$offsetTop$x(block);
      t1 = J.get$offsetTop$x(text);
      if (typeof t2 !== "number")
        throw t2.$sub();
      if (typeof t1 !== "number")
        throw H.iae(t1);
      this.height = t2 - t1;
      this.descent = this.height - this.ascent;
    } catch (exception) {
      H.unwrapException(exception);
    }
 finally {
      J.remove$0$ax(div);
    }
  },
  static: {
_RichFontStyleMetrics$: function(fontStyle) {
  var t1 = new A._RichFontStyleMetrics(null, 0, 0, 0);
  t1._RichFontStyleMetrics$1(fontStyle);
  return t1;
}}

},

RichTextField: {"": "InteractiveObject;_text,_rawText,_textFormats,presets,_autoSize,_wordWrap,_multiline,_background,_border,_parse,_backgroundColor,_borderColor,_maxChars,_width,_height,_textWidth,_textHeight,_textLineMetrics,parser,_refreshPending,_cacheAsBitmap,_cacheAsBitmapCanvas,doubleClickEnabled,mouseEnabled,tabEnabled,tabIndex,_stagexl$_id,_x,_y,_pivotX,_pivotY,_scaleX,_scaleY,_skewX,_skewY,_rotation,_alpha,_visible,_off,_mask,_cache,_cacheRectangle,_cacheDebugBorder,_filters,_shadow,_compositeOperation,_stagexl$_name,_parent,_tmpMatrix,_transformationMatrixPrivate,_transformationMatrixRefresh,_eventStreams,_captureEventStreams",
  parser$1: function(arg0) {
    return this.parser.call$1(arg0);
  },
  setFormat$3: function(setFormat, startIndex, endIndex) {
    var add, numFormats, i, t1, cur, f1, f2;
    add = J.clone$0$x(setFormat);
    if (J.$eq(startIndex, 0) && J.$eq(endIndex, -1)) {
      this._textFormats = [add];
      return;
    }
    add.set$startIndex(startIndex);
    add.endIndex = endIndex;
    numFormats = this._textFormats.length;
    for (i = 0; t1 = this._textFormats, i < numFormats; ++i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      cur = t1[i];
      if (J.$le$n(add.startIndex, cur.get$startIndex()))
        if (J.$ge$n(add.endIndex, cur.startIndex))
          if (!(J.$lt$n(add.endIndex, cur.endIndex) && !J.$eq(cur.endIndex, -1)))
            t1 = !J.$eq(add.endIndex, -1) && J.$eq(cur.endIndex, -1);
          else
            t1 = true;
        else
          t1 = false;
      else
        t1 = false;
      if (t1) {
        cur.startIndex = J.$add$ns(add.endIndex, 1);
        this._textFormats.push(add);
      } else {
        if (J.$gt$n(add.startIndex, cur.startIndex))
          if (J.$le$n(add.startIndex, cur.endIndex) || J.$eq(cur.endIndex, -1))
            if (!(J.$ge$n(add.endIndex, cur.endIndex) && !J.$eq(cur.endIndex, -1)))
              t1 = J.$eq(add.endIndex, -1) && J.$eq(cur.endIndex, -1);
            else
              t1 = true;
          else
            t1 = false;
        else
          t1 = false;
        if (t1) {
          cur.endIndex = J.$sub$n(add.startIndex, 1);
          this._textFormats.push(add);
        } else {
          if (J.$gt$n(add.startIndex, cur.startIndex))
            if (!(J.$lt$n(add.endIndex, cur.endIndex) && !J.$eq(add.endIndex, -1)))
              t1 = !J.$eq(add.endIndex, -1) && J.$eq(cur.endIndex, -1);
            else
              t1 = true;
          else
            t1 = false;
          if (t1) {
            f1 = cur.clone$0(cur);
            f2 = cur.clone$0(cur);
            f1.startIndex = cur.startIndex;
            f1.endIndex = J.$sub$n(add.startIndex, 1);
            f2.startIndex = J.$add$ns(add.endIndex, 1);
            f2.endIndex = cur.endIndex;
            C.JSArray_methods.removeAt$1(this._textFormats, i);
            this._textFormats.push(f1);
            this._textFormats.push(f2);
            this._textFormats.push(add);
          } else {
            if (J.$le$n(add.startIndex, cur.startIndex))
              t1 = J.$ge$n(add.endIndex, cur.endIndex) && !J.$eq(cur.endIndex, -1) || J.$eq(add.endIndex, -1);
            else
              t1 = false;
            if (t1) {
              C.JSArray_methods.removeAt$1(this._textFormats, i);
              this._textFormats.push(add);
            }
          }
        }
      }
    }
    H.IterableMixinWorkaround_sortList(t1, new A.RichTextField_setFormat_closure());
    this._refreshPending = (this._refreshPending | 2) >>> 0;
  },
  defaultParser$1: function(rawtext) {
    var t1, formatRanges;
    t1 = {};
    t1.pos_0 = 0;
    t1.action_1 = null;
    t1.newtext_2 = "";
    t1.arg_3 = null;
    formatRanges = [];
    H.IterableMixinWorkaround_forEach(J.split$1$s(rawtext, "{"), new A.RichTextField_defaultParser_closure(t1, formatRanges));
    this._text = t1.newtext_2;
    t1.base_4 = null;
    H.IterableMixinWorkaround_forEach(formatRanges, new A.RichTextField_defaultParser_closure0(t1, this));
  },
  get$defaultParser: function() {
    return new H.BoundClosure$1(this, A.RichTextField.prototype.defaultParser$1, null, "defaultParser$1");
  },
  _applyTextTagArg$2: function(arg, base) {
    var op, result;
    if (C.JSString_methods.contains$1("+-*/", J.getInterceptor$s(arg).substring$2(arg, 0, 1))) {
      op = C.JSString_methods.substring$2(arg, 0, 1);
      result = C.JSString_methods.contains$1(arg, "x") ? H.Primitives_parseInt(C.JSString_methods.substring$1(arg, 1), null, null) : H.Primitives_parseDouble(C.JSString_methods.substring$1(arg, 1), null);
      switch (op) {
        case "+":
          result = J.$add$ns(base, result);
          break;
        case "-":
          result = J.$sub$n(base, result);
          break;
        case "*":
          result = J.$mul$n(base, result);
          break;
        case "/":
          if (typeof base !== "number")
            throw base.$div();
          if (typeof result !== "number")
            throw H.iae(result);
          result = base / result;
          break;
        default:
      }
    } else
      result = C.JSString_methods.contains$1(arg, "x") ? H.Primitives_parseInt(arg, null, null) : H.Primitives_parseDouble(arg, null);
    return result;
  },
  set$text: function(_, value) {
    var t1 = J.replaceAll$2$s(value, "\r\n", "\n");
    this._text = H.stringReplaceAllUnchecked(t1, "\r", "\n");
    this._rawText = this._text;
    if (this._parse && value !== "") {
      t1 = this._textFormats;
      C.JSArray_methods.removeRange$2(t1, 1, t1.length);
      t1 = this._textFormats;
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      t1[0].set$endIndex(-1);
      this.parser$1(this._text);
    }
    this._refreshPending = (this._refreshPending | 3) >>> 0;
  },
  get$x: function(_) {
    this._refreshTextLineMetrics$0();
    return Z.DisplayObject.prototype.get$x.call(this, this);
  },
  getFormatAt$1: function(index) {
    return H.IterableMixinWorkaround_firstWhere(this._textFormats, new A.RichTextField_getFormatAt_closure(index), new A.RichTextField_getFormatAt_closure0(this));
  },
  hitTestInput$2: function(localX, localY) {
    if (localX >= 0 && localY >= 0 && localX < this._width && localY < this._height)
      return this;
    return;
  },
  render$1: function(renderState) {
    var renderContext, canvas;
    this._refreshTextLineMetrics$0();
    this._refreshCache$0();
    renderContext = renderState._context;
    if (this._cacheAsBitmap) {
      canvas = this._cacheAsBitmapCanvas;
      if (canvas != null)
        renderContext.drawImage(canvas, 0, 0, this._width, this._height);
    } else
      this._renderText$1(renderContext);
  },
  _getLineWidth$2: function(line, startIndex) {
    var t1, t2, canvasContext, t3, $arguments, t4, lineWidth, rtf, rtfEndIndex;
    t1 = J.getInterceptor$asx(line);
    t2 = t1.get$length(line);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    canvasContext = $.get$_dummyCanvasContext0();
    canvasContext.textAlign = "start";
    canvasContext.textBaseline = "alphabetic";
    canvasContext.setTransform(1, 0, 0, 1, 0, 0);
    t2 = new H.WhereIterable(this._textFormats, new A.RichTextField__getLineWidth_closure(startIndex, startIndex + t2));
    t2.$builtinTypeInfo = [null];
    t3 = J.get$iterator$ax(t2._iterable);
    $arguments = H.substitute(t2.$asWhereIterable, H.getRuntimeTypeInfo(t2));
    t4 = $arguments == null ? null : $arguments[0];
    t2 = new H.WhereIterator(t3, t2._f);
    t2.$builtinTypeInfo = [t4];
    t3 = t2._iterator;
    lineWidth = 0;
    for (; t2.moveNext$0();) {
      rtf = t3.get$current();
      canvasContext.font = rtf.get$_cssFontStyle();
      rtfEndIndex = J.$eq(rtf.endIndex, -1) ? t1.get$length(line) : J.$add$ns(J.$sub$n(rtf.endIndex, startIndex), 1);
      t4 = canvasContext.measureText(t1.substring$2(line, P.max(J.$sub$n(rtf.startIndex, startIndex), 0), P.min(rtfEndIndex, t1.get$length(line)))).width;
      if (typeof t4 !== "number")
        throw H.iae(t4);
      lineWidth += t4;
    }
    return lineWidth;
  },
  _refreshTextLineMetrics$0: function() {
    var t1, t2, firstFormat, textFormatIndent, textFormatLeftMargin, textFormatRightMargin, availableWidth, paragraphLines, canvasContext, startIndex, checkLine, validLine, lineWidth, lineIndent, paragraph, t3, word, t4, checkLine0, lineHeights, line, textLineMetrics, lineIndex, lineFormat, $arguments, textFormatSize, textFormatTopMargin, textFormatBottomMargin, textFormatLeading, textFormatAlign, fontStyle, fontStyleMetrics, fontStyleMetricsAscent, fontStyleMetricsDescent, indent, offsetX, offsetY, width, offsetX0, autoWidth, autoHeight;
    t1 = this._refreshPending;
    if ((t1 & 1) === 0)
      return;
    else
      this._refreshPending = t1 & 254;
    t1 = this._textLineMetrics;
    C.JSArray_methods.set$length(t1, 0);
    t2 = this._textFormats;
    if (0 >= t2.length)
      throw H.ioore(t2, 0);
    firstFormat = t2[0];
    textFormatIndent = A._ensureNum(firstFormat.get$indent());
    textFormatLeftMargin = A._ensureNum(firstFormat.leftMargin);
    textFormatRightMargin = A._ensureNum(firstFormat.rightMargin);
    availableWidth = this._width - textFormatLeftMargin - textFormatRightMargin;
    paragraphLines = P.List_List(null, J.JSInt);
    H.setRuntimeTypeInfo(paragraphLines, [J.JSInt]);
    canvasContext = $.get$_dummyCanvasContext0();
    canvasContext.textAlign = "start";
    canvasContext.textBaseline = "alphabetic";
    canvasContext.setTransform(1, 0, 0, 1, 0, 0);
    for (t2 = this._text.split("\n"), t2 = new H.ListIterator(t2, t2.length, 0, null), startIndex = 0, checkLine = "", validLine = "", lineWidth = 0, lineIndent = 0; t2.moveNext$0();) {
      paragraph = t2._current;
      paragraphLines.push(t1.length);
      if (!this._wordWrap) {
        t1.push(new A.RichTextLineMetrics(paragraph, startIndex, 0, 0, 0, 0, 0, 0, 0, 0));
        t3 = J.get$length$asx(paragraph);
        if (typeof t3 !== "number")
          throw t3.$add();
        startIndex += t3 + 1;
      } else {
        for (t3 = J.split$1$s(paragraph, " "), t3 = new H.ListIterator(t3, t3.length, 0, null), lineIndent = textFormatIndent, checkLine = null; t3.moveNext$0(); validLine = checkLine, checkLine = checkLine0) {
          word = t3._current;
          t4 = checkLine == null;
          checkLine0 = t4 ? word : H.S(checkLine) + " " + H.S(word);
          lineWidth = this._getLineWidth$2(checkLine0, startIndex);
          if (lineIndent + lineWidth >= availableWidth) {
            if (t4) {
              t1.push(new A.RichTextLineMetrics(checkLine0, startIndex, 0, 0, 0, 0, 0, 0, 0, 0));
              t4 = J.get$length$asx(checkLine0);
              if (typeof t4 !== "number")
                throw t4.$add();
              startIndex += t4 + 1;
              checkLine0 = null;
            } else {
              t1.push(new A.RichTextLineMetrics(checkLine, startIndex, 0, 0, 0, 0, 0, 0, 0, 0));
              t4 = J.get$length$asx(checkLine);
              if (typeof t4 !== "number")
                throw t4.$add();
              startIndex += t4 + 1;
              checkLine0 = word;
            }
            lineIndent = 0;
          }
        }
        if (checkLine != null) {
          t1.push(new A.RichTextLineMetrics(checkLine, startIndex, 0, 0, 0, 0, 0, 0, 0, 0));
          t3 = J.get$length$asx(checkLine);
          if (typeof t3 !== "number")
            throw t3.$add();
          startIndex += t3 + 1;
        }
      }
    }
    this._textWidth = 0;
    this._textHeight = 0;
    for (lineHeights = 0, line = 0; line < t1.length; ++line) {
      textLineMetrics = t1[line];
      lineIndex = textLineMetrics._textIndex;
      t2 = J.get$length$asx(textLineMetrics._text);
      if (typeof t2 !== "number")
        throw t2.$add();
      lineFormat = H.IterableMixinWorkaround_firstWhere(this._textFormats, new A.RichTextField__refreshTextLineMetrics_closure(lineIndex), null);
      t2 = new H.WhereIterable(this._textFormats, new A.RichTextField__refreshTextLineMetrics_closure0(lineIndex, t2 + lineIndex));
      t2.$builtinTypeInfo = [null];
      t3 = J.get$iterator$ax(t2._iterable);
      $arguments = H.substitute(t2.$asWhereIterable, H.getRuntimeTypeInfo(t2));
      t4 = $arguments == null ? null : $arguments[0];
      t2 = new H.WhereIterator(t3, t2._f);
      t2.$builtinTypeInfo = [t4];
      t3 = t2._iterator;
      textFormatSize = 0;
      for (; t2.moveNext$0();)
        textFormatSize = P.max(A._ensureNum(J.get$size$x(t3.get$current())), textFormatSize);
      textFormatTopMargin = A._ensureNum(lineFormat.get$topMargin());
      textFormatBottomMargin = A._ensureNum(lineFormat.bottomMargin);
      textFormatLeading = A._ensureNum(lineFormat.leading);
      textFormatAlign = A._ensureString(lineFormat.align);
      fontStyle = lineFormat.get$_cssFontStyle();
      if (!$.get$_fontStyleMetrics().containsKey$1(fontStyle)) {
        t2 = $.get$_fontStyleMetrics();
        t2.$indexSet(t2, fontStyle, A._RichFontStyleMetrics$(fontStyle));
      }
      t2 = $.get$_fontStyleMetrics();
      fontStyleMetrics = t2.$index(t2, fontStyle);
      fontStyleMetricsAscent = A._ensureNum(fontStyleMetrics.get$ascent());
      fontStyleMetricsDescent = A._ensureNum(fontStyleMetrics.get$descent());
      canvasContext.font = fontStyle;
      indent = C.JSArray_methods.contains$1(paragraphLines, line) ? textFormatIndent : 0;
      offsetX = textFormatLeftMargin + indent;
      t2 = textFormatTopMargin + textFormatSize;
      offsetY = t2 + lineHeights;
      lineHeights += t2;
      width = this._getLineWidth$2(textLineMetrics._text, lineIndex);
      switch (textFormatAlign) {
        case "center":
        case "justify":
          offsetX0 = offsetX + (availableWidth - width) / 2;
          break;
        case "right":
        case "end":
          offsetX0 = offsetX + (availableWidth - width);
          break;
        default:
          offsetX0 = offsetX;
      }
      textLineMetrics._stagexl_richtextfield$_x = offsetX0;
      textLineMetrics._stagexl_richtextfield$_y = offsetY;
      textLineMetrics._width = width;
      textLineMetrics._height = textFormatSize;
      textLineMetrics._ascent = fontStyleMetricsAscent;
      textLineMetrics._descent = fontStyleMetricsDescent;
      textLineMetrics._leading = textFormatLeading;
      textLineMetrics._indent = indent;
      this._textWidth = P.max(this._textWidth, offsetX + width + textFormatRightMargin);
      this._textHeight = offsetY + fontStyleMetricsDescent + textFormatBottomMargin;
    }
    autoWidth = this._wordWrap ? this._width : C.JSNumber_methods.toInt$0(Math.ceil(this._textWidth));
    autoHeight = C.JSNumber_methods.toInt$0(Math.ceil(this._textHeight));
    t1 = this._width;
    if (t1 !== autoWidth || this._height !== autoHeight)
      switch (this._autoSize) {
        case "left":
          this._width = autoWidth;
          this._height = autoHeight;
          break;
        case "right":
          Z.DisplayObject.prototype.set$x.call(this, this, Z.DisplayObject.prototype.get$x.call(this, this) - (autoWidth - t1));
          this._width = autoWidth;
          this._height = autoHeight;
          break;
        case "center":
          Z.DisplayObject.prototype.set$x.call(this, this, Z.DisplayObject.prototype.get$x.call(this, this) - (autoWidth - t1) / 2);
          this._width = autoWidth;
          this._height = autoHeight;
          break;
        default:
      }
  },
  _refreshCache$0: function() {
    var t1, t2, pixelRatio, canvasWidth, canvasHeight, context;
    t1 = this._refreshPending;
    if ((t1 & 2) === 0)
      return;
    else
      this._refreshPending = t1 & 253;
    if (!this._cacheAsBitmap)
      return;
    t1 = $.get$Stage_autoHiDpi() === true ? $.get$_devicePixelRatio0() : 1;
    t2 = $.get$_backingStorePixelRatio0();
    if (typeof t1 !== "number")
      throw t1.$div();
    pixelRatio = t1 / t2;
    canvasWidth = C.JSNumber_methods.toInt$0(Math.ceil(this._width * pixelRatio));
    canvasHeight = C.JSNumber_methods.toInt$0(Math.ceil(this._height * pixelRatio));
    if (canvasWidth <= 0 || canvasHeight <= 0) {
      this._cacheAsBitmapCanvas = null;
      return;
    }
    if (this._cacheAsBitmapCanvas == null)
      this._cacheAsBitmapCanvas = W.CanvasElement_CanvasElement(canvasHeight, canvasWidth);
    t1 = this._cacheAsBitmapCanvas;
    t2 = J.getInterceptor$x(t1);
    if (t2.get$width(t1) !== canvasWidth)
      t2.set$width(t1, canvasWidth);
    t1 = this._cacheAsBitmapCanvas;
    t2 = J.getInterceptor$x(t1);
    if (t2.get$height(t1) !== canvasHeight)
      t2.set$height(t1, canvasHeight);
    context = J.get$context2D$x(this._cacheAsBitmapCanvas);
    context.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
    context.clearRect(0, 0, this._width, this._height);
    this._renderText$1(context);
  },
  _renderText$1: function(context) {
    var t1, i, lm, startIndex, t2, t3, $arguments, t4, offsetX, rtf, rtfEndIndex, text, t5, tfWidth, lineWidth, underlineY, strikethroughY, overlineY;
    context.save();
    context.beginPath();
    context.rect(0, 0, this._width, this._height);
    context.clip();
    context.textAlign = "start";
    context.textBaseline = "alphabetic";
    if (this._background) {
      context.fillStyle = A._color2rgb(this._backgroundColor);
      context.fillRect(0, 0, this._width, this._height);
    }
    for (t1 = this._textLineMetrics, i = 0; i < t1.length; ++i) {
      lm = t1[i];
      startIndex = lm._textIndex;
      t2 = J.get$length$asx(lm._text);
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t2 = new H.WhereIterable(this._textFormats, new A.RichTextField__renderText_closure(startIndex, startIndex + t2));
      t2.$builtinTypeInfo = [null];
      t3 = J.get$iterator$ax(t2._iterable);
      $arguments = H.substitute(t2.$asWhereIterable, H.getRuntimeTypeInfo(t2));
      t4 = $arguments == null ? null : $arguments[0];
      t2 = new H.WhereIterator(t3, t2._f);
      t2.$builtinTypeInfo = [t4];
      t3 = t2._iterator;
      offsetX = 0;
      for (; t2.moveNext$0();) {
        rtf = t3.get$current();
        rtfEndIndex = J.$eq(rtf.get$endIndex(), -1) ? J.get$length$asx(lm._text) : J.$add$ns(J.$sub$n(rtf.endIndex, startIndex), 1);
        text = J.substring$2$s(lm._text, P.max(J.$sub$n(rtf.startIndex, startIndex), 0), P.min(rtfEndIndex, J.get$length$asx(lm._text)));
        context.font = rtf.get$_cssFontStyle();
        context.fillStyle = A._color2rgb(rtf.color);
        t4 = lm._stagexl_richtextfield$_x;
        t5 = lm._stagexl_richtextfield$_y;
        context.fillText(text, t4 + offsetX, t5);
        tfWidth = context.measureText(text).width;
        if (rtf.underline || rtf.strikethrough || rtf.overline) {
          t4 = rtf.bold;
          t5 = rtf.size;
          if (t4) {
            if (typeof t5 !== "number")
              throw t5.$div();
            t4 = t5 / 10;
          } else {
            if (typeof t5 !== "number")
              throw t5.$div();
            t4 = t5 / 20;
          }
          lineWidth = C.JSNumber_methods.toInt$0(Math.ceil(t4));
          underlineY = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(lm._stagexl_richtextfield$_y + lineWidth));
          if (C.JSInt_methods.$mod(lineWidth, 2) !== 0)
            underlineY += 0.5;
          t4 = lm._stagexl_richtextfield$_y;
          t5 = rtf.size;
          if (typeof t5 !== "number")
            throw t5.$div();
          strikethroughY = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t4 - t5 / 4));
          t5 = lm._stagexl_richtextfield$_y;
          t4 = rtf.size;
          if (typeof t4 !== "number")
            throw t4.$div();
          overlineY = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t5 - t4 / 1.25));
          context.strokeStyle = A._color2rgb(rtf.color);
          context.lineWidth = lineWidth;
          context.beginPath();
          if (rtf.underline) {
            context.moveTo(lm._stagexl_richtextfield$_x + offsetX, underlineY);
            t4 = lm._stagexl_richtextfield$_x;
            if (typeof tfWidth !== "number")
              throw H.iae(tfWidth);
            context.lineTo(t4 + offsetX + tfWidth, underlineY);
          }
          if (rtf.strikethrough) {
            context.moveTo(lm._stagexl_richtextfield$_x + offsetX, strikethroughY);
            t4 = lm._stagexl_richtextfield$_x;
            if (typeof tfWidth !== "number")
              throw H.iae(tfWidth);
            context.lineTo(t4 + offsetX + tfWidth, strikethroughY);
          }
          if (rtf.overline) {
            context.moveTo(lm._stagexl_richtextfield$_x + offsetX, overlineY);
            t4 = lm._stagexl_richtextfield$_x;
            if (typeof tfWidth !== "number")
              throw H.iae(tfWidth);
            context.lineTo(t4 + offsetX + tfWidth, overlineY);
          }
          context.stroke();
          context.closePath();
        }
        if (typeof tfWidth !== "number")
          throw H.iae(tfWidth);
        offsetX += tfWidth;
      }
    }
    if (this._border) {
      context.strokeStyle = A._color2rgb(this._borderColor);
      context.lineWidth = 1;
      context.strokeRect(0, 0, this._width, this._height);
    }
    context.restore();
  },
  _onMouseDown$1: function(mouseEvent) {
  },
  get$_onMouseDown: function() {
    return new H.BoundClosure$1(this, A.RichTextField.prototype._onMouseDown$1, null, "_onMouseDown$1");
  },
  RichTextField$3: function(text, textFormat, parse) {
    var t1, t2;
    t1 = this._textFormats;
    t2 = textFormat.clone$0(textFormat);
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1[0] = t2;
    this._refreshPending = (this._refreshPending | 3) >>> 0;
    this._parse = parse;
    this._refreshPending = (this._refreshPending | 3) >>> 0;
    this.parser = this.get$defaultParser();
    if (parse && text !== "") {
      this._rawText = this._text;
      this.parser$1(text);
    } else
      this.set$text(this, text);
    this._getEventStream$2(C.EventStreamProvider_mouseDown._stagexl$_eventType, false).listen$1(this.get$_onMouseDown());
  },
  static: {
RichTextField$: function(text, textFormat, parse) {
  var t1, t2, t3;
  t1 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  t2 = P.List_List(null, A.RichTextLineMetrics);
  H.setRuntimeTypeInfo(t2, [A.RichTextLineMetrics]);
  t3 = $.DisplayObject__nextID;
  $.DisplayObject__nextID = t3 + 1;
  t3 = new A.RichTextField("", "", [new A.RichTextFormat("Arial", 12, 0, 0, -1, false, false, false, false, false, "left", 0, 0, 0, 0, 0, 0)], t1, "none", false, false, false, false, true, 16777215, 0, 0, 100, 100, 0, 0, t2, null, 3, true, null, false, true, true, 0, t3, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, true, false, null, null, null, false, null, null, null, "", null, Z.Matrix$fromIdentity(), Z.Matrix$fromIdentity(), true, null, null);
  t3.RichTextField$3(text, textFormat, parse);
  return t3;
}}

},

RichTextField_setFormat_closure: {"": "Closure;",
  call$2: function(a, b) {
    return J.$sub$n(a.get$startIndex(), b.get$startIndex());
  },
  $is_args2: true
},

RichTextField_defaultParser_closure: {"": "Closure;box_0,formatRanges_1",
  call$1: function(chunk) {
    var actText, t1, t2, t3, t4, actArg;
    actText = J.split$1$s(chunk, "}");
    t1 = actText.length;
    t2 = this.box_0;
    t3 = actText[0];
    if (t1 === 1) {
      t4 = t2.newtext_2;
      if (0 >= t1)
        throw H.ioore(actText, 0);
      t2.newtext_2 = C.JSString_methods.$add(t4, t3);
    } else {
      if (0 >= t1)
        throw H.ioore(actText, 0);
      t2.action_1 = t3;
      if (!J.startsWith$1$s(t2.action_1, "/")) {
        if (J.contains$1$asx(t2.action_1, "=") === true) {
          actArg = J.split$1$s(t2.action_1, "=");
          if (0 >= actArg.length)
            throw H.ioore(actArg, 0);
          t2.action_1 = actArg[0];
          if (1 >= actArg.length)
            throw H.ioore(actArg, 1);
          t2.arg_3 = actArg[1];
        }
        this.formatRanges_1.push([t2.action_1, t2.arg_3, t2.pos_0, -1]);
      } else {
        t2.action_1 = J.substring$1$s(t2.action_1, 1);
        J.$indexSet$ax(H.IterableMixinWorkaround_lastWhereList(this.formatRanges_1, new A.RichTextField_defaultParser__closure(), null), 3, t2.pos_0 - 1);
      }
      t1 = t2.newtext_2;
      if (1 >= actText.length)
        throw H.ioore(actText, 1);
      t2.newtext_2 = C.JSString_methods.$add(t1, actText[1]);
    }
    t1 = this.box_0;
    t1.pos_0 = t1.newtext_2.length;
  },
  $is_args1: true
},

RichTextField_defaultParser__closure: {"": "Closure;",
  call$1: function(e) {
    return J.$eq(J.$index$asx(e, 3), -1);
  },
  $is_args1: true
},

RichTextField_defaultParser_closure0: {"": "Closure;box_0,this_2",
  call$1: function(range) {
    var t1, t2, t3, t4;
    t1 = this.this_2;
    t2 = J.getInterceptor$asx(range);
    t3 = this.box_0;
    t3.base_4 = J.clone$0$x(t1.getFormatAt$1(t2.$index(range, 2)));
    switch (t2.$index(range, 0)) {
      case "b":
        t3.base_4.set$bold(true);
        break;
      case "u":
        t3.base_4.set$underline(true);
        break;
      case "i":
        t3.base_4.set$italic(true);
        break;
      case "s":
        t3.base_4.set$strikethrough(true);
        break;
      case "o":
        t3.base_4.set$overline(true);
        break;
      case "color":
        J.set$color$x(t3.base_4, J.toInt$0$n(t1._applyTextTagArg$2(t2.$index(range, 1), J.get$color$x(t3.base_4))));
        break;
      case "size":
        J.set$size$x(t3.base_4, t1._applyTextTagArg$2(t2.$index(range, 1), J.get$size$x(t3.base_4)));
        break;
      case "font":
        J.set$font$x(t3.base_4, t2.$index(range, 1));
        break;
      default:
        t4 = t1.presets;
        if (t4.containsKey$1(t2.$index(range, 0)))
          t3.base_4 = t4.$index(t4, t2.$index(range, 0));
        break;
    }
    t1.setFormat$3(t3.base_4, t2.$index(range, 2), t2.$index(range, 3));
  },
  $is_args1: true
},

RichTextField_getFormatAt_closure: {"": "Closure;index_0",
  call$1: function(f) {
    var t1 = this.index_0;
    if (!J.$gt$n(f.get$startIndex(), t1))
      t1 = J.$lt$n(f.endIndex, t1) && !J.$eq(f.endIndex, -1);
    else
      t1 = true;
    return !t1;
  },
  $is_args1: true
},

RichTextField_getFormatAt_closure0: {"": "Closure;this_1",
  call$0: function() {
    var t1 = this.this_1._textFormats;
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    return t1[0];
  }
},

RichTextField__getLineWidth_closure: {"": "Closure;startIndex_0,endIndex_1",
  call$1: function(f) {
    var t1;
    if (!J.$gt$n(f.get$startIndex(), this.endIndex_1))
      t1 = J.$lt$n(f.endIndex, this.startIndex_0) && !J.$eq(f.endIndex, -1);
    else
      t1 = true;
    return !t1;
  },
  $is_args1: true
},

RichTextField__refreshTextLineMetrics_closure: {"": "Closure;lineIndex_0",
  call$1: function(f) {
    var t1, t2;
    t1 = this.lineIndex_0;
    t2 = f.get$startIndex();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (t1 >= t2) {
      t2 = f.endIndex;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t1 = t1 <= t2 || t2 === -1;
    } else
      t1 = false;
    return t1;
  },
  $is_args1: true
},

RichTextField__refreshTextLineMetrics_closure0: {"": "Closure;lineIndex_1,lineEndIndex_2",
  call$1: function(f) {
    var t1;
    if (!J.$gt$n(f.get$startIndex(), this.lineEndIndex_2))
      t1 = J.$lt$n(f.endIndex, this.lineIndex_1) && !J.$eq(f.endIndex, -1);
    else
      t1 = true;
    return !t1;
  },
  $is_args1: true
},

RichTextField__renderText_closure: {"": "Closure;startIndex_0,endIndex_1",
  call$1: function(f) {
    var t1;
    if (!J.$gt$n(f.get$startIndex(), this.endIndex_1))
      t1 = J.$lt$n(f.endIndex, this.startIndex_0) && !J.$eq(f.endIndex, -1);
    else
      t1 = true;
    return !t1;
  },
  $is_args1: true
},

RichTextFormat: {"": "Object;font',size*,color*,startIndex@,endIndex@,bold?,italic?,underline?,strikethrough?,overline?,align,topMargin<,bottomMargin,leftMargin,rightMargin,indent<,leading",
  clone$0: function(_) {
    return new A.RichTextFormat(this.font, this.size, this.color, this.startIndex, this.endIndex, this.bold, this.italic, this.underline, this.strikethrough, this.overline, this.align, this.topMargin, this.bottomMargin, this.leftMargin, this.rightMargin, this.indent, this.leading);
  },
  get$_cssFontStyle: function() {
    var fontStyle = H.S(this.size) + "px " + H.S(this.font) + ", sans-serif";
    if (this.bold)
      fontStyle = "bold " + fontStyle;
    return this.italic ? "italic " + fontStyle : fontStyle;
  }
},

RichTextLineMetrics: {"": "Object;_text,_textIndex,_stagexl_richtextfield$_x,_stagexl_richtextfield$_y,_width,_height,_ascent,_descent,_leading,_indent",
  get$x: function(_) {
    return this._stagexl_richtextfield$_x;
  },
  get$y: function(_) {
    return this._stagexl_richtextfield$_y;
  },
  get$ascent: function() {
    return this._ascent;
  },
  get$descent: function() {
    return this._descent;
  }
}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Static function getters
init.globalFunctions.IsolateNatives__processWorkerMessage$closure = H.IsolateNatives__processWorkerMessage$closure = new H.Closure$2(H.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
init.globalFunctions.Primitives__throwFormatException$closure = H.Primitives__throwFormatException$closure = new H.Closure$1(H.Primitives__throwFormatException, "Primitives__throwFormatException$closure");
init.globalFunctions.toStringWrapper$closure = H.toStringWrapper$closure = new H.Closure$0(H.toStringWrapper, "toStringWrapper$closure");
init.globalFunctions.invokeClosure$closure = H.invokeClosure$closure = new H.Closure$7(H.invokeClosure, "invokeClosure$closure");
init.globalFunctions._asyncRunCallback$closure = P._asyncRunCallback$closure = new H.Closure$0(P._asyncRunCallback, "_asyncRunCallback$closure");
init.globalFunctions._nullDataHandler$closure = P._nullDataHandler$closure = new H.Closure$1(P._nullDataHandler, "_nullDataHandler$closure");
init.globalFunctions._nullErrorHandler$closure = P._nullErrorHandler$closure = new P.Closure$20(P._nullErrorHandler, "_nullErrorHandler$closure");
init.globalFunctions._nullDoneHandler$closure = P._nullDoneHandler$closure = new H.Closure$0(P._nullDoneHandler, "_nullDoneHandler$closure");
init.globalFunctions._defaultEquals$closure = P._defaultEquals$closure = new H.Closure$2(P._defaultEquals, "_defaultEquals$closure");
init.globalFunctions._defaultHashCode$closure = P._defaultHashCode$closure = new H.Closure$1(P._defaultHashCode, "_defaultHashCode$closure");
init.globalFunctions.Comparable_compare$closure = P.Comparable_compare$closure = new H.Closure$2(P.Comparable_compare, "Comparable_compare$closure");
init.globalFunctions.identical$closure = P.identical$closure = new H.Closure$2(P.identical, "identical$closure");
init.globalFunctions.identityHashCode$closure = P.identityHashCode$closure = new H.Closure$1(P.identityHashCode, "identityHashCode$closure");
init.globalFunctions.Element__determineMouseWheelEventType$closure = W.Element__determineMouseWheelEventType$closure = new H.Closure$1(W.Element__determineMouseWheelEventType, "Element__determineMouseWheelEventType$closure");
init.globalFunctions.main$closure = U.main$closure = new H.Closure$0(U.main, "main$closure");
// Runtime type support
J.JSInt.$isint = true;
J.JSInt.$isnum = true;
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isObject = true;
W.Touch.$isObject = true;
J.JSString.$isString = true;
J.JSString.$isComparable = true;
J.JSString.$asComparable = [J.JSString];
J.JSString.$isObject = true;
J.JSNumber.$isnum = true;
J.JSNumber.$isComparable = true;
J.JSNumber.$asComparable = [J.JSNumber];
J.JSNumber.$isObject = true;
P.Duration.$isDuration = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
W.MouseEvent0.$isMouseEvent0 = true;
W.MouseEvent0.$isObject = true;
J.JSArray.$isObject = true;
Z.DisplayObject.$isObject = true;
A.RichTextLineMetrics.$isObject = true;
Z.MouseEvent.$isMouseEvent = true;
Z.MouseEvent.$isObject = true;
Z._EventStream0.$isObject = true;
Z.RenderEvent.$isObject = true;
Z.ExitFrameEvent.$isObject = true;
Z.EnterFrameEvent.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
Z.Stage.$isObject = true;
W.WheelEvent.$isWheelEvent = true;
W.WheelEvent.$isMouseEvent0 = true;
W.WheelEvent.$isObject = true;
Z._Touch.$isObject = true;
W.KeyboardEvent.$isKeyboardEvent = true;
W.KeyboardEvent.$isObject = true;
W.TouchEvent0.$isTouchEvent0 = true;
W.TouchEvent0.$isObject = true;
A._RichFontStyleMetrics.$isObject = true;
P.ReceivePort.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
P._BufferingStreamSubscription.$is_BufferingStreamSubscription = true;
P._BufferingStreamSubscription.$is_EventSink = true;
P._BufferingStreamSubscription.$isStreamSubscription = true;
P._BufferingStreamSubscription.$isObject = true;
P._BroadcastSubscription.$is_BroadcastSubscription = true;
P._BroadcastSubscription.$is_BufferingStreamSubscription = true;
P._BroadcastSubscription.$is_EventSink = true;
P._BroadcastSubscription.$isStreamSubscription = true;
P._BroadcastSubscription.$isObject = true;
P.Object.$isObject = true;
P.Function.$isFunction = true;
P.Function.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
W.EventTarget.$isEventTarget = true;
W.EventTarget.$isObject = true;
Z.Rectangle0.$isRectangle0 = true;
Z.Rectangle0.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
Z.Animatable.$isAnimatable = true;
Z.Animatable.$isObject = true;
Z.Point.$isPoint = true;
Z.Point.$isObject = true;
P._DelayedEvent.$is_DelayedEvent = true;
P._DelayedEvent.$isObject = true;
P.DateTime.$isDateTime = true;
P.DateTime.$isComparable = true;
P.DateTime.$asComparable = [null];
P.DateTime.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
C.C__DelayedDone = new P._DelayedDone();
C.C__RootZone = new P._RootZone();
C.Duration_0 = new P.Duration(0);
C.EventStreamProvider_click = new W.EventStreamProvider("click");
C.EventStreamProvider_keydown = new W.EventStreamProvider("keydown");
C.EventStreamProvider_keypress = new W.EventStreamProvider("keypress");
C.EventStreamProvider_keyup = new W.EventStreamProvider("keyup");
C.EventStreamProvider_mouseDown = new Z.EventStreamProvider0("mouseDown");
C.EventStreamProvider_mousedown = new W.EventStreamProvider("mousedown");
C.EventStreamProvider_mousemove = new W.EventStreamProvider("mousemove");
C.EventStreamProvider_mouseout = new W.EventStreamProvider("mouseout");
C.EventStreamProvider_mouseup = new W.EventStreamProvider("mouseup");
C.EventStreamProvider_touchcancel = new W.EventStreamProvider("touchcancel");
C.EventStreamProvider_touchend = new W.EventStreamProvider("touchend");
C.EventStreamProvider_touchenter = new W.EventStreamProvider("touchenter");
C.EventStreamProvider_touchleave = new W.EventStreamProvider("touchleave");
C.EventStreamProvider_touchmove = new W.EventStreamProvider("touchmove");
C.EventStreamProvider_touchstart = new W.EventStreamProvider("touchstart");
C.JSArray_methods = J.JSArray.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNull_methods = J.JSNull.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_6qb = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_86y = function getTagFallback(o) {
  if (o == null) return "Null";
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.builtin$cls;
    if (typeof name == "string") return name;
    name = constructor.name;
    if (typeof name == "string"
        && name !== ""
        && name !== "Object"
        && name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Cbr = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (userAgent.indexOf("Chrome") >= 0 ||
        userAgent.indexOf("DumpRenderTree") >= 0) {
      return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_TtD = function() {
  function typeNameInChrome(obj) { return obj.constructor.name; }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_ZYJ =     ((typeof version == "function" && typeof os == "object" && "system" in os)
    || (typeof navigator == "object"
        && navigator.userAgent.indexOf('Chrome') != -1))
        ? function(x) { return x.$dartCachedLength || x.length; }
        : function(x) { return x.length; };
;
C.JS_CONST_rD3 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    if (tag == "Document") return null;
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
C.List_empty = Isolate.makeConstantList([]);
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.WheelEvent_methods = W.WheelEvent.prototype;
C.Window_methods = W.Window.prototype;
C._CustomEventStreamProvider__determineMouseWheelEventType = new W._CustomEventStreamProvider(W.Element__determineMouseWheelEventType$closure);
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.printToZone = null;
$._callbacksAreEnqueued = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Device__isOpera = null;
$.Device__isWebKit = null;
$.DisplayObject__nextID = 0;
$._Touch__globalTouchPointID = 0;
$.Mouse__customCursor = "auto";
$.Mouse__isCursorHidden = false;
$.Mouse__dragSprite = null;
$.Multitouch__inputMode = "none";
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return J.getInterceptor$n(receiver).$le(receiver, a0);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$n(receiver).$mul(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.abs$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).abs$0(receiver);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.append$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).append$1(receiver, a0);
};
J.clear$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).clear$0(receiver);
};
J.clone$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).clone$0(receiver);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.contains$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
J.dispatchEvent$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).dispatchEvent$1(receiver, a0);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$color$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$color(receiver);
};
J.get$context2D$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$context2D(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$offsetTop$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$offsetTop(receiver);
};
J.get$outline$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$outline(receiver);
};
J.get$size$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$size(receiver);
};
J.get$style$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$style(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.replaceAll$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
J.set$color$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$color(receiver, value);
};
J.set$cursor$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$cursor(receiver, value);
};
J.set$display$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$display(receiver, value);
};
J.set$font$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$font(receiver, value);
};
J.set$height$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$height(receiver, value);
};
J.set$outline$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$outline(receiver, value);
};
J.set$size$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$size(receiver, value);
};
J.set$text$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$text(receiver, value);
};
J.set$verticalAlign$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$verticalAlign(receiver, value);
};
J.set$width$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$width(receiver, value);
};
J.split$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).split$1(receiver, a0);
};
J.startsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
};
J.substring$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).substring$1(receiver, a0);
};
J.substring$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
J.toDouble$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toDouble$0(receiver);
};
J.toInt$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toInt$0(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined());
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return P.ListQueue$(null, {func: "void_", void: true});
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "autoHiDpi", "Stage_autoHiDpi", "get$Stage_autoHiDpi", function() {
  return $.get$_autoHiDpi();
});
Isolate.$lazy($, "_enterFrameEventIndex", "_enterFrameEventIndex", "get$_enterFrameEventIndex", function() {
  return new Z._BroadcastEventIndex([]);
});
Isolate.$lazy($, "_exitFrameEventIndex", "_exitFrameEventIndex", "get$_exitFrameEventIndex", function() {
  return new Z._BroadcastEventIndex([]);
});
Isolate.$lazy($, "_renderEventIndex", "_renderEventIndex", "get$_renderEventIndex", function() {
  return new Z._BroadcastEventIndex([]);
});
Isolate.$lazy($, "_mouseCursorChangedEvent", "Mouse__mouseCursorChangedEvent", "get$Mouse__mouseCursorChangedEvent", function() {
  return P.StreamController_StreamController(null, null, null, null, false, J.JSString);
});
Isolate.$lazy($, "_onMouseCursorChanged", "Mouse__onMouseCursorChanged", "get$Mouse__onMouseCursorChanged", function() {
  var t1 = $.get$Mouse__mouseCursorChangedEvent();
  t1.toString;
  t1 = new P._ControllerStream(t1);
  H.setRuntimeTypeInfo(t1, [null]);
  return t1.asBroadcastStream$0();
});
Isolate.$lazy($, "_inputModeChangedEvent", "Multitouch__inputModeChangedEvent", "get$Multitouch__inputModeChangedEvent", function() {
  return P.StreamController_StreamController(null, null, null, null, false, J.JSString);
});
Isolate.$lazy($, "_onInputModeChanged", "Multitouch__onInputModeChanged", "get$Multitouch__onInputModeChanged", function() {
  var t1 = $.get$Multitouch__inputModeChangedEvent();
  t1.toString;
  t1 = new P._ControllerStream(t1);
  H.setRuntimeTypeInfo(t1, [null]);
  return t1.asBroadcastStream$0();
});
Isolate.$lazy($, "_displayObjectListPool", "_displayObjectListPool", "get$_displayObjectListPool", function() {
  var t1, t2;
  t1 = [J.JSArray, Z.DisplayObject];
  t2 = P.List_List(null, t1);
  H.setRuntimeTypeInfo(t2, [t1]);
  t2 = new Z.ObjectPool(t2, new Z.closure(), 0);
  H.setRuntimeTypeInfo(t2, [t1]);
  return t2;
});
Isolate.$lazy($, "_dummyCanvas", "_dummyCanvas", "get$_dummyCanvas", function() {
  return W.CanvasElement_CanvasElement(16, 16);
});
Isolate.$lazy($, "_dummyCanvasContext", "_dummyCanvasContext", "get$_dummyCanvasContext", function() {
  return J.get$context2D$x($.get$_dummyCanvas());
});
Isolate.$lazy($, "_backingStorePixelRatio", "_backingStorePixelRatio", "get$_backingStorePixelRatio", function() {
  if ($.get$_dummyCanvasContext().webkitBackingStorePixelRatio == null)
    var t1 = 1;
  else {
    t1 = $.get$_dummyCanvasContext().webkitBackingStorePixelRatio;
    t1.toString;
  }
  return t1;
});
Isolate.$lazy($, "_devicePixelRatio", "_devicePixelRatio", "get$_devicePixelRatio", function() {
  return window.devicePixelRatio == null ? 1 : window.devicePixelRatio;
});
Isolate.$lazy($, "_isMobile", "_isMobile", "get$_isMobile", function() {
  return new Z.closure0().call$0();
});
Isolate.$lazy($, "_screenMax", "_screenMax", "get$_screenMax", function() {
  return window.screen == null ? 1024 : P.max(window.screen.width, window.screen.height);
});
Isolate.$lazy($, "_autoHiDpi", "_autoHiDpi", "get$_autoHiDpi", function() {
  var t1 = $.get$_devicePixelRatio();
  if (typeof t1 !== "number")
    throw t1.$gt();
  if (t1 > 1)
    t1 = $.get$_isMobile() !== true || $.get$_screenMax() > 480;
  else
    t1 = false;
  return t1;
});
Isolate.$lazy($, "_fontStyleMetrics", "_fontStyleMetrics", "get$_fontStyleMetrics", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, A._RichFontStyleMetrics);
});
Isolate.$lazy($, "_dummyCanvas", "_dummyCanvas0", "get$_dummyCanvas0", function() {
  return W.CanvasElement_CanvasElement(16, 16);
});
Isolate.$lazy($, "_dummyCanvasContext", "_dummyCanvasContext0", "get$_dummyCanvasContext0", function() {
  return J.get$context2D$x($.get$_dummyCanvas0());
});
Isolate.$lazy($, "_backingStorePixelRatio", "_backingStorePixelRatio0", "get$_backingStorePixelRatio0", function() {
  if ($.get$_dummyCanvasContext0().webkitBackingStorePixelRatio == null)
    var t1 = 1;
  else {
    t1 = $.get$_dummyCanvasContext0().webkitBackingStorePixelRatio;
    t1.toString;
  }
  return t1;
});
Isolate.$lazy($, "_devicePixelRatio", "_devicePixelRatio0", "get$_devicePixelRatio0", function() {
  return window.devicePixelRatio == null ? 1 : window.devicePixelRatio;
});
// Native classes

init.functionAliases = {};
;
init.metadata = [];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { H.startRootIsolate(U.main$closure); });
  } else {
    H.startRootIsolate(U.main$closure);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, accessors, cls) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable = false;
    if (code == 45) {
      len--;
      code = field.charCodeAt(len - 1);
      field = field.substring(0, len);
      reflectable = true;
    }
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()

//# sourceMappingURL=example.dart.js.map
//@ sourceMappingURL=example.dart.js.map
